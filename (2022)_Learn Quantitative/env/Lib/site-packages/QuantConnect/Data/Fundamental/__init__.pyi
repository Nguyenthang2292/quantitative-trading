from typing import overload
import abc
import datetime
import typing

import QuantConnect
import QuantConnect.Data
import QuantConnect.Data.Fundamental
import System
import System.Collections.Generic


class StockType(System.Object):
    """Helper class for the AssetClassification's StockType field AssetClassification.StockType"""

    AggressiveGrowth: int = 1
    """
    Companies whose revenues and earnings have both been growing significantly faster than
    the general economy.
    """

    ClassicGrowth: int = 2
    """
    Companies that are growing respectably faster than the general economy, and often pay a
    steady dividend. They tend to be mature and solidly profitable businesses.
    """

    Cyclicals: int = 3
    """
    Companies in the cyclicals and durables sectors, except those in the three types below.
    The profits of cyclicals tend to rise and fall with the general economy.
    """

    Distressed: int = 4
    """
    Companies that have had consistently declining cash flows and earnings over the past
    three years, and/or very high debt.
    """

    HardAsset: int = 5
    """
    Companies that deal in assets such as oil, metals, and real estate, which tend to do
    well in inflationary environments.
    """

    HighYield: int = 6
    """
    Companies that have dividend yields at least twice the average for large-cap stocks.
    They tend to be mature, slow-growing companies.
    """

    SlowGrowth: int = 7
    """
    Companies that have shown slow revenue and earnings growth (typically less than the rate
    of GDP growth) over at least three years.
    """

    SpeculativeGrowth: int = 8
    """
    Companies that have shown strong revenue growth but slower or spotty earnings growth.
    Very small or young companies also tend to fall into this class.
    """


class StyleBox(System.Object):
    """
    Helper class for the AssetClassification's StyleBox field AssetClassification.StyleBox.
    For stocks and stock funds, it classifies securities according to market capitalization and growth and value factor
    """

    LargeValue: int = 1

    LargeCore: int = 2

    LargeGrowth: int = 3

    MidValue: int = 4

    MidCore: int = 5

    MidGrowth: int = 6

    SmallValue: int = 7

    SmallCore: int = 8

    SmallGrowth: int = 9


class MorningstarEconomySphereCode(System.Object):
    """Helper class for the AssetClassification's MorningstarEconomySphereCode field AssetClassification.MorningstarEconomySphereCode."""

    Cyclical: int = 1
    """
    The cyclical Super Sector includes industries significantly affected by economic shifts.
    When the economy is prosperous, these industries tend to expand, and when the economy is
    in a downturn they tend to shrink. In general, the stocks in these industries have betas
    of greater than 1.
    """

    Defensive: int = 2
    """
    The defensive Super Sector includes industries that are relatively immune to economic
    cycles. These industries provide services that consumers require in both good and bad
    times, such as healthcare and utilities. In general, the stocks in these industries have
    betas of less than 1.
    """

    Sensitive: int = 3
    """
    The sensitive Super Sector includes industries that ebb and flow with the overall
    economy, but not severely. Sensitive industries fall between defensive and cyclical, as
    they are not immune to a poor economy, but they also may not be as severely affected as
    industries in the cyclical Super Sector. In general, the stocks in these industries have
    betas that are close to 1.
    """


class MorningstarSectorCode(System.Object):
    """Helper class for the AssetClassification's MorningstarSectorCode field AssetClassification.MorningstarSectorCode."""

    BasicMaterials: int = 101
    """
    Companies that manufacture chemicals, building materials, and paper products. This
    sector also includes companies engaged in commodities exploration and processing.
    """

    ConsumerCyclical: int = 102
    """
    This sector includes retail stores, auto and auto-parts manufacturers, restaurants,
    lodging facilities, specialty retail and travel companies.
    """

    FinancialServices: int = 103
    """
    Companies that provide financial services include banks, savings and loans, asset
    management companies, credit services, investment brokerage firms, and insurance companies.
    """

    RealEstate: int = 104
    """This sector includes companies that develop, acquire, manage, and operate real estate properties."""

    ConsumerDefensive: int = 205
    """
    Companies that manufacture food, beverages, household and personal products, packaging,
    or tobacco. Also includes companies that provide services such as education and training services.
    """

    Healthcare: int = 206
    """
    This sector includes biotechnology, pharmaceuticals, research services, home healthcare,
    hospitals, long-term-care facilities, and medical equipment and supplies. Also include
    pharmaceutical retailers and companies which provide health information services.
    """

    Utilities: int = 207
    """Electric, gas, and water utilities."""

    CommunicationServices: int = 308
    """
    Companies that provide communication services using fixed-line networks or
    those that provide wireless access and services. Also includes companies that provide
    advertising & marketing services, entertainment content and services, as well as
    interactive media and content provider over internet or through software.
    """

    Energy: int = 309
    """
    Companies that produce or refine oil and gas, oilfield-services and equipment companies,
    and pipeline operators. This sector also includes companies that mine thermal coal and uranium.
    """

    Industrials: int = 310
    """
    Companies that manufacture machinery, hand-held tools, and industrial products. This
    sector also includes aerospace and defense firms as well as companies engaged in
    transportation services.
    """

    Technology: int = 311
    """
    Companies engaged in the design, development, and support of computer operating systems
    and applications. This sector also includes companies that make computer equipment, data
    storage products, networking products, semiconductors, and components.
    """


class MorningstarIndustryGroupCode(System.Object):
    """Helper class for the AssetClassification's MorningstarIndustryGroupCode field AssetClassification.MorningstarIndustryGroupCode."""

    Agriculture: int = 10110

    BuildingMaterials: int = 10120

    Chemicals: int = 10130

    ForestProducts: int = 10140

    MetalsAndMining: int = 10150

    Steel: int = 10160

    VehiclesAndParts: int = 10200

    Furnishings: int = 10220

    FixturesAndAppliances: int = 10220

    HomebuildingAndConstruction: int = 10230

    ManufacturingApparelAndAccessories: int = 10240

    PackagingAndContainers: int = 10250

    PersonalServices: int = 10260

    Restaurants: int = 10270

    RetailCyclical: int = 10280

    TravelAndLeisure: int = 10290

    AssetManagement: int = 10310

    Banks: int = 10320

    CapitalMarkets: int = 10330

    Insurance: int = 10340

    DiversifiedFinancialServices: int = 10350

    CreditServices: int = 10360

    RealEstate: int = 10410

    REITs: int = 10420

    BeveragesAlcoholic: int = 20510

    BeveragesNonAlcoholic: int = 20520

    ConsumerPackagedGoods: int = 20525

    Education: int = 20540

    RetailDefensive: int = 20550

    TobaccoProducts: int = 20560

    Biotechnology: int = 20610

    DrugManufacturers: int = 20620

    HealthcarePlans: int = 20630

    HealthcareProvidersAndServices: int = 20645

    MedicalDevicesAndInstruments: int = 20650

    MedicalDiagnosticsAndResearch: int = 20660

    MedicalDistribution: int = 20670

    UtilitiesIndependentPowerProducers: int = 20710

    UtilitiesRegulated: int = 20720

    TelecommunicationServices: int = 30810

    MediaDiversified: int = 30820

    InteractiveMedia: int = 30830

    OilAndGas: int = 30910

    OtherEnergySources: int = 30920

    AerospaceAndDefense: int = 31010

    BusinessServices: int = 31020

    Conglomerates: int = 31030

    Construction: int = 31040

    FarmAndHeavyConstructionMachinery: int = 31050

    IndustrialDistribution: int = 31060

    IndustrialProducts: int = 31070

    Transportation: int = 31080

    WasteManagement: int = 31090

    Software: int = 31110

    Hardware: int = 31120

    Semiconductors: int = 31130


class MorningstarIndustryCode(System.Object):
    """Helper class for the AssetClassification's MorningstarIndustryCode field AssetClassification.MorningstarIndustryCode."""

    AgriculturalInputs: int = 10110010
    """
    Companies that manufacture nitrogenous and phosphatic fertilizers, pesticides, seed, and
    other agricultural chemical products.
    """

    BuildingMaterials: int = 10120010
    """
    Companies that manufacture construction materials, including stone, clay, and brick
    products, cement, lime, gypsum, and concrete and other construction products. Excludes
    companies that manufacture finished and semi finished building products.
    """

    Chemicals: int = 10130010
    """
    Chemical manufacturing companies engaged in diverse chemical and chemical-related
    operations, and basic chemicals manufacturing.
    """

    SpecialtyChemicals: int = 10130020
    """
    Companies that use base chemicals to produce value-added chemicals that are used in a
    variety of products. Includes companies that produce polishes, adhesives and sealants,
    explosives, printing ink, paint, carbon black, acids, repellants, and cleaning solutions.
    """

    LumberAndWoodProduction: int = 10140010
    """Companies that grow timber, mill lumber, and manufacture wood and wood products for construction."""

    PaperAndPaperProducts: int = 10140020
    """
    Companies that manufacture and market paper and paper-related products from wood pulp
    and other fibers. Excludes companies that produce paper packaging products and are
    classified in the packaging and containers industry.
    """

    Aluminum: int = 10150010
    """
    Companies that produce, refine, market, and distribute aluminum and related
    aluminum-based products.
    """

    Copper: int = 10150020
    """
    Companies engaged in the exploration, mining, smelting, and refining of copper ores and
    related copper products.
    """

    OtherIndustrialMetalsAndMining: int = 10150030
    """
    Companies that mine, refine, produce, smelt, and mill industrial ores, including copper,
    lead, zinc, radium, vanadium, nickel, tin, titanium, and other related materials.
    """

    Gold: int = 10150040
    """Companies principally engaged in gold exploration, mining, processing, extraction, and smelting."""

    Silver: int = 10150050
    """Companies principally engaged in silver exploration, mining, processing, extraction, and smelting."""

    OtherPreciousMetalsAndMining: int = 10150060
    """
    Companies that mine, refine, produce, smelt, and mill precious metals, including silver,
    platinum, palladium, diamond, and other related minerals.
    """

    CokingCoal: int = 10160010
    """Companies that produce coking coal."""

    Steel: int = 10160020
    """
    Companies that produce steel plates, steel sheets, bar and rod materials, structural
    steel, steel pipes and tubes, and stainless steel.
    """

    AutoAndTruckDealerships: int = 10200010
    """
    Companies engaged in the specialty retail of new and used automobiles, trucks, and other
    vehicles through the operation and/or franchising of dealerships.
    """

    AutoManufacturers: int = 10200020
    """Leading worldwide designers and manufacturers of passenger cars and trucks."""

    AutoParts: int = 10200030
    """
    Companies that manufacture motor vehicle parts and accessories, including rubber and
    plastic products, such as tires and inner tubes, but do not manufacture complete car bodies.
    """

    RecreationalVehicles: int = 10200040
    """
    Companies that manufacture recreational vehicles, including self-contained motor homes,
    campers, all-terrain vehicles, travel/camper trailers, and snowmobiles.
    """

    Furnishings: int = 10220010
    """
    Companies that manufacture and market wooden, metal, and upholstered furniture,
    mattresses, bedsprings, lighting fixtures, wooden flooring, wallpaper, and household
    products, such as utensils, cutlery, tableware, and appliances.
    """

    FixturesAndAppliances: int = 10220010
    """
    Companies that manufacture and market wooden, metal, and upholstered furniture,
    mattresses, bedsprings, lighting fixtures, wooden flooring, wallpaper, and household
    products, such as utensils, cutlery, tableware, and appliances.
    """

    ResidentialConstruction: int = 10230010
    """
    Companies that build and renovate residential buildings, such as single-family houses,
    apartments, and hotels.
    """

    TextileManufacturing: int = 10240010
    """
    Companies that manufacture and mill textile products, including apparel fabrics, bedding
    and accessories, home furnishing fabrics, carpets and rugs, curtains and drapes, and
    other milled textile products.
    """

    ApparelManufacturing: int = 10240020
    """
    Companies that manufacture, design, market, source, and sell all lines of clothing for
    men, women, and children. Also includes companies that manufacture or distribute
    buttons, buckles, and other apparel parts.
    """

    FootwearAndAccessories: int = 10240030
    """
    Companies that manufacture, design, market, and sell lines of footwear and luggage,
    handbags and purses, belts, and other leather goods.
    """

    PackagingAndContainers: int = 10250010
    """
    Companies that manufacture and market paper, plastic, metal, and glass packaging
    products, including corrugated boxes, cardboard containers, bottles, cans, and plastic
    foam and containers.
    """

    PersonalServices: int = 10260010
    """
    Companies that provide services of a personal nature or that are particularly structured
    for the individual or group being served, including veterinary services, funeral and
    cemetery services, child care services, portrait and photo services, tax preparation and
    legal services, and other miscellaneous personal services.
    """

    Restaurants: int = 10270010
    """
    Companies that own, operate, and franchise full-service restaurants that engage in the
    retail sale of prepared food and drink.
    """

    ApparelRetail: int = 10280010
    """Companies engaged in the retail sale of clothing, shoes, and accessories."""

    DepartmentStores: int = 10280020
    """
    Companies engaged in the retail sale of a diverse mix of merchandise, emphasizing
    fashion apparel and accessories, home furnishings, electronics, and cosmetics.
    """

    HomeImprovementRetail: int = 10280030
    """
    Companies engaged in the retail sale of home improvement items, such as lumber, carpets,
    hardware and other building materials, plants and other garden supplies, and various
    other items for the home.
    """

    LuxuryGoods: int = 10280040
    """
    Companies engaged in the specialty retail of luxury items, including jewelry, watches,
    crystal, clothing, handbags, and accessories.
    """

    InternetRetail: int = 10280050
    """
    Companies engaged in the online retail sale of a diverse mix of merchandise. Excludes
    companies that target the travel industry and are classified in travel services.
    """

    SpecialtyRetail: int = 10280060
    """
    Companies engaged in the specialty retail of various goods and products not covered in a
    specific industry group. This group includes retailers such as bookstores, office-supply
    stores, gas stations, pawn shops, novelty shops, auto-parts stores, electronics stores,
    home furnishing stores, sporting goods stores, toy and hobby stores, music and video
    stores, and many other miscellaneous retailers.
    """

    Gambling: int = 10290010
    """
    Companies that own, operate, or manage lawful gaming activities and events, such as
    horse and dog racing, online gaming, bingo, and video lottery, as well as companies that
    supply products or services to gaming operators. It excludes companies operating casinos.
    """

    Leisure: int = 10290020
    """
    Companies that manufacture, design, market, and sell bicycles, sporting goods,
    photographic equipment, recreational equipment, toys, and other leisure products or services.
    """

    Lodging: int = 10290030
    """
    Companies that develop, manage, own, and operate lodging facilities, including motels,
    extended-stay and full-service hotels, and economy hotels and inns.
    """

    ResortsAndCasinos: int = 10290040
    """
    Companies that own, operate, and manage resort properties, including beach clubs,
    time-share properties, and luxury resort hotels and that conduct casino gaming operations.
    """

    TravelServices: int = 10290050
    """Companies that offer travel-related products or services, including online travel services."""

    AssetManagement: int = 10310010
    """
    Investment management firms offering diversified services such as asset administration,
    investment advice, portfolio or mutual fund management, money management, and venture capital.
    """

    BanksDiversified: int = 10320010
    """
    Global, diverse financial institutions serving the corporate and consumer needs of
    retail banking, investment banking, trust management, credit cards and mortgage banking.
    """

    BanksRegional: int = 10320020
    """
    Regional, diverse financial institutions serving the corporate, government, and consumer
    needs of retail banking, investment banking, trust management, credit cards, mortgage
    banking, savings and loan associations, building societies, cooperative banks, and homestead.
    """

    MortgageFinance: int = 10320030
    """Companies that originate, purchase, sell, and service home mortgage and equity loans."""

    CapitalMarkets: int = 10330010
    """
    Large, major investment houses offering investment banking, merchant banking,
    underwriting, brokerage, research, advisory, and trading services to broad-based
    national and international markets.
    """

    FinancialDataAndStockExchanges: int = 10330020
    """
    Companies that operate security exchanges, including companies that offer financial data
    such as ratings, investment research, and other research solutions.
    """

    InsuranceLife: int = 10340010
    """
    Companies that underwrite, market, and distribute life insurance and related products to
    individuals and families.
    """

    InsurancePropertyAndCasualty: int = 10340020
    """
    Companies that underwrite, market, and distribute fire, marine, and casualty insurance
    for property and other tangible assets.
    """

    InsuranceReinsurance: int = 10340030
    """Companies that underwrite and sell reinsurance."""

    InsuranceSpecialty: int = 10340040
    """
    Companies that underwrite, market, and distribute accident and health, sickness,
    mortgage, and other specialty or supplemental insurance to individuals and families.
    """

    InsuranceBrokers: int = 10340050
    """
    Companies acting primarily as agents or intermediaries in creating insurance contracts
    between clients and insurance companies.
    """

    InsuranceDiversified: int = 10340060
    """
    Insurance companies with diversified interests in life, health, and property and
    casualty insurance.
    """

    ShellCompanies: int = 10350010
    """
    A development-stage company with no or minimal revenue. Includes capital pool, blank
    check, shell, and holding companies.
    """

    FinancialConglomerates: int = 10350020
    """
    Companies that provide financial services, including banking, insurance, and capital
    markets, but with no dominant business line or source of revenue.
    """

    CreditServices: int = 10360010
    """
    Companies that extend credit and make loans to individuals and businesses through credit
    cards, installment loans, student loans, and business loans that are associated with
    other consumer and business credit instruments.
    """

    RealEstateDevelopment: int = 10410010
    """
    Companies that develop real estate and same properties held as inventory, or sold to
    others after development, with no specific portfolio composition.
    """

    RealEstateServices: int = 10410020
    """
    Companies that operate, manage, and lease real property with no specific portfolio
    composition. Includes real estate services like brokers and agents but excludes
    companies classified in the real estate â€“ development industry.
    """

    RealEstateDiversified: int = 10410030
    """
    Companies engaged in multiple real estate activities, including development, sales,
    management, and related services. Excludes companies classified in real estate
    development and real estate services.
    """

    REITHealthcareFacilities: int = 10420010
    """
    Self-administered real estate investment trusts engaged in the development, acquisition,
    management, and disposition of healthcare properties, including long-term-care
    facilities, acute-care and rehab hospitals, psychiatric facilities, and substance-abuse centers.
    """

    REITHotelAndMotel: int = 10420020
    """
    Self-administered real estate investment trusts engaged in the development, acquisition,
    management, and disposition of lodging properties, including full- and limited-service
    hotels and motels.
    """

    REITIndustrial: int = 10420030
    """
    Self-administered real estate investment trusts engaged in the development, acquisition,
    management, and disposition of industrial properties, including bulk warehouses,
    self-storage facilities, distribution facilities, and other light industrial facilities.
    """

    REITOffice: int = 10420040
    """
    Self-administered real estate investment trusts engaged in the development, acquisition,
    management, and disposition of office properties, including office buildings, complexes,
    and centers.
    """

    REITResidential: int = 10420050
    """
    Self-administered real estate investment trusts engaged in the development, acquisition,
    management, and disposition of residential properties, including apartments, multifamily
    and single-family mortgage loans, manufactured housing, mobile-home parks, and other
    residential properties.
    """

    REITRetail: int = 10420060
    """
    Self-administered real estate investment trusts engaged in the development, acquisition,
    management, and disposition of retail properties, including community shopping centers,
    factory outlet shopping centers, enclosed shopping malls, strip centers, restaurants,
    and other retail properties.
    """

    REITMortgage: int = 10420070
    """
    Self-administered real estate investment trusts engaged in the acquisition, management,
    and disposition of mortgage-backed securities. Also includes companies that provide
    financing for income-producing real estate by purchasing or originating mortgages and
    mortgage-backed securities; and earns income from the interest on these investments.
    """

    REITSpecialty: int = 10420080
    """
    Self-administered real estate investment trusts engaged in the acquisition, management,
    and disposition of properties not classified elsewhere. Includes trusts that operate,
    lease, and invest in telecom towers, advertising spaces, timberland properties, and
    other properties not classified elsewhere.
    """

    REITDiversified: int = 10420090
    """
    Self-administered real estate investment trusts engaged in the acquisition, management,
    and disposition of diversified property holdings, with no specific portfolio composition.
    """

    BeveragesBrewers: int = 20510010
    """Companies that manufacture, sell, and distribute malt-based beverages, beers, and ales."""

    BeveragesWineriesAndDistilleries: int = 20510020
    """Companies that manufacture, sell, and distribute distilled liquors and wine."""

    BeveragesNonAlcoholic: int = 20520010
    """
    Companies that manufacture, sell, and distribute soft drinks, carbonated and spring
    water, fruit juices, and other nonalcoholic beverages.
    """

    Confectioners: int = 20525010
    """
    Companies that manufacture and refine raw sugar, syrup or finished cane and beet sugar,
    candy and chewing gum, chocolate, and cocoa products.
    """

    FarmProducts: int = 20525020
    """
    Companies that produce, raise, and grow agricultural and farm-based food products,
    including fruits, vegetables, other crop products, cattle, and eggs. Also includes
    seafood products.
    """

    HouseholdAndPersonalProducts: int = 20525030
    """
    Companies that manufacture and market soaps and other detergents, polishing and
    sanitation goods and produce glycerin from vegetable and animal fats and oils. Also
    includes companies that manufacture and market personal-care products, including
    perfume, cosmetics, and other toilet preparations, infant and adult sanitary paper
    products, shaving razors and blades.
    """

    PackagedFoods: int = 20525040
    """
    Companies that process and package food products, including frozen foods, grain
    products, canned foods, snack foods, health supplements, vitamins, and pet products.
    """

    EducationAndTrainingServices: int = 20540010
    """
    Companies that provide educational and training services, including college and
    junior-college courses, higher-education programs, technical and vocational training,
    and other education services.
    """

    DiscountStores: int = 20550010
    """Companies engaged in the retail sale of a variety of merchandise at low and discounted prices."""

    FoodDistribution: int = 20550020
    """
    Companies primarily engaged in the distribution and supply of food products, including
    packaged goods, meat, dairy products, frozen foods, and related groceries to grocery
    stores, restaurants, and other food-service centers.
    """

    GroceryStores: int = 20550030
    """
    Companies engaged in the retail sale of groceries, including dry goods, meat, produce,
    frozen foods, dairy products, seafood, deli/bakery, and nonfood items.
    """

    Tobacco: int = 20560010
    """
    Companies that manufacture and market cigarettes, e-cigarettes, snuff, cigars, chewing
    tobacco, and all other tobacco products.
    """

    Biotechnology: int = 20610010
    """
    Biotech and biopharmaceutical companies engaged in research, discovery, development, and
    production of innovative drug and drug-related technologies.
    """

    DrugManufacturersGeneral: int = 20620010
    """
    Major, global pharmaceutical manufacturers offering a broad and diverse line of drug and
    healthcare products; industry leaders that have made a significant commitment to the
    research and development of a long pipeline of drugs.
    """

    DrugManufacturersSpecialtyAndGeneric: int = 20620020
    """
    Companies engaged in development and discovery of branded forms of drug, drug-related
    products, generic drug products, and animal-related drugs. Also includes companies that
    cultivate, process, and farm cannabis or marijuana.
    """

    HealthcarePlans: int = 20630010
    """
    Companies that offer a wide variety of managed health products and services, including
    HMOs, PPOs, and other health insurance plans, and are largely U.S.-domiciled.
    """

    MedicalCareFacilities: int = 20645010
    """
    Companies that provide medical services through the ownership and operation of
    hospitals, and other auxiliary healthcare-related services, including healthcare
    staffing and ambulatory services. Also, companies that operate long-term-care
    facilities, such as assisted-living centers, nursing and retirement homes,
    substance-abuse centers, and centers for rehabilitation services.
    """

    PharmaceuticalRetailers: int = 20645020
    """
    Companies engaged in the retail sale of prescription drugs and patent medicines as well
    as a number of related lines, such as cosmetics, toiletries, and novelty merchandise.
    """

    HealthInformationServices: int = 20645030
    """
    Companies that develop and provide comprehensive physician practice management systems
    and software for hospitals, medical practices, and managed-care organizations.
    """

    MedicalDevices: int = 20650010
    """
    Companies that develop, manufacture, and market medical and surgical equipment and
    machinery, including orthopedic products, respiratory care equipment, x-ray equipment,
    laser systems, implants, pacemakers, and other major medical machines and apparatus.
    """

    MedicalInstrumentsAndSupplies: int = 20650020
    """
    Companies that develop, design, manufacture, and market medical and dental instruments
    and supplies, including wheelchairs, catheters, needles, syringes, eyewear and eyecare
    products, and other health-related supplies.
    """

    DiagnosticsAndResearch: int = 20660010
    """
    Companies that provide laboratory testing services through imaging and other diagnostic
    services to the medical industry.
    """

    MedicalDistribution: int = 20670010
    """
    Companies primarily engaged in the distribution and supply of medical instruments and
    supplies, ophthalmic goods, and other health-related items to the medical and healthcare industry.
    """

    UtilitiesIndependentPowerProducers: int = 20710010
    """
    Companies that own and operate merchant power generation facilities and sell electricity
    into retail and wholesale markets.
    """

    UtilitiesRenewable: int = 20710020
    """
    Companies that generate, produce, or transmit electric energy from renewable sources,
    including hydropower, wind, geothermal, biomass, solar, tidal, and wave.
    """

    UtilitiesRegulatedWater: int = 20720010
    """Companies that distribute water for sale, including water-treatment companies."""

    UtilitiesRegulatedElectric: int = 20720020
    """Companies that generate, transmit, or distribute electric energy for sale."""

    UtilitiesRegulatedGas: int = 20720030
    """Companies that transmit, store, or distribute natural gas."""

    UtilitiesDiversified: int = 20720040
    """
    Companies engaged in the regulated generation, transmission, or distribution of
    electricity and natural gas, merchant power generation facilities, and energy marketing operations.
    """

    TelecomServices: int = 30810010
    """
    Companies that provide local, national, international, and long-distance phone services,
    as well as companies offering wireless services. Also includes companies that provide
    services for faxing, prepaid phone cards, pay phones, and directory assistance, or that
    provide Internet access services.
    """

    AdvertisingAgencies: int = 30820010
    """
    Companies engaged in full-service advertising operations, including the planning,
    creating, producing, and placing of advertising in media such as TV, radio, and print.
    Also includes companies providing marketing services, including outdoor advertising,
    promotional materials, direct-mail services, digital marketing, event management
    services, and marketing research services.
    """

    Publishing: int = 30820020
    """
    Companies that publish periodicals, such as magazines, comic books, trade journals,
    books, pamphlets, e-publications, and newspapers.
    """

    Broadcasting: int = 30820030
    """
    Companies that own or operate radio broadcast stations and provide and produce radio
    programming services, television programming services, and television broadcast
    stations. Also includes companies providing Internet-based video on demand and
    pay-per-view programming services.
    """

    Entertainment: int = 30820040
    """
    Companies primarily operating with diversified holdings in movies, television, and other
    media-based entertainment. Also includes companies that produce and distribute motion
    pictures, television programmers, video, and the operation of movie theaters; and
    provide cable television services.
    """

    InternetContentAndInformation: int = 30830010
    """
    Companies that provide content, Internet navigation services, and reference guide
    information for the World Wide Web through its platforms, including social media, search
    engines, and networking platform companies.
    """

    ElectronicGamingAndMultimedia: int = 30830020
    """
    Companies that primarily develop or publish video games and other multimedia software
    applications for devices that include personal computers, video game systems,
    cellphones, tablets, and other portable media players.
    """

    OilAndGasDrilling: int = 30910010
    """Companies primarily engaged in the drilling for petroleum and natural gas."""

    OilAndGasEAndP: int = 30910020
    """Energy companies which are primarily engaged in oil and gas exploration and production."""

    OilAndGasIntegrated: int = 30910030
    """
    Major energy companies engaged in the diverse aspects of oil and gas operations,
    including crude oil and gas exploration, production, manufacturing, refining, marketing,
    and transportation.
    """

    OilAndGasMidstream: int = 30910040
    """
    Companies that own and operate oilfield pipelines and are involved in the gathering,
    processing, and transportation of natural crude petroleum.
    """

    OilAndGasRefiningAndMarketing: int = 30910050
    """Companies that refine, gather, market, and sell petroleum and petroleum products."""

    OilAndGasEquipmentAndServices: int = 30910060
    """
    Companies that provide oilfield services and equipment for activities such as contract
    drilling and seismic surveys. Also includes equipment and tool rental, pumping and
    processing services, and inspection and contracting services.
    """

    ThermalCoal: int = 30920010
    """
    Companies that mine thermal coal, which is used for generating energy. Excludes
    companies that mine coking coal to make steel.
    """

    Uranium: int = 30920020
    """Companies that mine, refine, produce, and mill uranium and uranium-related materials."""

    AerospaceAndDefense: int = 31010010
    """
    Companies that manufacture aerospace and defense products, including aircraft and
    aircraft parts, tanks, guided missiles, space vehicles, ships and marine equipment, and
    other aerospace and defense components and systems, as well as companies supporting
    these products through repair and maintenance services.
    """

    SpecialtyBusinessServices: int = 31020010
    """
    Companies that provide services to the commercial or business market, including
    information distribution, warehousing, graphic design, accounting, printing, and
    miscellaneous services.
    """

    ConsultingServices: int = 31020020
    """
    Companies that provide management, research, and consulting services to businesses and
    other agencies. Includes companies engaged in strategic and management consulting
    services, interior design, and information and analytics.
    """

    RentalAndLeasingServices: int = 31020030
    """
    Companies that rent or lease durable goods to the commercial and consumer market,
    including cars and trucks, medical and industrial equipment, appliances and tools, and
    miscellaneous goods.
    """

    SecurityAndProtectionServices: int = 31020040
    """
    Companies that provide security and protective services, including protective or
    preventive devices, security guards and inspection services, security alarm and
    monitoring systems, detention and correction facilities, and other security-based services.
    """

    StaffingAndEmploymentServices: int = 31020050
    """
    Companies that provide staffing and employment services, including temporary staffing
    and permanent placement, outsources workforce and other employment-related services to
    businesses and government. Also includes companies providing online staffing services.
    """

    Conglomerates: int = 31030010
    """
    Companies that are in several separate lines of business with no single line providing
    the dominant source of revenue or income.
    """

    EngineeringAndConstruction: int = 31040010
    """
    Companies engaged in the design, construction, or contracting of industrial and
    nonresidential structures, streets and highways, bridges and tunnels, docks and piers,
    dams and water projects, utility lines, and other large building projects. Also includes
    companies that provide engineering consulting and architectural services to consumer and
    commercial clients.
    """

    InfrastructureOperations: int = 31040020
    """
    Companies that develop, finance, maintain, or manage infrastructure operations such as
    ports, airports, and roadways.
    """

    BuildingProductsAndEquipment: int = 31040030
    """
    Companies that manufacture building and construction products and materials, including
    ceramic floor and wall tiles, plumbing, HVAC, framing structures, and doors. Excludes
    companies that are classified in the building materials industry.
    """

    FarmAndHeavyConstructionMachinery: int = 31050010
    """
    Companies that manufacture agricultural and construction machinery, including tractors,
    planting and harvesting machines, cranes, earthmovers, excavators, and related equipment
    and machinery. Includes truck manufacturers that provide local and long-haul trucking
    and transfer services for freight and cargo.
    """

    IndustrialDistribution: int = 31060010
    """
    Companies primarily engaged in the distribution and supply of industrial equipment,
    including construction and farming machinery, garden equipment and supplies, and other
    industrial items to a diversified market of redistributors and end users.
    """

    BusinessEquipmentAndSupplies: int = 31070010
    """
    Companies that manufacture and market office and business machines, such as copiers, fax
    machines, postage meters, point-of-sale terminals, and ATMs.
    """

    SpecialtyIndustrialMachinery: int = 31070020
    """
    Companies engaged in diversified machinery manufacturing operations, including paper and
    food production machines, printing machinery, engines and turbines, air and gas
    processors, blowers and fans, furnaces and ovens, and other general and special industry machines.
    """

    MetalFabrication: int = 31070030
    """
    Companies that fabricate, stamp, or form iron, steel, or other metals into products such
    as structured components by cutting, bending, and assembling processes of basic metals
    to create a final product.
    """

    PollutionAndTreatmentControls: int = 31070040
    """
    Companies that manufacture equipment designed to control pollution, including control
    systems, hazardous waste disposal systems, recovery systems, treatment processes,
    filtration systems, cleaning and separation applications, and recycling machinery.
    """

    ToolsAndAccessories: int = 31070050
    """
    Companies that manufacture small, hand-held tools, including power-driven drills,
    welding apparatus, lawn and garden equipment, and other power or manually operated tools
    and accessories, such as hardware, nuts, bolts, rivets, and other fasteners.
    """

    ElectricalEquipmentAndParts: int = 31070060
    """
    Companies that manufacture electrical equipment (such as smart-grid electrical
    equipment, utility metering, high- and low-voltage electrical equipment, transmission
    control devices, switches, and lighting distribution boxes), batteries, electrical wires
    and cables, and automation control.
    """

    AirportsAndAirServices: int = 31080010
    """
    Air transportation companies that provide related air services, including helicopter
    transportation, air-charter services, in-flight catering services, and air emergency and
    business-related services.
    """

    Airlines: int = 31080020
    """
    Major international passenger airline companies that fly a wide range of domestic and
    international routes.
    """

    Railroads: int = 31080030
    """
    Companies that provide transportation of freight by line-haul railroad as well as
    related railroad equipment and repair services. Includes companies offering passenger
    services via railway and roadways.
    """

    MarineShipping: int = 31080040
    """
    Companies that transport freight and cargo via water and operate marine ports. Includes
    companies that provide passenger services via water.
    """

    Trucking: int = 31080050
    """
    Companies that provide local and long-haul trucking and transfer services for freight
    and cargo.
    """

    IntegratedFreightAndLogistics: int = 31080060
    """
    Companies that transport freight and cargo via diversified methods such as railroads,
    airlines, and waterways.
    """

    WasteManagement: int = 31090010
    """
    Companies that collect, treat, store, transfer, recycle, and dispose of waste materials,
    as well as companies that provide supporting environmental, engineering, and consulting services.
    """

    InformationTechnologyServices: int = 31110010
    """
    Companies that provide computer-system design, network and systems operations, repair
    services, technical support, computer technology consulting, development, and
    implementation services.
    """

    SoftwareApplication: int = 31110020
    """
    Companies that primarily design, develop, market, and support application software
    programs, including those that are cloud-based, for specific consumer and business functions.
    """

    SoftwareInfrastructure: int = 31110030
    """
    Companies that develop, design, support, and provide system software and services,
    including operating systems, networking software and devices, web portal services, cloud
    storage, and related services.
    """

    CommunicationEquipment: int = 31120010
    """
    Companies that design, develop, manufacture, and market equipment for the communication
    industry, including fiber-optic cable; telecom peripherals; voice and data transmission
    and processing equipment; satellite products and equipment; video-conferencing systems
    and equipment; and interactive communication systems. Also includes companies that offer
    networking products that provide connectivity solutions for multi-use computing environments.
    """

    ComputerHardware: int = 31120020
    """
    Companies that design, manufacture, and market computer systems, high mainframe servers,
    supercomputer, and 3D printers and scanners. Also includes companies that manufacture
    and market data storage products and other storage and backup devices for computers.
    """

    ConsumerElectronics: int = 31120030
    """
    Companies that manufacture and market mobile communication products and household audio
    and video equipment, including radios, stereos, televisions, DVD player and personal use
    Drones. Excludes electric household appliances.
    """

    ElectronicComponents: int = 31120040
    """
    Companies that design, develop, manufacture, and market electronic devices, including
    electron tubes; electronic capacitors; electronic resistors; electronic coil and
    transformers; sensors; LED, TFT, and LCD displays; electronic connectors; printed
    circuit boards; circuit assemblies; and other general-purpose electronics components and products.
    """

    ElectronicsAndComputerDistribution: int = 31120050
    """
    Companies primarily engaged in the distribution, supply, and support of computers and
    computer systems, peripheral equipment, and software and other technological goods,
    including electronic equipment and appliances, electrical cable, wires, and other
    components to various consumer, commercial, and manufacturing customers.
    """

    ScientificAndTechnicalInstruments: int = 31120060
    """
    Companies that design, develop, manufacture, and market sophisticated electronics of a
    technical nature, including lab apparatus, process and flow control devices, precise
    measurement and signal processing tools, search and navigation equipment, and other
    scientific or technical analytical or measuring devices.
    """

    SemiconductorEquipmentAndMaterials: int = 31130010
    """
    Companies that design, develop, manufacture, and market equipment, spare parts, tools,
    cleaning devices, and related materials for the semiconductor industry.
    """

    Semiconductors: int = 31130020
    """
    Semiconductor companies that design, manufacture, and market integrated circuits,
    microprocessors, logic devices, chipsets, and memory chips for a wide variety of users.
    Includes companies that design, manufacture, and market general-application integrated
    circuits and memory and memory-intensive products.
    """

    Solar: int = 31130030
    """Companies that design, manufacture, market, or install solar power systems and components."""


class CompanyReference(System.Object):
    """Definition of the CompanyReference class"""

    @property
    def CompanyId(self) -> str:
        """10-digit unique and unchanging Morningstar identifier assigned to every company."""
        ...

    @CompanyId.setter
    def CompanyId(self, value: str):
        """10-digit unique and unchanging Morningstar identifier assigned to every company."""
        ...

    @property
    def ShortName(self) -> str:
        """
        25-character max abbreviated name of the firm.  In most cases, the short name will simply be the Legal Name less the
        "Corporation", "Corp.", "Inc.", "Incorporated", etc...
        """
        ...

    @ShortName.setter
    def ShortName(self, value: str):
        """
        25-character max abbreviated name of the firm.  In most cases, the short name will simply be the Legal Name less the
        "Corporation", "Corp.", "Inc.", "Incorporated", etc...
        """
        ...

    @property
    def StandardName(self) -> str:
        """The English translation of the foreign legal name if/when applicable."""
        ...

    @StandardName.setter
    def StandardName(self, value: str):
        """The English translation of the foreign legal name if/when applicable."""
        ...

    @property
    def LegalName(self) -> str:
        """The full name of the registrant as specified in its charter, and most often found on the front cover of the 10K/10Q/20F filing."""
        ...

    @LegalName.setter
    def LegalName(self, value: str):
        """The full name of the registrant as specified in its charter, and most often found on the front cover of the 10K/10Q/20F filing."""
        ...

    @property
    def CountryId(self) -> str:
        """3 Character ISO code of the country where the firm is domiciled. See separate reference document for Country Mappings."""
        ...

    @CountryId.setter
    def CountryId(self, value: str):
        """3 Character ISO code of the country where the firm is domiciled. See separate reference document for Country Mappings."""
        ...

    @property
    def CIK(self) -> str:
        """The Central Index Key; a corporate identifier assigned by the Securities and Exchange Commission (SEC)."""
        ...

    @CIK.setter
    def CIK(self, value: str):
        """The Central Index Key; a corporate identifier assigned by the Securities and Exchange Commission (SEC)."""
        ...

    @property
    def CompanyStatus(self) -> str:
        """
        At the Company level; each company is assigned to 1 of 3 possible status classifications; (U) Public, (V) Private, or (O) Obsolete:
        - Public-Firm is operating and currently has at least one common share class that is currently trading on a public exchange.
        - Private-Firm is operating but does not have any common share classes currently trading on a public exchange.
        - Obsolete-Firm is no longer operating because it closed its business, or was acquired.
        """
        ...

    @CompanyStatus.setter
    def CompanyStatus(self, value: str):
        """
        At the Company level; each company is assigned to 1 of 3 possible status classifications; (U) Public, (V) Private, or (O) Obsolete:
        - Public-Firm is operating and currently has at least one common share class that is currently trading on a public exchange.
        - Private-Firm is operating but does not have any common share classes currently trading on a public exchange.
        - Obsolete-Firm is no longer operating because it closed its business, or was acquired.
        """
        ...

    @property
    def FiscalYearEnd(self) -> int:
        """The Month of the company's latest fiscal year."""
        ...

    @FiscalYearEnd.setter
    def FiscalYearEnd(self, value: int):
        """The Month of the company's latest fiscal year."""
        ...

    @property
    def IndustryTemplateCode(self) -> str:
        """
        This indicator will denote which one of the six industry data collection templates applies to the company.  Each industry data
        collection template includes data elements that are commonly reported by companies in that industry.  N=Normal
        (Manufacturing), M=Mining,  U=Utility, T=Transportation, B=Bank, I=Insurance
        """
        ...

    @IndustryTemplateCode.setter
    def IndustryTemplateCode(self, value: str):
        """
        This indicator will denote which one of the six industry data collection templates applies to the company.  Each industry data
        collection template includes data elements that are commonly reported by companies in that industry.  N=Normal
        (Manufacturing), M=Mining,  U=Utility, T=Transportation, B=Bank, I=Insurance
        """
        ...

    @property
    def PrimaryShareClassID(self) -> str:
        """
        The 10-digit unique and unchanging Morningstar identifier assigned to the Primary Share class of a company. The primary share of a
        company is defined as the first share that was traded publicly and is still actively trading. If this share is no longer trading, the
        primary share will be the share with the highest volume.
        """
        ...

    @PrimaryShareClassID.setter
    def PrimaryShareClassID(self, value: str):
        """
        The 10-digit unique and unchanging Morningstar identifier assigned to the Primary Share class of a company. The primary share of a
        company is defined as the first share that was traded publicly and is still actively trading. If this share is no longer trading, the
        primary share will be the share with the highest volume.
        """
        ...

    @property
    def PrimarySymbol(self) -> str:
        """
        The symbol of the Primary Share of the company, composed of an arrangement of characters (often letters) representing a
        particular security listed on an exchange or otherwise traded publicly.   The primary share of a company is defined as the first share
        that was traded publicly and is still actively trading. If this share is no longer trading, the primary share will be the share with the
        highest volume. Note: Morningstar's multi-share class symbols will often contain a "period" within the symbol; e.g. BRK.B for
        Berkshire Hathaway Class B.
        """
        ...

    @PrimarySymbol.setter
    def PrimarySymbol(self, value: str):
        """
        The symbol of the Primary Share of the company, composed of an arrangement of characters (often letters) representing a
        particular security listed on an exchange or otherwise traded publicly.   The primary share of a company is defined as the first share
        that was traded publicly and is still actively trading. If this share is no longer trading, the primary share will be the share with the
        highest volume. Note: Morningstar's multi-share class symbols will often contain a "period" within the symbol; e.g. BRK.B for
        Berkshire Hathaway Class B.
        """
        ...

    @property
    def PrimaryExchangeID(self) -> str:
        """
        The Id representing the stock exchange of the Primary Share of the company.  See separate reference document for Exchange
        Mappings. The primary share of a company is defined as the first share that was traded publicly with and is still actively trading. If
        this share is no longer trading, the primary share will be the share with the highest volume.
        """
        ...

    @PrimaryExchangeID.setter
    def PrimaryExchangeID(self, value: str):
        """
        The Id representing the stock exchange of the Primary Share of the company.  See separate reference document for Exchange
        Mappings. The primary share of a company is defined as the first share that was traded publicly with and is still actively trading. If
        this share is no longer trading, the primary share will be the share with the highest volume.
        """
        ...

    @property
    def BusinessCountryID(self) -> str:
        """
        In some cases, different from the country of domicile (CountryId; DataID 5).  This element is a three (3) Character ISO code of the
        business country of the security.  It is determined by a few factors, including:
        """
        ...

    @BusinessCountryID.setter
    def BusinessCountryID(self, value: str):
        """
        In some cases, different from the country of domicile (CountryId; DataID 5).  This element is a three (3) Character ISO code of the
        business country of the security.  It is determined by a few factors, including:
        """
        ...

    @property
    def LegalNameLanguageCode(self) -> str:
        """The language code for the foreign legal name if/when applicable.  Related to  DataID 4 (LegalName)."""
        ...

    @LegalNameLanguageCode.setter
    def LegalNameLanguageCode(self, value: str):
        """The language code for the foreign legal name if/when applicable.  Related to  DataID 4 (LegalName)."""
        ...

    @property
    def Auditor(self) -> str:
        """
        The legal (registered) name of the company's current auditor. Distinct from DataID 28000 Period Auditor that identifies the Auditor
        related to that period's financial statements.
        """
        ...

    @Auditor.setter
    def Auditor(self, value: str):
        """
        The legal (registered) name of the company's current auditor. Distinct from DataID 28000 Period Auditor that identifies the Auditor
        related to that period's financial statements.
        """
        ...

    @property
    def AuditorLanguageCode(self) -> str:
        """The ISO code denoting the language text for Auditor's name and contact information."""
        ...

    @AuditorLanguageCode.setter
    def AuditorLanguageCode(self, value: str):
        """The ISO code denoting the language text for Auditor's name and contact information."""
        ...

    @property
    def Advisor(self) -> str:
        """The legal (registered) name of the current legal Advisor of the company."""
        ...

    @Advisor.setter
    def Advisor(self, value: str):
        """The legal (registered) name of the current legal Advisor of the company."""
        ...

    @property
    def AdvisorLanguageCode(self) -> str:
        """The ISO code denoting the language text for Advisor's name and contact information."""
        ...

    @AdvisorLanguageCode.setter
    def AdvisorLanguageCode(self, value: str):
        """The ISO code denoting the language text for Advisor's name and contact information."""
        ...

    @property
    def IsLimitedPartnership(self) -> bool:
        """
        Indicator to denote if the company is a limited partnership, which is a form of business structure comprised of a general partner and
        limited partners. 1 denotes it is a LP; otherwise 0.
        """
        ...

    @IsLimitedPartnership.setter
    def IsLimitedPartnership(self, value: bool):
        """
        Indicator to denote if the company is a limited partnership, which is a form of business structure comprised of a general partner and
        limited partners. 1 denotes it is a LP; otherwise 0.
        """
        ...

    @property
    def IsREIT(self) -> bool:
        """Indicator to denote if the company is a real estate investment trust (REIT). 1 denotes it is a REIT; otherwise 0."""
        ...

    @IsREIT.setter
    def IsREIT(self, value: bool):
        """Indicator to denote if the company is a real estate investment trust (REIT). 1 denotes it is a REIT; otherwise 0."""
        ...

    @property
    def PrimaryMIC(self) -> str:
        """
        The MIC (market identifier code) of the PrimarySymbol of the company. See Data Appendix A for the relevant MIC to exchange
        name mapping.
        """
        ...

    @PrimaryMIC.setter
    def PrimaryMIC(self, value: str):
        """
        The MIC (market identifier code) of the PrimarySymbol of the company. See Data Appendix A for the relevant MIC to exchange
        name mapping.
        """
        ...

    @property
    def ReportStyle(self) -> int:
        """
        This refers to the financial template used to collect the company's financial statements. There are two report styles representing
        two different financial template structures. Report style "1" is most commonly used by US and Canadian companies, and Report
        style "3" is most commonly used by the rest of the universe. Contact your client manager for access to the respective templates.
        """
        ...

    @ReportStyle.setter
    def ReportStyle(self, value: int):
        """
        This refers to the financial template used to collect the company's financial statements. There are two report styles representing
        two different financial template structures. Report style "1" is most commonly used by US and Canadian companies, and Report
        style "3" is most commonly used by the rest of the universe. Contact your client manager for access to the respective templates.
        """
        ...

    @property
    def YearofEstablishment(self) -> str:
        """The year a company was founded."""
        ...

    @YearofEstablishment.setter
    def YearofEstablishment(self, value: str):
        """The year a company was founded."""
        ...

    @property
    def IsLimitedLiabilityCompany(self) -> bool:
        """Indicator to denote if the company is a limited liability company. 1 denotes it is a LLC; otherwise 0."""
        ...

    @IsLimitedLiabilityCompany.setter
    def IsLimitedLiabilityCompany(self, value: bool):
        """Indicator to denote if the company is a limited liability company. 1 denotes it is a LLC; otherwise 0."""
        ...

    @property
    def ExpectedFiscalYearEnd(self) -> datetime.datetime:
        """
        The upcoming expected year end for the company. It is calculated based on current year end (from latest available annual report)
        + 1 year.
        """
        ...

    @ExpectedFiscalYearEnd.setter
    def ExpectedFiscalYearEnd(self, value: datetime.datetime):
        """
        The upcoming expected year end for the company. It is calculated based on current year end (from latest available annual report)
        + 1 year.
        """
        ...

    def __init__(self) -> None:
        """Creates an instance of the CompanyReference class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.CompanyReference) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class SecurityReference(System.Object):
    """Definition of the SecurityReference class"""

    @property
    def SecuritySymbol(self) -> str:
        """
        An arrangement of characters (often letters) representing a particular security listed on an exchange or otherwise traded publicly.
        Note: Morningstar's multi-share class symbols will often contain a "period" within the symbol; e.g. BRK.B for Berkshire Hathaway
        Class B.
        """
        ...

    @SecuritySymbol.setter
    def SecuritySymbol(self, value: str):
        """
        An arrangement of characters (often letters) representing a particular security listed on an exchange or otherwise traded publicly.
        Note: Morningstar's multi-share class symbols will often contain a "period" within the symbol; e.g. BRK.B for Berkshire Hathaway
        Class B.
        """
        ...

    @property
    def ExchangeId(self) -> str:
        """
        The Id representing the stock exchange that the particular share class is trading.  See separate reference document for Exchange
        Mappings.
        """
        ...

    @ExchangeId.setter
    def ExchangeId(self, value: str):
        """
        The Id representing the stock exchange that the particular share class is trading.  See separate reference document for Exchange
        Mappings.
        """
        ...

    @property
    def CurrencyId(self) -> str:
        """
        3 Character ISO code of the currency that the exchange price is denominated in; i.e. the trading currency of the security.  See
        separate reference document for Currency Mappings.
        """
        ...

    @CurrencyId.setter
    def CurrencyId(self, value: str):
        """
        3 Character ISO code of the currency that the exchange price is denominated in; i.e. the trading currency of the security.  See
        separate reference document for Currency Mappings.
        """
        ...

    @property
    def Valoren(self) -> str:
        """"""
        ...

    @Valoren.setter
    def Valoren(self, value: str):
        """"""
        ...

    @property
    def IPODate(self) -> datetime.datetime:
        """The initial day that the share begins trading on a public exchange."""
        ...

    @IPODate.setter
    def IPODate(self, value: datetime.datetime):
        """The initial day that the share begins trading on a public exchange."""
        ...

    @property
    def IsDepositaryReceipt(self) -> bool:
        """Indicator to denote if the share class is a depository receipt. 1 denotes it is an ADR or GDR; otherwise 0."""
        ...

    @IsDepositaryReceipt.setter
    def IsDepositaryReceipt(self, value: bool):
        """Indicator to denote if the share class is a depository receipt. 1 denotes it is an ADR or GDR; otherwise 0."""
        ...

    @property
    def DepositaryReceiptRatio(self) -> float:
        """The number of underlying common shares backing each American Depository Receipt traded."""
        ...

    @DepositaryReceiptRatio.setter
    def DepositaryReceiptRatio(self, value: float):
        """The number of underlying common shares backing each American Depository Receipt traded."""
        ...

    @property
    def SecurityType(self) -> str:
        """
        Each security will be assigned to one of the below security type classifications;
        - Common Stock (ST00000001)
        - Preferred Stock (ST00000002)
        - Units (ST000000A1)
        """
        ...

    @SecurityType.setter
    def SecurityType(self, value: str):
        """
        Each security will be assigned to one of the below security type classifications;
        - Common Stock (ST00000001)
        - Preferred Stock (ST00000002)
        - Units (ST000000A1)
        """
        ...

    @property
    def ShareClassDescription(self) -> str:
        """
        Provides information when applicable such as whether the share class is Class A or Class B, an ADR, GDR, or a business
        development company (BDC).  For preferred stocks, this field provides more detail about the preferred share class.
        """
        ...

    @ShareClassDescription.setter
    def ShareClassDescription(self, value: str):
        """
        Provides information when applicable such as whether the share class is Class A or Class B, an ADR, GDR, or a business
        development company (BDC).  For preferred stocks, this field provides more detail about the preferred share class.
        """
        ...

    @property
    def ShareClassStatus(self) -> str:
        """
        At the ShareClass level; each share is assigned to 1 of 4 possible status classifications; (A) Active, (D) Deactive, (I) Inactive, or (O)
        Obsolete:
        - Active-Share class is currently trading in a public market, and we have fundamental data available.
        - Deactive-Share class was once Active, but is no longer trading due to share being delisted from the exchange.
        - Inactive-Share class is currently trading in a public market, but no fundamental data is available.
        - Obsolete-Share class was once Inactive, but is no longer trading due to share being delisted from the exchange.
        """
        ...

    @ShareClassStatus.setter
    def ShareClassStatus(self, value: str):
        """
        At the ShareClass level; each share is assigned to 1 of 4 possible status classifications; (A) Active, (D) Deactive, (I) Inactive, or (O)
        Obsolete:
        - Active-Share class is currently trading in a public market, and we have fundamental data available.
        - Deactive-Share class was once Active, but is no longer trading due to share being delisted from the exchange.
        - Inactive-Share class is currently trading in a public market, but no fundamental data is available.
        - Obsolete-Share class was once Inactive, but is no longer trading due to share being delisted from the exchange.
        """
        ...

    @property
    def IsPrimaryShare(self) -> bool:
        """
        This indicator will denote if the indicated share is the primary share for the company. A "1" denotes the primary share, a "0"
        denotes a share that is not the primary share. The primary share is defined as the first share that a company IPO'd with and is still
        actively trading. If this share is no longer trading, we will denote the primary share as the share with the highest volume.
        """
        ...

    @IsPrimaryShare.setter
    def IsPrimaryShare(self, value: bool):
        """
        This indicator will denote if the indicated share is the primary share for the company. A "1" denotes the primary share, a "0"
        denotes a share that is not the primary share. The primary share is defined as the first share that a company IPO'd with and is still
        actively trading. If this share is no longer trading, we will denote the primary share as the share with the highest volume.
        """
        ...

    @property
    def IsDividendReinvest(self) -> bool:
        """Shareholder election plan to re-invest cash dividend into additional shares."""
        ...

    @IsDividendReinvest.setter
    def IsDividendReinvest(self, value: bool):
        """Shareholder election plan to re-invest cash dividend into additional shares."""
        ...

    @property
    def IsDirectInvest(self) -> bool:
        """A plan to make it possible for individual investors to invest in public companies without going through a stock broker."""
        ...

    @IsDirectInvest.setter
    def IsDirectInvest(self, value: bool):
        """A plan to make it possible for individual investors to invest in public companies without going through a stock broker."""
        ...

    @property
    def InvestmentId(self) -> str:
        """Identifier assigned to each security Morningstar covers."""
        ...

    @InvestmentId.setter
    def InvestmentId(self, value: str):
        """Identifier assigned to each security Morningstar covers."""
        ...

    @property
    def IPOOfferPrice(self) -> float:
        """
        IPO offer price indicates the price at which an issuer sells its shares under an initial public offering (IPO). The offer price is set by
        issuer and its underwriters.
        """
        ...

    @IPOOfferPrice.setter
    def IPOOfferPrice(self, value: float):
        """
        IPO offer price indicates the price at which an issuer sells its shares under an initial public offering (IPO). The offer price is set by
        issuer and its underwriters.
        """
        ...

    @property
    def DelistingDate(self) -> datetime.datetime:
        """The date on which an inactive security was delisted from an exchange."""
        ...

    @DelistingDate.setter
    def DelistingDate(self, value: datetime.datetime):
        """The date on which an inactive security was delisted from an exchange."""
        ...

    @property
    def DelistingReason(self) -> str:
        """
        The reason for an inactive security's delisting from an exchange. The full list of Delisting Reason codes can be found within the Data
        Definitions- Appendix A DelistingReason Codes tab.
        """
        ...

    @DelistingReason.setter
    def DelistingReason(self, value: str):
        """
        The reason for an inactive security's delisting from an exchange. The full list of Delisting Reason codes can be found within the Data
        Definitions- Appendix A DelistingReason Codes tab.
        """
        ...

    @property
    def MIC(self) -> str:
        """
        The MIC (market identifier code) of the related shareclass of the company. See Data Appendix A for the relevant MIC to exchange
        name mapping.
        """
        ...

    @MIC.setter
    def MIC(self, value: str):
        """
        The MIC (market identifier code) of the related shareclass of the company. See Data Appendix A for the relevant MIC to exchange
        name mapping.
        """
        ...

    @property
    def CommonShareSubType(self) -> str:
        """
        Refers to the type of securities that can be found within the equity database. For the vast majority, this value will populate as null
        for regular common shares. For a minority of shareclasses, this will populate as either "Participating Preferred", "Closed-End Fund",
        "Foreign Share", or "Foreign Participated Preferred" which reflects our limited coverage of these types of securities within our
        equity database.
        """
        ...

    @CommonShareSubType.setter
    def CommonShareSubType(self, value: str):
        """
        Refers to the type of securities that can be found within the equity database. For the vast majority, this value will populate as null
        for regular common shares. For a minority of shareclasses, this will populate as either "Participating Preferred", "Closed-End Fund",
        "Foreign Share", or "Foreign Participated Preferred" which reflects our limited coverage of these types of securities within our
        equity database.
        """
        ...

    @property
    def IPOOfferPriceRange(self) -> str:
        """
        The estimated offer price range (low-high) for a new IPO. The field should be used until the final IPO price becomes available, as
        populated in the data field "IPOPrice".
        """
        ...

    @IPOOfferPriceRange.setter
    def IPOOfferPriceRange(self, value: str):
        """
        The estimated offer price range (low-high) for a new IPO. The field should be used until the final IPO price becomes available, as
        populated in the data field "IPOPrice".
        """
        ...

    @property
    def ExchangeSubMarketGlobalId(self) -> str:
        """Classification to denote different Marketplace or Market tiers within a stock exchange."""
        ...

    @ExchangeSubMarketGlobalId.setter
    def ExchangeSubMarketGlobalId(self, value: str):
        """Classification to denote different Marketplace or Market tiers within a stock exchange."""
        ...

    @property
    def ConversionRatio(self) -> float:
        """The relationship between the chosen share class and the primary share class."""
        ...

    @ConversionRatio.setter
    def ConversionRatio(self, value: float):
        """The relationship between the chosen share class and the primary share class."""
        ...

    @property
    def ParValue(self) -> float:
        """Nominal value of a security determined by the issuing company."""
        ...

    @ParValue.setter
    def ParValue(self, value: float):
        """Nominal value of a security determined by the issuing company."""
        ...

    @property
    def TradingStatus(self) -> bool:
        """"""
        ...

    @TradingStatus.setter
    def TradingStatus(self, value: bool):
        """"""
        ...

    @property
    def MarketDataID(self) -> str:
        """"""
        ...

    @MarketDataID.setter
    def MarketDataID(self, value: str):
        """"""
        ...

    def __init__(self) -> None:
        """Creates an instance of the SecurityReference class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.SecurityReference) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class MultiPeriodField(System.Object, metaclass=abc.ABCMeta):
    """Abstract base class for multi-period fields"""

    class PeriodField:
        """
        Helper, and internal struct use to hold the values for a period.
        
        This class is protected.
        """

        @property
        def Period(self) -> int:
            """The period associated with this value PeriodAsByte"""
            ...

        @Period.setter
        def Period(self, value: int):
            """The period associated with this value PeriodAsByte"""
            ...

        @property
        def Value(self) -> float:
            """The value for this period"""
            ...

        @Value.setter
        def Value(self, value: float):
            """The value for this period"""
            ...

        def __init__(self, period: int, value: float) -> None:
            """Creates a new period field instance"""
            ...

    @property
    def Store(self) -> typing.List[QuantConnect.Data.Fundamental.MultiPeriodField.PeriodField]:
        """
        The dictionary store containing all values for the multi-period field
        
        This field is protected.
        """
        ...

    @Store.setter
    def Store(self, value: typing.List[QuantConnect.Data.Fundamental.MultiPeriodField.PeriodField]):
        """
        The dictionary store containing all values for the multi-period field
        
        This field is protected.
        """
        ...

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def HasValue(self) -> bool:
        """Returns true if the field contains a value for the default period"""
        ...

    @property
    def Value(self) -> float:
        """Returns the default value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """
        Creates a new instance
        
        This method is protected.
        """
        ...

    def GetPeriodNames(self) -> System.Collections.Generic.IEnumerable[str]:
        """
        Gets the list of available period names for the field
        
        :returns: The list of periods.
        """
        ...

    @overload
    def GetPeriodValue(self, period: str) -> float:
        """
        Gets the value of the field for the requested period
        
        :param period: The requested period
        :returns: The value for the period.
        """
        ...

    @overload
    def GetPeriodValue(self, period: int) -> float:
        """
        Internal implementation which gets the value of the field for the requested period
        
        This method is protected.
        """
        ...

    def GetPeriodValues(self) -> System.Collections.Generic.IReadOnlyDictionary[str, float]:
        """
        Gets a dictionary of period names and values for the field
        
        :returns: The dictionary of period names and values.
        """
        ...

    def HasPeriodValue(self, period: str) -> bool:
        """
        Returns true if the field contains a value for the requested period
        
        :param period: The requested period
        """
        ...

    def HasValues(self) -> bool:
        """Returns true if the field has at least one value for one period"""
        ...

    @overload
    def SetPeriodValue(self, period: str, value: float) -> None:
        """
        Sets the value of the field for the specified period
        
        :param period: The period
        :param value: The value to be set
        """
        ...

    @overload
    def SetPeriodValue(self, period: int, value: float) -> None:
        """
        Internal implementation which sets the value of the field for the specified period
        
        This method is protected.
        """
        ...

    def ToString(self) -> str:
        """
        Returns a string that represents the current object.
        
        :returns: A string that represents the current object.
        """
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.MultiPeriodField) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class TotalRiskBasedCapital(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The sum of Tier 1 and Tier 2 Capital. Tier 1 capital consists of common shareholders equity, perpetual preferred shareholders equity
    with non-cumulative dividends, retained earnings, and minority interests in the equity accounts of consolidated subsidiaries. Tier 2
    capital consists of subordinated debt, intermediate-term preferred stock, cumulative and long-term preferred stock, and a portion of
    a bank's allowance for loan and lease losses.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalRiskBasedCapital class"""
        ...


class AmortizationIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The non-cash expense recognized on intangible assets over the benefit period of the asset."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AmortizationIncomeStatement class"""
        ...


class SecuritiesAmortizationIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The gradual elimination of a liability, such as a mortgage, in regular payments over a specified period of time. Such payments must
    be sufficient to cover both principal and interest.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SecuritiesAmortizationIncomeStatement class"""
        ...


class CostOfRevenueIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate cost of goods produced and sold and services rendered during the reporting PeriodAsByte. It excludes all operating
    expenses such as depreciation, depletion, amortization, and SG&A. For the must have cost industry, if the number is not reported
    by the company, it will be calculated based on accounting equation.
    Cost of Revenue = Revenue - Operating Expenses - Operating Profit.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CostOfRevenueIncomeStatement class"""
        ...


class DepletionIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the asset."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepletionIncomeStatement class"""
        ...


class DepreciationIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The current period non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of
    assets over their useful lives, in the Income Statement. Examples of tangible asset include buildings, production and equipment.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepreciationIncomeStatement class"""
        ...


class DepreciationAndAmortizationIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The sum of depreciation and amortization expense in the Income Statement.
    Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of
    assets over their useful lives
    Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepreciationAndAmortizationIncomeStatement class"""
        ...


class DepreciationAmortizationDepletionIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The sum of depreciation, amortization and depletion expense in the Income Statement.
    Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of
    assets over their useful lives
    Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.
    Depletion is the non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the
    asset.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepreciationAmortizationDepletionIncomeStatement class"""
        ...


class NetIncomeDiscontinuousOperationsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    To be classified as discontinued operations, if both of the following conditions are met:
    1: The operations and cash flow of the component have been or will be removed from the ongoing operations of the entity as a
    result of the disposal transaction, and
    2: The entity will have no significant continuing involvement in the operations of the component after the disposal transaction.
    The discontinued operation is reported net of tax.
    Gains/Loss on Disposal of Discontinued Operations: Any gains or loss recognized on disposal of discontinued operations,
    which is the difference between the carrying value of the division and its fair value less costs to sell.
    Provision for Gain/Loss on Disposal: The amount of current expense charged in order to prepare for the disposal of
    discontinued operations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeDiscontinuousOperationsIncomeStatement class"""
        ...


class ExciseTaxesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Excise taxes are taxes paid when purchases are made on a specific good, such as gasoline. Excise taxes are often included in the
    price of the product. There are also excise taxes on activities, such as on wagering or on highway usage by trucks.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ExciseTaxesIncomeStatement class"""
        ...


class NetIncomeExtraordinaryIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Gains (losses), whether arising from extinguishment of debt, prior period adjustments, or from other events or transactions, that are
    both unusual in nature and infrequent in occurrence thereby meeting the criteria for an event or transaction to be classified as an
    extraordinary item.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeExtraordinaryIncomeStatement class"""
        ...


class FeeRevenueAndOtherIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate amount of fees, commissions, and other income."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FeeRevenueAndOtherIncomeIncomeStatement class"""
        ...


class GeneralAndAdministrativeExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate total of general managing and administering expenses for the company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GeneralAndAdministrativeExpenseIncomeStatement class"""
        ...


class GrossProfitIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total revenue less cost of revenue. The number is as reported by the company on the income statement; however, the number will
    be calculated if it is not reported. This field is null if the cost of revenue is not given.
    Gross Profit = Total Revenue - Cost of Revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossProfitIncomeStatement class"""
        ...


class InterestExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Relates to the general cost of borrowing money. It is the price that a lender charges a borrower for the use of the lender's money."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestExpenseIncomeStatement class"""
        ...


class InterestExpenseNonOperatingIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Interest expense caused by long term financing activities; such as interest expense incurred on trading liabilities, commercial paper,
    long-term debt, capital leases, deposits, and all other borrowings.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestExpenseNonOperatingIncomeStatement class"""
        ...


class InterestIncomeAfterProvisionForLoanLossIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Net interest and dividend income or expense, including any amortization and accretion (as applicable) of discounts and premiums,
    including consideration of the provisions for loan, lease, credit, and other related losses, if any.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestIncomeAfterProvisionForLoanLossIncomeStatement class"""
        ...


class InterestIncomeNonOperatingIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Interest income earned from long term financing activities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestIncomeNonOperatingIncomeStatement class"""
        ...


class NetNonOperatingInterestIncomeExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net-Non Operating interest income or expenses caused by financing activities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetNonOperatingInterestIncomeExpenseIncomeStatement class"""
        ...


class LossAdjustmentExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Losses generally refer to (1) the amount of reduction in the value of an insured's property caused by an insured peril, (2) the amount
    sought through an insured's claim, or (3) the amount paid on behalf of an insured under an insurance contract.  Loss Adjustment
    Expenses is expenses incurred in the course of investigating and settling claims that includes any legal and adjusters' fees and the
    costs of paying claims and all related expenses.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LossAdjustmentExpenseIncomeStatement class"""
        ...


class MinorityInterestsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Represents par or stated value of the subsidiary stock not owned by the parent company plus the minority interest's equity in the
    surplus of the subsidiary. This item includes preferred dividend averages on the minority preferred stock (preferred shares not
    owned by the reporting parent company). Minority interest also refers to stockholders who own less than 50% of a subsidiary's
    outstanding voting common stock. The minority stockholders hold an interest in the subsidiary's net assets and share earnings with
    the parent company.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MinorityInterestsIncomeStatement class"""
        ...


class NetIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Includes all the operations (continuing and discontinued) and all the other income or charges (extraordinary, accounting changes,
    tax loss carry forward, and other gains and losses).
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeIncomeStatement class"""
        ...


class NetIncomeCommonStockholdersIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net income minus the preferred dividends paid as presented in the Income Statement."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeCommonStockholdersIncomeStatement class"""
        ...


class NetIncomeContinuousOperationsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from: Preferred Dividends;
    Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing Operation; Income from Tax
    Loss Carry forward; Other Gains/Losses.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeContinuousOperationsIncomeStatement class"""
        ...


class NetInterestIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total interest income minus total interest expense. It represents the difference between interest and dividends earned on interest-
    bearing assets and interest paid to depositors and other creditors.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetInterestIncomeIncomeStatement class"""
        ...


class NetInvestmentIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total of interest, dividends, and other earnings derived from the insurance company's invested assets minus the expenses
    associated with these investments. Excluded from this income are capital gains or losses as the result of the sale of assets, as well
    as any unrealized capital gains or losses.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetInvestmentIncomeIncomeStatement class"""
        ...


class TotalRevenueIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    All sales, business revenues and income that the company makes from its business operations, net of excise taxes. This applies for
    all companies and can be used as comparison for all industries.
    For Normal, Mining, Transportation and Utility templates companies, this is the sum of Operating Revenues, Excise Taxes and Fees.
    For Bank template companies, this is the sum of Net Interest Income and Non-Interest Income.
    For Insurance template companies, this is the sum of Premiums, Interest Income, Fees, Investment and Other Income.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalRevenueIncomeStatement class"""
        ...


class NonInterestExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Any expenses that not related to interest. It includes labor and related expense, occupancy and equipment, commission,
    professional expense and contract services expenses, selling, general and administrative, research and development depreciation,
    amortization and depletion, and any other special income/charges.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonInterestExpenseIncomeStatement class"""
        ...


class NonInterestIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The total amount of non-interest income which may be derived from: (1) fees and commissions; (2) premiums earned; (3) equity
    investment; (4) the sale or disposal of assets; and (5) other sources not otherwise specified.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonInterestIncomeIncomeStatement class"""
        ...


class OperatingExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Operating expenses are primary recurring costs associated with central operations (other than cost of goods sold) that are incurred
    in order to generate sales.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperatingExpenseIncomeStatement class"""
        ...


class OperatingIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Income from normal business operations after deducting cost of revenue and operating expenses. It does not include income from
    any investing activities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperatingIncomeIncomeStatement class"""
        ...


class OperatingRevenueIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Sales and income that the company makes from its business operations. This applies only to non-bank and insurance companies.
    For Utility template companies, this is the sum of revenue from electric, gas, transportation and other operating revenue.
    For Transportation template companies, this is the sum of revenue-passenger, revenue-cargo, and other operating revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperatingRevenueIncomeStatement class"""
        ...


class OtherIncomeExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income or expense that comes from miscellaneous sources."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherIncomeExpenseIncomeStatement class"""
        ...


class PolicyAcquisitionExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Costs that vary with and are primarily related to the acquisition of new and renewal insurance contracts. Also referred to as
    underwriting expenses.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PolicyAcquisitionExpenseIncomeStatement class"""
        ...


class NetPolicyholderBenefitsAndClaimsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net provision in current period for future policy benefits, claims, and claims settlement expenses incurred in the claims
    settlement process before the effects of reinsurance arrangements. The value is net of the effects of contracts assumed and
    ceded.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetPolicyholderBenefitsAndClaimsIncomeStatement class"""
        ...


class PreferredStockDividendsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount of dividends declared or paid in the period to preferred shareholders, or the amount for which the obligation to pay
    them dividends arose in the PeriodAsByte. Preferred dividends are the amount required for the current year only, and not for any amount
    required in past years.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreferredStockDividendsIncomeStatement class"""
        ...


class TotalPremiumsEarnedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Premiums earned is the portion of an insurance written premium which is considered "earned" by the insurer, based on the part of
    the policy period that the insurance has been in effect, and during which the insurer has been exposed to loss.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalPremiumsEarnedIncomeStatement class"""
        ...


class PretaxIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Reported income before the deduction or benefit of income taxes."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PretaxIncomeIncomeStatement class"""
        ...


class TaxProvisionIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Include any taxes on income, net of any investment tax credits for the current accounting PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxProvisionIncomeStatement class"""
        ...


class CreditLossesProvisionIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A charge to income which represents an expense deemed adequate by management given the composition of a bank's credit
    portfolios, their probability of default, the economic environment and the allowance for credit losses already established. Specific
    provisions are established to reduce the book value of specific assets (primarily loans) to establish the amount expected to be
    recovered on the loans.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CreditLossesProvisionIncomeStatement class"""
        ...


class ResearchAndDevelopmentIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate amount of research and development expenses during the year."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ResearchAndDevelopmentIncomeStatement class"""
        ...


class SellingAndMarketingExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate total amount of expenses directly related to the marketing or selling of products or services."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SellingAndMarketingExpenseIncomeStatement class"""
        ...


class SellingGeneralAndAdministrationIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate total costs related to selling a firm's product and services, as well as all other general and administrative expenses.
    Selling expenses are those directly related to the company's efforts to generate sales (e.g., sales salaries, commissions,
    advertising, delivery expenses). General and administrative expenses are expenses related to general administration of the
    company's operation (e.g., officers and office salaries, office supplies, telephone, accounting and legal services, and business
    licenses and fees).
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SellingGeneralAndAdministrationIncomeStatement class"""
        ...


class SpecialIncomeChargesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Earnings or losses attributable to occurrences or actions by the firm that is either infrequent or unusual."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SpecialIncomeChargesIncomeStatement class"""
        ...


class TotalExpensesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The sum of operating expense and cost of revenue. If the company does not give the reported number, it will be calculated by
    adding operating expense and cost of revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalExpensesIncomeStatement class"""
        ...


class InterestIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income generated from interest-bearing deposits or accounts."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestIncomeIncomeStatement class"""
        ...


class EBITIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Earnings minus expenses (excluding interest and tax expenses)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EBITIncomeStatement class"""
        ...


class EBITDAIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Earnings minus expenses (excluding interest, tax, depreciation, and amortization expenses)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EBITDAIncomeStatement class"""
        ...


class NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:
    Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing
    Operation; Income from Tax Loss Carry forward; Other Gains/Losses.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement class"""
        ...


class CededPremiumsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount of premiums paid and payable to another insurer as a result of reinsurance arrangements in order to exchange for that
    company accepting all or part of insurance on a risk or exposure. This item is usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CededPremiumsIncomeStatement class"""
        ...


class CommissionExpensesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommissionExpensesIncomeStatement class"""
        ...


class CreditCardIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Income earned from credit card services including late, over limit, and annual fees. This item is usually only available for bank
    industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CreditCardIncomeStatement class"""
        ...


class DividendIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Dividends earned from equity investment securities. This item is usually only available for bank industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DividendIncomeIncomeStatement class"""
        ...


class EarningsFromEquityInterestIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The earnings from equity interest can be a result of any of the following: Income from earnings distribution of the business, either
    as dividends paid to corporate shareholders or as drawings in a partnership; Capital gain realized upon sale of the business; Capital
    gain realized from selling his or her interest to other partners. This item is usually not available for bank and insurance industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EarningsFromEquityInterestIncomeStatement class"""
        ...


class EquipmentIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Equipment expenses include depreciation, repairs, rentals, and service contract costs. This also includes equipment purchases
    which do not qualify for capitalization in accordance with the entity's accounting policy. This item may also include furniture
    expenses. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EquipmentIncomeStatement class"""
        ...


class ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Costs incurred in identifying areas that may warrant examination and in examining specific areas that are considered to have
    prospects of containing energy or metal reserves, including costs of drilling exploratory wells. Development expense is the
    capitalized costs incurred to obtain access to proved reserves and to provide facilities for extracting, treating, gathering and storing
    the energy and metal. Mineral property includes oil and gas wells, mines, and other natural deposits (including geothermal
    deposits). The payment for leasing those properties is called mineral property lease expense. Exploration expense is included in
    operation expenses for mining industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement class"""
        ...


class FeesAndCommissionsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total fees and commissions earned from providing services such as leasing of space or maintaining: (1) depositor accounts; (2)
    transfer agent; (3) fiduciary and trust; (4) brokerage and underwriting; (5) mortgage; (6) credit cards; (7) correspondent clearing;
    and (8) other such services and activities performed for others. This item is usually available for bank and insurance industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FeesAndCommissionsIncomeStatement class"""
        ...


class ForeignExchangeTradingGainsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Trading revenues that result from foreign exchange exposures such as cash instruments and off-balance sheet derivative
    instruments. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ForeignExchangeTradingGainsIncomeStatement class"""
        ...


class FuelIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount of fuel cost for current period associated with the revenue generation. This item is usually only available for
    transportation industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FuelIncomeStatement class"""
        ...


class FuelAndPurchasePowerIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cost of fuel, purchase power and gas associated with revenue generation. This item is usually only available for utility industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FuelAndPurchasePowerIncomeStatement class"""
        ...


class GainOnSaleOfBusinessIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount of excess earned in comparison to fair value when selling a business. This item is usually not available for insurance
    industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainOnSaleOfBusinessIncomeStatement class"""
        ...


class GainOnSaleOfPPEIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount of excess earned in comparison to the net book value for sale of property, plant, equipment. This item is usually not
    available for bank and insurance industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainOnSaleOfPPEIncomeStatement class"""
        ...


class GainOnSaleOfSecurityIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The amount of excess earned in comparison to the original purchase value of the security."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainOnSaleOfSecurityIncomeStatement class"""
        ...


class GrossPremiumsWrittenIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total premiums generated from all policies written by an insurance company within a given period of time. This item is usually only
    available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossPremiumsWrittenIncomeStatement class"""
        ...


class ImpairmentOfCapitalAssetsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Impairments are considered to be permanent, which is a downward revaluation of fixed assets. If the sum of all estimated future
    cash flows is less than the carrying value of the asset, then the asset would be considered impaired and would have to be written
    down to its fair value. Once an asset is written down, it may only be written back up under very few circumstances. Usually the
    company uses the sum of undiscounted future cash flows to determine if the impairment should occur, and uses the sum of
    discounted future cash flows to make the impairment judgment. The impairment decision emphasizes on capital assets' future
    profit collection ability.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ImpairmentOfCapitalAssetsIncomeStatement class"""
        ...


class IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Premium might contain a portion of the amount that has been paid in advance for insurance that has not yet been provided, which
    is called unearned premium. If either party cancels the contract, the insurer must have the unearned premium ready to refund.
    Hence, the amount of premium reserve maintained by insurers is called unearned premium reserves, which is prepared for
    liquidation.  This item is usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement class"""
        ...


class InsuranceAndClaimsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Insurance and claims are the expenses in the period incurred with respect to protection provided by insurance entities against risks
    other than risks associated with production (which is allocated to cost of sales). This item is usually not available for insurance
    industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InsuranceAndClaimsIncomeStatement class"""
        ...


class InterestExpenseForDepositIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Includes interest expense on the following deposit accounts: Interest-bearing Demand deposit; Checking account; Savings account;
    Deposit in foreign offices; Money Market Certificates & Deposit Accounts. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestExpenseForDepositIncomeStatement class"""
        ...


class InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Gross expenses on the purchase of Federal funds at a specified price with a simultaneous agreement to sell the same to the same
    counterparty at a fixed or determinable price at a future date. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement class"""
        ...


class InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate interest expenses incurred on long-term borrowings and any interest expenses on fixed assets (property, plant,
    equipment) that are leased due longer than one year. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement class"""
        ...


class InterestExpenseForShortTermDebtIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate interest expenses incurred on short-term borrowings and any interest expenses on fixed assets (property, plant,
    equipment) that are leased within one year. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestExpenseForShortTermDebtIncomeStatement class"""
        ...


class InterestIncomeFromDepositsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Interest income generated from all deposit accounts. This item is usually only available for bank industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestIncomeFromDepositsIncomeStatement class"""
        ...


class InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to
    resell the identical security purchased or a security that meets the definition of ""substantially the same"" in the case of a dollar roll.
    Also includes purchases of participations in pools of securities that are subject to a resale agreement; This category includes all
    interest income generated from federal funds sold and securities purchases under agreements to resell; This category includes all
    interest income generated from federal funds sold and securities purchases under agreements to resell.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement class"""
        ...


class InterestIncomeFromLeasesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Includes interest and fee income generated by direct lease financing. This item is usually only available for bank industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestIncomeFromLeasesIncomeStatement class"""
        ...


class InterestIncomeFromLoansIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Loan is a common field to banks. Interest Income from Loans is interest and fee income generated from all loans, which includes
    Commercial loans; Credit loans; Other consumer loans; Real Estate - Construction; Real Estate - Mortgage; Foreign loans. Banks
    earn interest from loans. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestIncomeFromLoansIncomeStatement class"""
        ...


class InterestIncomeFromLoansAndLeaseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total interest and fee income generated by loans and lease. This item is usually only available for bank industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestIncomeFromLoansAndLeaseIncomeStatement class"""
        ...


class InterestIncomeFromSecuritiesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Represents total interest and dividend income from U.S. Treasury securities, U.S. government agency and corporation obligations,
    securities issued by states and political subdivisions, other domestic debt securities, foreign debt securities, and equity securities
    (including investments in mutual funds). Excludes interest income from securities held in trading accounts. This item is usually only
    available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestIncomeFromSecuritiesIncomeStatement class"""
        ...


class InvestmentBankingProfitIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Includes (1) underwriting revenue (the spread between the resale price received and the cost of the securities and related
    expenses) generated through the purchasing, distributing and reselling of new issues of securities (alternatively, could be a
    secondary offering of a large block of previously issued securities); and (2) fees earned for mergers, acquisitions, divestitures,
    restructurings, and other types of financial advisory services. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentBankingProfitIncomeStatement class"""
        ...


class MaintenanceAndRepairsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount of maintenance and repair expenses in the current period associated with the revenue generation. Mainly
    for fixed assets. This item is usually only available for transportation industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MaintenanceAndRepairsIncomeStatement class"""
        ...


class NetForeignExchangeGainLossIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate foreign currency translation gain or loss (both realized and unrealized) included as part of revenue. This item is
    usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetForeignExchangeGainLossIncomeStatement class"""
        ...


class NetOccupancyExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Occupancy expense may include items, such as depreciation of facilities and equipment, lease expenses, property taxes and
    property and casualty insurance expense. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetOccupancyExpenseIncomeStatement class"""
        ...


class NetPremiumsWrittenIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net premiums written are gross premiums written less ceded premiums. This item is usually only available for insurance industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetPremiumsWrittenIncomeStatement class"""
        ...


class NetRealizedGainLossOnInvestmentsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Gain or loss realized during the period of time for all kinds of investment securities. In might include trading, available-for-sale, or
    held-to-maturity securities. This item is usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetRealizedGainLossOnInvestmentsIncomeStatement class"""
        ...


class OccupancyAndEquipmentIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Includes total expenses of occupancy and equipment. This item is usually only available for bank industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OccupancyAndEquipmentIncomeStatement class"""
        ...


class OperationAndMaintenanceIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount of operation and maintenance expenses, which is the one important operating expense for the utility
    industry. It includes any costs related to production and maintenance cost of the property during the revenue generation process.
    This item is usually only available for mining and utility industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperationAndMaintenanceIncomeStatement class"""
        ...


class OtherCustomerServicesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Represents fees and commissions earned from provide other services. This item is usually only available for bank industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCustomerServicesIncomeStatement class"""
        ...


class OtherInterestExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All other interest expense that is not otherwise classified"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherInterestExpenseIncomeStatement class"""
        ...


class OtherInterestIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All other interest income that is not otherwise classified"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherInterestIncomeIncomeStatement class"""
        ...


class OtherNonInterestExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All other non interest expense that is not otherwise classified"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherNonInterestExpenseIncomeStatement class"""
        ...


class OtherSpecialChargesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All other special charges that are not otherwise classified"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherSpecialChargesIncomeStatement class"""
        ...


class OtherTaxesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Any taxes that are not part of income taxes. This item is usually not available for bank and insurance industries."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherTaxesIncomeStatement class"""
        ...


class PolicyholderBenefitsCededIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The provision in current period for future policy benefits, claims, and claims settlement, which is under reinsurance arrangements.
    This item is usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PolicyholderBenefitsCededIncomeStatement class"""
        ...


class PolicyholderBenefitsGrossIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The gross amount of provision in current period for future policyholder benefits, claims, and claims settlement, incurred in the
    claims settlement process before the effects of reinsurance arrangements. This item is usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PolicyholderBenefitsGrossIncomeStatement class"""
        ...


class PolicyholderDividendsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Payments made or credits extended to the insured by the company, usually at the end of a policy year results in reducing the net
    insurance cost to the policyholder. Such dividends may be paid in cash to the insured or applied by the insured as reductions of the
    premiums due for the next policy year. This item is usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PolicyholderDividendsIncomeStatement class"""
        ...


class PolicyholderInterestIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The periodic income payment provided to the annuitant by the insurance company, which is determined by the assumed interest
    rate (AIR) and other factors. This item is usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PolicyholderInterestIncomeStatement class"""
        ...


class ProfessionalExpenseAndContractServicesExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Professional and contract service expense includes cost reimbursements for support services related to contracted projects,
    outsourced management, technical and staff support. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProfessionalExpenseAndContractServicesExpenseIncomeStatement class"""
        ...


class ProvisionForDoubtfulAccountsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Amount of the current period expense charged against operations, the offset which is generally to the allowance for doubtful
    accounts for the purpose of reducing receivables, including notes receivable, to an amount that approximates their net realizable
    value (the amount expected to be collected). The category includes provision for loan losses, provision for any doubtful account
    receivable, and bad debt expenses. This item is usually not available for bank and insurance industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProvisionForDoubtfulAccountsIncomeStatement class"""
        ...


class RentAndLandingFeesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Rent fees are the cost of occupying space during the accounting PeriodAsByte. Landing fees are a change paid to an airport company for
    landing at a particular airport. This item is not available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RentAndLandingFeesIncomeStatement class"""
        ...


class RestructuringAndMergernAcquisitionIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Expenses are related to restructuring, merger, or acquisitions. Restructuring expenses are charges associated with the
    consolidation and relocation of operations, disposition or abandonment of operations or productive assets. Merger and acquisition
    expenses are the amount of costs of a business combination including legal, accounting, and other costs that were charged to
    expense during the PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RestructuringAndMergernAcquisitionIncomeStatement class"""
        ...


class SalariesAndWagesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All salary, wages, compensation, management fees, and employee benefit expenses."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SalariesAndWagesIncomeStatement class"""
        ...


class SecuritiesActivitiesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income/Loss from Securities and Activities"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SecuritiesActivitiesIncomeStatement class"""
        ...


class ServiceChargeOnDepositorAccountsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Includes any service charges on following accounts: Demand Deposit; Checking account; Savings account; Deposit in foreign
    offices; ESCROW accounts; Money Market Certificates & Deposit accounts, CDs (Negotiable Certificates of Deposits); NOW
    Accounts (Negotiable Order of Withdrawal); IRAs (Individual Retirement Accounts). This item is usually only available for bank
    industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ServiceChargeOnDepositorAccountsIncomeStatement class"""
        ...


class TradingGainLossIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A broker-dealer or other financial entity may buy and sell securities exclusively for its own account, sometimes referred to as
    proprietary trading. The profit or loss is measured by the difference between the acquisition cost and the selling price or current
    market or fair value. The net gain or loss, includes both realized and unrealized, from trading cash instruments, equities and
    derivative contracts (including commodity contracts) that has been recognized during the accounting period for the broker dealer or
    other financial entity's own account. This item is typically available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TradingGainLossIncomeStatement class"""
        ...


class TrustFeesbyCommissionsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Bank manages funds on behalf of its customers through the operation of various trust accounts. Any fees earned through managing
    those funds are called trust fees, which are recognized when earned. This item is typically available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TrustFeesbyCommissionsIncomeStatement class"""
        ...


class UnderwritingExpensesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Also known as Policy Acquisition Costs; and reported by insurance companies.  The cost incurred by an insurer when deciding
    whether to accept or decline a risk; may include meetings with the insureds or brokers, actuarial review of loss history, or physical
    inspections of exposures. Also, expenses deducted from insurance company revenues (including incurred losses and acquisition
    costs) to determine underwriting profit.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the UnderwritingExpensesIncomeStatement class"""
        ...


class WriteOffIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A reduction in the value of an asset or earnings by the amount of an expense or loss."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the WriteOffIncomeStatement class"""
        ...


class OtherNonInterestIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Usually available for the banking industry.  This is Non-Interest Income that is not otherwise classified."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherNonInterestIncomeIncomeStatement class"""
        ...


class AmortizationOfIntangiblesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in
    production) in a systematic and rational manner to the periods expected to benefit from such assets.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AmortizationOfIntangiblesIncomeStatement class"""
        ...


class NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net Income from Continuing Operations and Discontinued Operations, added together."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement class"""
        ...


class NetIncomeFromTaxLossCarryforwardIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Occurs if a company has had a net loss from operations on a previous year that can be carried forward to reduce net income for tax
    purposes.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeFromTaxLossCarryforwardIncomeStatement class"""
        ...


class OtherOperatingExpensesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount of operating expenses associated with normal operations. Will not include any gain, loss, benefit, or income;
    and its value reported by the company should be <0.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherOperatingExpensesIncomeStatement class"""
        ...


class TotalMoneyMarketInvestmentsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The sum of the money market investments held by a bank's depositors, which are FDIC insured."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalMoneyMarketInvestmentsIncomeStatement class"""
        ...


class ReconciledCostOfRevenueIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The Cost Of Revenue plus Depreciation, Depletion & Amortization from the IncomeStatement; minus Depreciation, Depletion &
    Amortization from the Cash Flow Statement
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReconciledCostOfRevenueIncomeStatement class"""
        ...


class ReconciledDepreciationIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Is Depreciation, Depletion & Amortization from the Cash Flow Statement"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReconciledDepreciationIncomeStatement class"""
        ...


class NormalizedIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This calculation represents earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be
    used to fairly measure a company's profitability. This is calculated using Net Income from Continuing Operations plus/minus any tax
    affected unusual Items and Goodwill Impairments/Write Offs.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedIncomeIncomeStatement class"""
        ...


class NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:
    Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing
    Operation; Income from Tax Loss Carry forward; Other Gains/Losses.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement class"""
        ...


class GainLossonSaleofAssetsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Any gain (loss) recognized on the sale of assets or a sale which generates profit or loss, which is a difference between sales price
    and net book value at the disposal time.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainLossonSaleofAssetsIncomeStatement class"""
        ...


class GainonSaleofLoansIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Gain on sale of any loans investment."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainonSaleofLoansIncomeStatement class"""
        ...


class GainonSaleofInvestmentPropertyIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Gain on the disposal of investment property."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainonSaleofInvestmentPropertyIncomeStatement class"""
        ...


class LossonExtinguishmentofDebtIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Loss on extinguishment of debt is the accounting loss that results from a debt extinguishment. A debt shall be accounted for as
    having been extinguished in a number of circumstances, including when it has been settled through repayment or replacement by
    another liability. It generally results in an accounting gain or loss. Amount represents the difference between the fair value of the
    payments made and the carrying amount of the debt at the time of its extinguishment.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LossonExtinguishmentofDebtIncomeStatement class"""
        ...


class EarningsfromEquityInterestNetOfTaxIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income from other equity interest reported after Provision of Tax. This applies to all industries."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EarningsfromEquityInterestNetOfTaxIncomeStatement class"""
        ...


class NetIncomeIncludingNoncontrollingInterestsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net income of the group after the adjustment of all expenses and benefit."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeIncludingNoncontrollingInterestsIncomeStatement class"""
        ...


class OtherunderPreferredStockDividendIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Dividend paid to the preferred shareholders before the common stock shareholders."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherunderPreferredStockDividendIncomeStatement class"""
        ...


class StaffCostsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total staff cost which is paid to the employees that is not part of Selling, General, and Administration expense."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the StaffCostsIncomeStatement class"""
        ...


class SocialSecurityCostsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Benefits paid to the employees in respect of their work."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SocialSecurityCostsIncomeStatement class"""
        ...


class PensionCostsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The expense that a company incurs each year by providing a pension plan for its employees. Major expenses in the pension cost
    include employer matching contributions and management fees.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PensionCostsIncomeStatement class"""
        ...


class OtherOperatingIncomeTotalIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total Other Operating Income- including interest income, dividend income and other types of operating income."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherOperatingIncomeTotalIncomeStatement class"""
        ...


class IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total income from the associates and joint venture via investment, accounted for in the Non-Operating section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement class"""
        ...


class TotalOtherFinanceCostIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Any other finance cost which is not clearly defined in the Non-Operating section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalOtherFinanceCostIncomeStatement class"""
        ...


class GrossDividendPaymentIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total amount paid in dividends to investors- this includes dividends paid on equity and non-equity shares."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossDividendPaymentIncomeStatement class"""
        ...


class FeesandCommissionIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Fees and commission income earned by bank and insurance companies on the rendering services."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FeesandCommissionIncomeIncomeStatement class"""
        ...


class FeesandCommissionExpenseIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cost incurred by bank and insurance companies for fees and commission income."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FeesandCommissionExpenseIncomeStatement class"""
        ...


class NetTradingIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Any trading income on the securities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetTradingIncomeIncomeStatement class"""
        ...


class OtherStaffCostsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other costs in incurred in lieu of the employees that cannot be identified by other specific items in the Staff Costs section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherStaffCostsIncomeStatement class"""
        ...


class GainonInvestmentPropertiesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Gain on disposal and change in fair value of investment properties."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainonInvestmentPropertiesIncomeStatement class"""
        ...


class AverageDilutionEarningsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Adjustments to reported net income to calculate Diluted EPS, by assuming that all convertible instruments are converted to
    Common Equity. The adjustments usually include the interest expense of debentures when assumed converted and preferred
    dividends of convertible preferred stock when assumed converted.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AverageDilutionEarningsIncomeStatement class"""
        ...


class GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Gain/Loss through hedging activities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement class"""
        ...


class GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Gain/loss on the write-off of financial assets available-for-sale."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement class"""
        ...


class NegativeGoodwillImmediatelyRecognizedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Negative Goodwill recognized in the Income Statement. Negative Goodwill arises where the net assets at the date of acquisition,
    fairly valued, falls below the cost of acquisition.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NegativeGoodwillImmediatelyRecognizedIncomeStatement class"""
        ...


class GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Gain or loss on derivatives investment due to the fair value adjustment."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement class"""
        ...


class ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Impairment or reversal of impairment on financial instrument such as derivative. This is a contra account under Total Revenue in
    banks.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement class"""
        ...


class ClaimsandPaidIncurredIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All reported claims arising out of incidents in that year are considered incurred grouped with claims paid out."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ClaimsandPaidIncurredIncomeStatement class"""
        ...


class ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Claim on the reinsurance company and take the benefits."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement class"""
        ...


class ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income/Expense due to changes between periods in insurance liabilities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement class"""
        ...


class ChangeinInvestmentContractIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income/Expense due to changes between periods in Investment Contracts."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinInvestmentContractIncomeStatement class"""
        ...


class CreditRiskProvisionsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Provision for the risk of loss of principal or loss of a financial reward stemming from a borrower's failure to repay a loan or otherwise
    meet a contractual obligation. Credit risk arises whenever a borrower is expecting to use future cash flows to pay a current debt.
    Investors are compensated for assuming credit risk by way of interest payments from the borrower or issuer of a debt obligation.
    This is a contra account under Total Revenue in banks.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CreditRiskProvisionsIncomeStatement class"""
        ...


class WagesandSalariesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """This is the portion under Staff Costs that represents salary paid to the employees in respect of their work."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the WagesandSalariesIncomeStatement class"""
        ...


class OtherNonOperatingIncomeExpensesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total other income and expense of the company that cannot be identified by other specific items in the Non-Operating section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherNonOperatingIncomeExpensesIncomeStatement class"""
        ...


class OtherNonOperatingIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other income of the company that cannot be identified by other specific items in the Non-Operating section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherNonOperatingIncomeIncomeStatement class"""
        ...


class OtherNonOperatingExpensesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other expenses of the company that cannot be identified by other specific items in the Non-Operating section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherNonOperatingExpensesIncomeStatement class"""
        ...


class TotalUnusualItemsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total unusual items including Negative Goodwill."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalUnusualItemsIncomeStatement class"""
        ...


class TotalUnusualItemsExcludingGoodwillIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The sum of all the identifiable operating and non-operating unusual items."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalUnusualItemsExcludingGoodwillIncomeStatement class"""
        ...


class TaxRateForCalcsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Tax rate used for Morningstar calculations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxRateForCalcsIncomeStatement class"""
        ...


class TaxEffectOfUnusualItemsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Tax effect of the usual items"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxEffectOfUnusualItemsIncomeStatement class"""
        ...


class NormalizedEBITDAIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """EBITDA less Total Unusual Items"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedEBITDAIncomeStatement class"""
        ...


class StockBasedCompensationIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cost to the company for granting stock options to reward employees."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the StockBasedCompensationIncomeStatement class"""
        ...


class DilutedNIAvailtoComStockholdersIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Net income to calculate Diluted EPS, accounting for adjustments assuming that all the convertible instruments are being converted
    to Common Equity.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedNIAvailtoComStockholdersIncomeStatement class"""
        ...


class InvestmentContractLiabilitiesIncurredIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income/Expenses due to the insurer's liabilities incurred in Investment Contracts."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentContractLiabilitiesIncurredIncomeStatement class"""
        ...


class ReinsuranceRecoveriesofInvestmentContractIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income/Expense due to recoveries from reinsurers for Investment Contracts."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReinsuranceRecoveriesofInvestmentContractIncomeStatement class"""
        ...


class TotalDividendPaymentofEquitySharesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total amount paid in dividends to equity securities investors."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalDividendPaymentofEquitySharesIncomeStatement class"""
        ...


class TotalDividendPaymentofNonEquitySharesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total amount paid in dividends to Non-Equity securities investors."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalDividendPaymentofNonEquitySharesIncomeStatement class"""
        ...


class ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The change in the amount of the unearned premium reserves maintained by insurers."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement class"""
        ...


class ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The change in the amount of unearned premium reserve to be covered by reinsurers."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement class"""
        ...


class ClaimsandChangeinInsuranceLiabilitiesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income/Expense due to the insurer's changes in insurance liabilities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ClaimsandChangeinInsuranceLiabilitiesIncomeStatement class"""
        ...


class ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income/Expense due to recoveries from reinsurers for insurance liabilities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement class"""
        ...


class TotalOperatingIncomeAsReportedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Operating profit/loss as reported by the company, may be the same or not the same as Morningstar's standardized definition."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalOperatingIncomeAsReportedIncomeStatement class"""
        ...


class OtherGAIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Other General and Administrative Expenses not categorized that the company incurs that are not directly tied to a specific function
    such as manufacturing, production, or sales.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherGAIncomeStatement class"""
        ...


class OtherCostofRevenueIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other costs associated with the revenue-generating activities of the company not categorized above."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCostofRevenueIncomeStatement class"""
        ...


class RentandLandingFeesCostofRevenueIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Costs paid to use the facilities necessary to generate revenue during the accounting PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RentandLandingFeesCostofRevenueIncomeStatement class"""
        ...


class DDACostofRevenueIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Costs of depreciation and amortization on assets used for the revenue-generating activities during the accounting period"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DDACostofRevenueIncomeStatement class"""
        ...


class RentExpenseSupplementalIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The sum of all rent expenses incurred by the company for operating leases during the year, it is a supplemental value which would
    be reported outside consolidated statements or consolidated statement's footnotes.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RentExpenseSupplementalIncomeStatement class"""
        ...


class NormalizedPreTaxIncomeIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This calculation represents pre-tax earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This
    can be used to fairly measure a company's profitability. This is calculated using Pre-Tax Income plus/minus any unusual Items and
    Goodwill Impairments/Write Offs.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedPreTaxIncomeIncomeStatement class"""
        ...


class ResearchAndDevelopmentExpensesSupplementalIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount of research and development expenses during the year. It is a supplemental value which would be reported
    outside consolidated statements.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ResearchAndDevelopmentExpensesSupplementalIncomeStatement class"""
        ...


class DepreciationSupplementalIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The current period expense charged against earnings on tangible asset over its useful life. It is a supplemental value which would
    be reported outside consolidated statements.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepreciationSupplementalIncomeStatement class"""
        ...


class AmortizationSupplementalIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The current period expense charged against earnings on intangible asset over its useful life. It is a supplemental value which would
    be reported outside consolidated statements.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AmortizationSupplementalIncomeStatement class"""
        ...


class TotalRevenueAsReportedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total revenue as reported by the company, may be the same or not the same as Morningstar's standardized definition."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalRevenueAsReportedIncomeStatement class"""
        ...


class OperatingExpenseAsReportedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Operating expense as reported by the company, may be the same or not the same as Morningstar's standardized definition."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperatingExpenseAsReportedIncomeStatement class"""
        ...


class NormalizedIncomeAsReportedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly measure a
    company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's standardized
    definition.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedIncomeAsReportedIncomeStatement class"""
        ...


class NormalizedEBITDAAsReportedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    EBITDA less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's
    standardized definition.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedEBITDAAsReportedIncomeStatement class"""
        ...


class NormalizedEBITAsReportedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    EBIT less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's standardized
    definition.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedEBITAsReportedIncomeStatement class"""
        ...


class NormalizedOperatingProfitAsReportedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Operating profit adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly
    measure a company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's
    standardized definition.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedOperatingProfitAsReportedIncomeStatement class"""
        ...


class EffectiveTaxRateAsReportedIncomeStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The average tax rate for the period as reported by the company, may be the same or not the same as Morningstar's standardized
    definition.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EffectiveTaxRateAsReportedIncomeStatement class"""
        ...


class IncomeStatement(System.Object):
    """Definition of the IncomeStatement class"""

    @property
    def Amortization(self) -> QuantConnect.Data.Fundamental.AmortizationIncomeStatement:
        """The non-cash expense recognized on intangible assets over the benefit period of the asset."""
        ...

    @Amortization.setter
    def Amortization(self, value: QuantConnect.Data.Fundamental.AmortizationIncomeStatement):
        """The non-cash expense recognized on intangible assets over the benefit period of the asset."""
        ...

    @property
    def SecuritiesAmortization(self) -> QuantConnect.Data.Fundamental.SecuritiesAmortizationIncomeStatement:
        """
        The gradual elimination of a liability, such as a mortgage, in regular payments over a specified period of time. Such payments must
        be sufficient to cover both principal and interest.
        """
        ...

    @SecuritiesAmortization.setter
    def SecuritiesAmortization(self, value: QuantConnect.Data.Fundamental.SecuritiesAmortizationIncomeStatement):
        """
        The gradual elimination of a liability, such as a mortgage, in regular payments over a specified period of time. Such payments must
        be sufficient to cover both principal and interest.
        """
        ...

    @property
    def CostOfRevenue(self) -> QuantConnect.Data.Fundamental.CostOfRevenueIncomeStatement:
        """
        The aggregate cost of goods produced and sold and services rendered during the reporting period. It excludes all operating
        expenses such as depreciation, depletion, amortization, and SG&A. For the must have cost industry, if the number is not reported
        by the company, it will be calculated based on accounting equation.
        Cost of Revenue = Revenue - Operating Expenses - Operating Profit.
        """
        ...

    @CostOfRevenue.setter
    def CostOfRevenue(self, value: QuantConnect.Data.Fundamental.CostOfRevenueIncomeStatement):
        """
        The aggregate cost of goods produced and sold and services rendered during the reporting period. It excludes all operating
        expenses such as depreciation, depletion, amortization, and SG&A. For the must have cost industry, if the number is not reported
        by the company, it will be calculated based on accounting equation.
        Cost of Revenue = Revenue - Operating Expenses - Operating Profit.
        """
        ...

    @property
    def Depletion(self) -> QuantConnect.Data.Fundamental.DepletionIncomeStatement:
        """The non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the asset."""
        ...

    @Depletion.setter
    def Depletion(self, value: QuantConnect.Data.Fundamental.DepletionIncomeStatement):
        """The non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the asset."""
        ...

    @property
    def Depreciation(self) -> QuantConnect.Data.Fundamental.DepreciationIncomeStatement:
        """
        The current period non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of
        assets over their useful lives, in the Income Statement. Examples of tangible asset include buildings, production and equipment.
        """
        ...

    @Depreciation.setter
    def Depreciation(self, value: QuantConnect.Data.Fundamental.DepreciationIncomeStatement):
        """
        The current period non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of
        assets over their useful lives, in the Income Statement. Examples of tangible asset include buildings, production and equipment.
        """
        ...

    @property
    def DepreciationAndAmortization(self) -> QuantConnect.Data.Fundamental.DepreciationAndAmortizationIncomeStatement:
        """
        The sum of depreciation and amortization expense in the Income Statement.
        Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of
        assets over their useful lives
        Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.
        """
        ...

    @DepreciationAndAmortization.setter
    def DepreciationAndAmortization(self, value: QuantConnect.Data.Fundamental.DepreciationAndAmortizationIncomeStatement):
        """
        The sum of depreciation and amortization expense in the Income Statement.
        Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of
        assets over their useful lives
        Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.
        """
        ...

    @property
    def DepreciationAmortizationDepletion(self) -> QuantConnect.Data.Fundamental.DepreciationAmortizationDepletionIncomeStatement:
        """
        The sum of depreciation, amortization and depletion expense in the Income Statement.
        Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of
        assets over their useful lives
        Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.
        Depletion is the non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the
        asset.
        """
        ...

    @DepreciationAmortizationDepletion.setter
    def DepreciationAmortizationDepletion(self, value: QuantConnect.Data.Fundamental.DepreciationAmortizationDepletionIncomeStatement):
        """
        The sum of depreciation, amortization and depletion expense in the Income Statement.
        Depreciation is the non-cash expense recognized on tangible assets used in the normal course of business, by allocating the cost of
        assets over their useful lives
        Amortization is the non-cash expense recognized on intangible assets over the benefit period of the asset.
        Depletion is the non-cash expense recognized on natural resources (eg. Oil and mineral deposits) over the benefit period of the
        asset.
        """
        ...

    @property
    def NetIncomeDiscontinuousOperations(self) -> QuantConnect.Data.Fundamental.NetIncomeDiscontinuousOperationsIncomeStatement:
        """
        To be classified as discontinued operations, if both of the following conditions are met:
        1: The operations and cash flow of the component have been or will be removed from the ongoing operations of the entity as a
        result of the disposal transaction, and
        2: The entity will have no significant continuing involvement in the operations of the component after the disposal transaction.
        The discontinued operation is reported net of tax.
        Gains/Loss on Disposal of Discontinued Operations: Any gains or loss recognized on disposal of discontinued operations,
        which is the difference between the carrying value of the division and its fair value less costs to sell.
        Provision for Gain/Loss on Disposal: The amount of current expense charged in order to prepare for the disposal of
        discontinued operations.
        """
        ...

    @NetIncomeDiscontinuousOperations.setter
    def NetIncomeDiscontinuousOperations(self, value: QuantConnect.Data.Fundamental.NetIncomeDiscontinuousOperationsIncomeStatement):
        """
        To be classified as discontinued operations, if both of the following conditions are met:
        1: The operations and cash flow of the component have been or will be removed from the ongoing operations of the entity as a
        result of the disposal transaction, and
        2: The entity will have no significant continuing involvement in the operations of the component after the disposal transaction.
        The discontinued operation is reported net of tax.
        Gains/Loss on Disposal of Discontinued Operations: Any gains or loss recognized on disposal of discontinued operations,
        which is the difference between the carrying value of the division and its fair value less costs to sell.
        Provision for Gain/Loss on Disposal: The amount of current expense charged in order to prepare for the disposal of
        discontinued operations.
        """
        ...

    @property
    def ExciseTaxes(self) -> QuantConnect.Data.Fundamental.ExciseTaxesIncomeStatement:
        """
        Excise taxes are taxes paid when purchases are made on a specific good, such as gasoline. Excise taxes are often included in the
        price of the product. There are also excise taxes on activities, such as on wagering or on highway usage by trucks.
        """
        ...

    @ExciseTaxes.setter
    def ExciseTaxes(self, value: QuantConnect.Data.Fundamental.ExciseTaxesIncomeStatement):
        """
        Excise taxes are taxes paid when purchases are made on a specific good, such as gasoline. Excise taxes are often included in the
        price of the product. There are also excise taxes on activities, such as on wagering or on highway usage by trucks.
        """
        ...

    @property
    def NetIncomeExtraordinary(self) -> QuantConnect.Data.Fundamental.NetIncomeExtraordinaryIncomeStatement:
        """
        Gains (losses), whether arising from extinguishment of debt, prior period adjustments, or from other events or transactions, that are
        both unusual in nature and infrequent in occurrence thereby meeting the criteria for an event or transaction to be classified as an
        extraordinary item.
        """
        ...

    @NetIncomeExtraordinary.setter
    def NetIncomeExtraordinary(self, value: QuantConnect.Data.Fundamental.NetIncomeExtraordinaryIncomeStatement):
        """
        Gains (losses), whether arising from extinguishment of debt, prior period adjustments, or from other events or transactions, that are
        both unusual in nature and infrequent in occurrence thereby meeting the criteria for an event or transaction to be classified as an
        extraordinary item.
        """
        ...

    @property
    def FeeRevenueAndOtherIncome(self) -> QuantConnect.Data.Fundamental.FeeRevenueAndOtherIncomeIncomeStatement:
        """The aggregate amount of fees, commissions, and other income."""
        ...

    @FeeRevenueAndOtherIncome.setter
    def FeeRevenueAndOtherIncome(self, value: QuantConnect.Data.Fundamental.FeeRevenueAndOtherIncomeIncomeStatement):
        """The aggregate amount of fees, commissions, and other income."""
        ...

    @property
    def GeneralAndAdministrativeExpense(self) -> QuantConnect.Data.Fundamental.GeneralAndAdministrativeExpenseIncomeStatement:
        """The aggregate total of general managing and administering expenses for the company."""
        ...

    @GeneralAndAdministrativeExpense.setter
    def GeneralAndAdministrativeExpense(self, value: QuantConnect.Data.Fundamental.GeneralAndAdministrativeExpenseIncomeStatement):
        """The aggregate total of general managing and administering expenses for the company."""
        ...

    @property
    def GrossProfit(self) -> QuantConnect.Data.Fundamental.GrossProfitIncomeStatement:
        """
        Total revenue less cost of revenue. The number is as reported by the company on the income statement; however, the number will
        be calculated if it is not reported. This field is null if the cost of revenue is not given.
        Gross Profit = Total Revenue - Cost of Revenue.
        """
        ...

    @GrossProfit.setter
    def GrossProfit(self, value: QuantConnect.Data.Fundamental.GrossProfitIncomeStatement):
        """
        Total revenue less cost of revenue. The number is as reported by the company on the income statement; however, the number will
        be calculated if it is not reported. This field is null if the cost of revenue is not given.
        Gross Profit = Total Revenue - Cost of Revenue.
        """
        ...

    @property
    def InterestExpense(self) -> QuantConnect.Data.Fundamental.InterestExpenseIncomeStatement:
        """Relates to the general cost of borrowing money. It is the price that a lender charges a borrower for the use of the lender's money."""
        ...

    @InterestExpense.setter
    def InterestExpense(self, value: QuantConnect.Data.Fundamental.InterestExpenseIncomeStatement):
        """Relates to the general cost of borrowing money. It is the price that a lender charges a borrower for the use of the lender's money."""
        ...

    @property
    def InterestExpenseNonOperating(self) -> QuantConnect.Data.Fundamental.InterestExpenseNonOperatingIncomeStatement:
        """
        Interest expense caused by long term financing activities; such as interest expense incurred on trading liabilities, commercial paper,
        long-term debt, capital leases, deposits, and all other borrowings.
        """
        ...

    @InterestExpenseNonOperating.setter
    def InterestExpenseNonOperating(self, value: QuantConnect.Data.Fundamental.InterestExpenseNonOperatingIncomeStatement):
        """
        Interest expense caused by long term financing activities; such as interest expense incurred on trading liabilities, commercial paper,
        long-term debt, capital leases, deposits, and all other borrowings.
        """
        ...

    @property
    def InterestIncomeAfterProvisionForLoanLoss(self) -> QuantConnect.Data.Fundamental.InterestIncomeAfterProvisionForLoanLossIncomeStatement:
        """
        Net interest and dividend income or expense, including any amortization and accretion (as applicable) of discounts and premiums,
        including consideration of the provisions for loan, lease, credit, and other related losses, if any.
        """
        ...

    @InterestIncomeAfterProvisionForLoanLoss.setter
    def InterestIncomeAfterProvisionForLoanLoss(self, value: QuantConnect.Data.Fundamental.InterestIncomeAfterProvisionForLoanLossIncomeStatement):
        """
        Net interest and dividend income or expense, including any amortization and accretion (as applicable) of discounts and premiums,
        including consideration of the provisions for loan, lease, credit, and other related losses, if any.
        """
        ...

    @property
    def InterestIncomeNonOperating(self) -> QuantConnect.Data.Fundamental.InterestIncomeNonOperatingIncomeStatement:
        """Interest income earned from long term financing activities."""
        ...

    @InterestIncomeNonOperating.setter
    def InterestIncomeNonOperating(self, value: QuantConnect.Data.Fundamental.InterestIncomeNonOperatingIncomeStatement):
        """Interest income earned from long term financing activities."""
        ...

    @property
    def NetNonOperatingInterestIncomeExpense(self) -> QuantConnect.Data.Fundamental.NetNonOperatingInterestIncomeExpenseIncomeStatement:
        """Net-Non Operating interest income or expenses caused by financing activities."""
        ...

    @NetNonOperatingInterestIncomeExpense.setter
    def NetNonOperatingInterestIncomeExpense(self, value: QuantConnect.Data.Fundamental.NetNonOperatingInterestIncomeExpenseIncomeStatement):
        """Net-Non Operating interest income or expenses caused by financing activities."""
        ...

    @property
    def LossAdjustmentExpense(self) -> QuantConnect.Data.Fundamental.LossAdjustmentExpenseIncomeStatement:
        """
        Losses generally refer to (1) the amount of reduction in the value of an insured's property caused by an insured peril, (2) the amount
        sought through an insured's claim, or (3) the amount paid on behalf of an insured under an insurance contract.  Loss Adjustment
        Expenses is expenses incurred in the course of investigating and settling claims that includes any legal and adjusters' fees and the
        costs of paying claims and all related expenses.
        """
        ...

    @LossAdjustmentExpense.setter
    def LossAdjustmentExpense(self, value: QuantConnect.Data.Fundamental.LossAdjustmentExpenseIncomeStatement):
        """
        Losses generally refer to (1) the amount of reduction in the value of an insured's property caused by an insured peril, (2) the amount
        sought through an insured's claim, or (3) the amount paid on behalf of an insured under an insurance contract.  Loss Adjustment
        Expenses is expenses incurred in the course of investigating and settling claims that includes any legal and adjusters' fees and the
        costs of paying claims and all related expenses.
        """
        ...

    @property
    def MinorityInterests(self) -> QuantConnect.Data.Fundamental.MinorityInterestsIncomeStatement:
        """
        Represents par or stated value of the subsidiary stock not owned by the parent company plus the minority interest's equity in the
        surplus of the subsidiary. This item includes preferred dividend averages on the minority preferred stock (preferred shares not
        owned by the reporting parent company). Minority interest also refers to stockholders who own less than 50% of a subsidiary's
        outstanding voting common stock. The minority stockholders hold an interest in the subsidiary's net assets and share earnings with
        the parent company.
        """
        ...

    @MinorityInterests.setter
    def MinorityInterests(self, value: QuantConnect.Data.Fundamental.MinorityInterestsIncomeStatement):
        """
        Represents par or stated value of the subsidiary stock not owned by the parent company plus the minority interest's equity in the
        surplus of the subsidiary. This item includes preferred dividend averages on the minority preferred stock (preferred shares not
        owned by the reporting parent company). Minority interest also refers to stockholders who own less than 50% of a subsidiary's
        outstanding voting common stock. The minority stockholders hold an interest in the subsidiary's net assets and share earnings with
        the parent company.
        """
        ...

    @property
    def NetIncome(self) -> QuantConnect.Data.Fundamental.NetIncomeIncomeStatement:
        """
        Includes all the operations (continuing and discontinued) and all the other income or charges (extraordinary, accounting changes,
        tax loss carry forward, and other gains and losses).
        """
        ...

    @NetIncome.setter
    def NetIncome(self, value: QuantConnect.Data.Fundamental.NetIncomeIncomeStatement):
        """
        Includes all the operations (continuing and discontinued) and all the other income or charges (extraordinary, accounting changes,
        tax loss carry forward, and other gains and losses).
        """
        ...

    @property
    def NetIncomeCommonStockholders(self) -> QuantConnect.Data.Fundamental.NetIncomeCommonStockholdersIncomeStatement:
        """Net income minus the preferred dividends paid as presented in the Income Statement."""
        ...

    @NetIncomeCommonStockholders.setter
    def NetIncomeCommonStockholders(self, value: QuantConnect.Data.Fundamental.NetIncomeCommonStockholdersIncomeStatement):
        """Net income minus the preferred dividends paid as presented in the Income Statement."""
        ...

    @property
    def NetIncomeContinuousOperations(self) -> QuantConnect.Data.Fundamental.NetIncomeContinuousOperationsIncomeStatement:
        """
        Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from: Preferred Dividends;
        Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing Operation; Income from Tax
        Loss Carry forward; Other Gains/Losses.
        """
        ...

    @NetIncomeContinuousOperations.setter
    def NetIncomeContinuousOperations(self, value: QuantConnect.Data.Fundamental.NetIncomeContinuousOperationsIncomeStatement):
        """
        Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from: Preferred Dividends;
        Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing Operation; Income from Tax
        Loss Carry forward; Other Gains/Losses.
        """
        ...

    @property
    def NetInterestIncome(self) -> QuantConnect.Data.Fundamental.NetInterestIncomeIncomeStatement:
        """
        Total interest income minus total interest expense. It represents the difference between interest and dividends earned on interest-
        bearing assets and interest paid to depositors and other creditors.
        """
        ...

    @NetInterestIncome.setter
    def NetInterestIncome(self, value: QuantConnect.Data.Fundamental.NetInterestIncomeIncomeStatement):
        """
        Total interest income minus total interest expense. It represents the difference between interest and dividends earned on interest-
        bearing assets and interest paid to depositors and other creditors.
        """
        ...

    @property
    def NetInvestmentIncome(self) -> QuantConnect.Data.Fundamental.NetInvestmentIncomeIncomeStatement:
        """
        Total of interest, dividends, and other earnings derived from the insurance company's invested assets minus the expenses
        associated with these investments. Excluded from this income are capital gains or losses as the result of the sale of assets, as well
        as any unrealized capital gains or losses.
        """
        ...

    @NetInvestmentIncome.setter
    def NetInvestmentIncome(self, value: QuantConnect.Data.Fundamental.NetInvestmentIncomeIncomeStatement):
        """
        Total of interest, dividends, and other earnings derived from the insurance company's invested assets minus the expenses
        associated with these investments. Excluded from this income are capital gains or losses as the result of the sale of assets, as well
        as any unrealized capital gains or losses.
        """
        ...

    @property
    def TotalRevenue(self) -> QuantConnect.Data.Fundamental.TotalRevenueIncomeStatement:
        """
        All sales, business revenues and income that the company makes from its business operations, net of excise taxes. This applies for
        all companies and can be used as comparison for all industries.
        For Normal, Mining, Transportation and Utility templates companies, this is the sum of Operating Revenues, Excise Taxes and Fees.
        For Bank template companies, this is the sum of Net Interest Income and Non-Interest Income.
        For Insurance template companies, this is the sum of Premiums, Interest Income, Fees, Investment and Other Income.
        """
        ...

    @TotalRevenue.setter
    def TotalRevenue(self, value: QuantConnect.Data.Fundamental.TotalRevenueIncomeStatement):
        """
        All sales, business revenues and income that the company makes from its business operations, net of excise taxes. This applies for
        all companies and can be used as comparison for all industries.
        For Normal, Mining, Transportation and Utility templates companies, this is the sum of Operating Revenues, Excise Taxes and Fees.
        For Bank template companies, this is the sum of Net Interest Income and Non-Interest Income.
        For Insurance template companies, this is the sum of Premiums, Interest Income, Fees, Investment and Other Income.
        """
        ...

    @property
    def NonInterestExpense(self) -> QuantConnect.Data.Fundamental.NonInterestExpenseIncomeStatement:
        """
        Any expenses that not related to interest. It includes labor and related expense, occupancy and equipment, commission,
        professional expense and contract services expenses, selling, general and administrative, research and development depreciation,
        amortization and depletion, and any other special income/charges.
        """
        ...

    @NonInterestExpense.setter
    def NonInterestExpense(self, value: QuantConnect.Data.Fundamental.NonInterestExpenseIncomeStatement):
        """
        Any expenses that not related to interest. It includes labor and related expense, occupancy and equipment, commission,
        professional expense and contract services expenses, selling, general and administrative, research and development depreciation,
        amortization and depletion, and any other special income/charges.
        """
        ...

    @property
    def NonInterestIncome(self) -> QuantConnect.Data.Fundamental.NonInterestIncomeIncomeStatement:
        """
        The total amount of non-interest income which may be derived from: (1) fees and commissions; (2) premiums earned; (3) equity
        investment; (4) the sale or disposal of assets; and (5) other sources not otherwise specified.
        """
        ...

    @NonInterestIncome.setter
    def NonInterestIncome(self, value: QuantConnect.Data.Fundamental.NonInterestIncomeIncomeStatement):
        """
        The total amount of non-interest income which may be derived from: (1) fees and commissions; (2) premiums earned; (3) equity
        investment; (4) the sale or disposal of assets; and (5) other sources not otherwise specified.
        """
        ...

    @property
    def OperatingExpense(self) -> QuantConnect.Data.Fundamental.OperatingExpenseIncomeStatement:
        """
        Operating expenses are primary recurring costs associated with central operations (other than cost of goods sold) that are incurred
        in order to generate sales.
        """
        ...

    @OperatingExpense.setter
    def OperatingExpense(self, value: QuantConnect.Data.Fundamental.OperatingExpenseIncomeStatement):
        """
        Operating expenses are primary recurring costs associated with central operations (other than cost of goods sold) that are incurred
        in order to generate sales.
        """
        ...

    @property
    def OperatingIncome(self) -> QuantConnect.Data.Fundamental.OperatingIncomeIncomeStatement:
        """
        Income from normal business operations after deducting cost of revenue and operating expenses. It does not include income from
        any investing activities.
        """
        ...

    @OperatingIncome.setter
    def OperatingIncome(self, value: QuantConnect.Data.Fundamental.OperatingIncomeIncomeStatement):
        """
        Income from normal business operations after deducting cost of revenue and operating expenses. It does not include income from
        any investing activities.
        """
        ...

    @property
    def OperatingRevenue(self) -> QuantConnect.Data.Fundamental.OperatingRevenueIncomeStatement:
        """
        Sales and income that the company makes from its business operations. This applies only to non-bank and insurance companies.
        For Utility template companies, this is the sum of revenue from electric, gas, transportation and other operating revenue.
        For Transportation template companies, this is the sum of revenue-passenger, revenue-cargo, and other operating revenue.
        """
        ...

    @OperatingRevenue.setter
    def OperatingRevenue(self, value: QuantConnect.Data.Fundamental.OperatingRevenueIncomeStatement):
        """
        Sales and income that the company makes from its business operations. This applies only to non-bank and insurance companies.
        For Utility template companies, this is the sum of revenue from electric, gas, transportation and other operating revenue.
        For Transportation template companies, this is the sum of revenue-passenger, revenue-cargo, and other operating revenue.
        """
        ...

    @property
    def OtherIncomeExpense(self) -> QuantConnect.Data.Fundamental.OtherIncomeExpenseIncomeStatement:
        """Income or expense that comes from miscellaneous sources."""
        ...

    @OtherIncomeExpense.setter
    def OtherIncomeExpense(self, value: QuantConnect.Data.Fundamental.OtherIncomeExpenseIncomeStatement):
        """Income or expense that comes from miscellaneous sources."""
        ...

    @property
    def PolicyAcquisitionExpense(self) -> QuantConnect.Data.Fundamental.PolicyAcquisitionExpenseIncomeStatement:
        """
        Costs that vary with and are primarily related to the acquisition of new and renewal insurance contracts. Also referred to as
        underwriting expenses.
        """
        ...

    @PolicyAcquisitionExpense.setter
    def PolicyAcquisitionExpense(self, value: QuantConnect.Data.Fundamental.PolicyAcquisitionExpenseIncomeStatement):
        """
        Costs that vary with and are primarily related to the acquisition of new and renewal insurance contracts. Also referred to as
        underwriting expenses.
        """
        ...

    @property
    def NetPolicyholderBenefitsAndClaims(self) -> QuantConnect.Data.Fundamental.NetPolicyholderBenefitsAndClaimsIncomeStatement:
        """
        The net provision in current period for future policy benefits, claims, and claims settlement expenses incurred in the claims
        settlement process before the effects of reinsurance arrangements. The value is net of the effects of contracts assumed and
        ceded.
        """
        ...

    @NetPolicyholderBenefitsAndClaims.setter
    def NetPolicyholderBenefitsAndClaims(self, value: QuantConnect.Data.Fundamental.NetPolicyholderBenefitsAndClaimsIncomeStatement):
        """
        The net provision in current period for future policy benefits, claims, and claims settlement expenses incurred in the claims
        settlement process before the effects of reinsurance arrangements. The value is net of the effects of contracts assumed and
        ceded.
        """
        ...

    @property
    def PreferredStockDividends(self) -> QuantConnect.Data.Fundamental.PreferredStockDividendsIncomeStatement:
        """
        The amount of dividends declared or paid in the period to preferred shareholders, or the amount for which the obligation to pay
        them dividends arose in the period. Preferred dividends are the amount required for the current year only, and not for any amount
        required in past years.
        """
        ...

    @PreferredStockDividends.setter
    def PreferredStockDividends(self, value: QuantConnect.Data.Fundamental.PreferredStockDividendsIncomeStatement):
        """
        The amount of dividends declared or paid in the period to preferred shareholders, or the amount for which the obligation to pay
        them dividends arose in the period. Preferred dividends are the amount required for the current year only, and not for any amount
        required in past years.
        """
        ...

    @property
    def TotalPremiumsEarned(self) -> QuantConnect.Data.Fundamental.TotalPremiumsEarnedIncomeStatement:
        """
        Premiums earned is the portion of an insurance written premium which is considered "earned" by the insurer, based on the part of
        the policy period that the insurance has been in effect, and during which the insurer has been exposed to loss.
        """
        ...

    @TotalPremiumsEarned.setter
    def TotalPremiumsEarned(self, value: QuantConnect.Data.Fundamental.TotalPremiumsEarnedIncomeStatement):
        """
        Premiums earned is the portion of an insurance written premium which is considered "earned" by the insurer, based on the part of
        the policy period that the insurance has been in effect, and during which the insurer has been exposed to loss.
        """
        ...

    @property
    def PretaxIncome(self) -> QuantConnect.Data.Fundamental.PretaxIncomeIncomeStatement:
        """Reported income before the deduction or benefit of income taxes."""
        ...

    @PretaxIncome.setter
    def PretaxIncome(self, value: QuantConnect.Data.Fundamental.PretaxIncomeIncomeStatement):
        """Reported income before the deduction or benefit of income taxes."""
        ...

    @property
    def TaxProvision(self) -> QuantConnect.Data.Fundamental.TaxProvisionIncomeStatement:
        """Include any taxes on income, net of any investment tax credits for the current accounting period."""
        ...

    @TaxProvision.setter
    def TaxProvision(self, value: QuantConnect.Data.Fundamental.TaxProvisionIncomeStatement):
        """Include any taxes on income, net of any investment tax credits for the current accounting period."""
        ...

    @property
    def CreditLossesProvision(self) -> QuantConnect.Data.Fundamental.CreditLossesProvisionIncomeStatement:
        """
        A charge to income which represents an expense deemed adequate by management given the composition of a bank's credit
        portfolios, their probability of default, the economic environment and the allowance for credit losses already established. Specific
        provisions are established to reduce the book value of specific assets (primarily loans) to establish the amount expected to be
        recovered on the loans.
        """
        ...

    @CreditLossesProvision.setter
    def CreditLossesProvision(self, value: QuantConnect.Data.Fundamental.CreditLossesProvisionIncomeStatement):
        """
        A charge to income which represents an expense deemed adequate by management given the composition of a bank's credit
        portfolios, their probability of default, the economic environment and the allowance for credit losses already established. Specific
        provisions are established to reduce the book value of specific assets (primarily loans) to establish the amount expected to be
        recovered on the loans.
        """
        ...

    @property
    def ResearchAndDevelopment(self) -> QuantConnect.Data.Fundamental.ResearchAndDevelopmentIncomeStatement:
        """The aggregate amount of research and development expenses during the year."""
        ...

    @ResearchAndDevelopment.setter
    def ResearchAndDevelopment(self, value: QuantConnect.Data.Fundamental.ResearchAndDevelopmentIncomeStatement):
        """The aggregate amount of research and development expenses during the year."""
        ...

    @property
    def SellingAndMarketingExpense(self) -> QuantConnect.Data.Fundamental.SellingAndMarketingExpenseIncomeStatement:
        """The aggregate total amount of expenses directly related to the marketing or selling of products or services."""
        ...

    @SellingAndMarketingExpense.setter
    def SellingAndMarketingExpense(self, value: QuantConnect.Data.Fundamental.SellingAndMarketingExpenseIncomeStatement):
        """The aggregate total amount of expenses directly related to the marketing or selling of products or services."""
        ...

    @property
    def SellingGeneralAndAdministration(self) -> QuantConnect.Data.Fundamental.SellingGeneralAndAdministrationIncomeStatement:
        """
        The aggregate total costs related to selling a firm's product and services, as well as all other general and administrative expenses.
        Selling expenses are those directly related to the company's efforts to generate sales (e.g., sales salaries, commissions,
        advertising, delivery expenses). General and administrative expenses are expenses related to general administration of the
        company's operation (e.g., officers and office salaries, office supplies, telephone, accounting and legal services, and business
        licenses and fees).
        """
        ...

    @SellingGeneralAndAdministration.setter
    def SellingGeneralAndAdministration(self, value: QuantConnect.Data.Fundamental.SellingGeneralAndAdministrationIncomeStatement):
        """
        The aggregate total costs related to selling a firm's product and services, as well as all other general and administrative expenses.
        Selling expenses are those directly related to the company's efforts to generate sales (e.g., sales salaries, commissions,
        advertising, delivery expenses). General and administrative expenses are expenses related to general administration of the
        company's operation (e.g., officers and office salaries, office supplies, telephone, accounting and legal services, and business
        licenses and fees).
        """
        ...

    @property
    def SpecialIncomeCharges(self) -> QuantConnect.Data.Fundamental.SpecialIncomeChargesIncomeStatement:
        """Earnings or losses attributable to occurrences or actions by the firm that is either infrequent or unusual."""
        ...

    @SpecialIncomeCharges.setter
    def SpecialIncomeCharges(self, value: QuantConnect.Data.Fundamental.SpecialIncomeChargesIncomeStatement):
        """Earnings or losses attributable to occurrences or actions by the firm that is either infrequent or unusual."""
        ...

    @property
    def TotalExpenses(self) -> QuantConnect.Data.Fundamental.TotalExpensesIncomeStatement:
        """
        The sum of operating expense and cost of revenue. If the company does not give the reported number, it will be calculated by
        adding operating expense and cost of revenue.
        """
        ...

    @TotalExpenses.setter
    def TotalExpenses(self, value: QuantConnect.Data.Fundamental.TotalExpensesIncomeStatement):
        """
        The sum of operating expense and cost of revenue. If the company does not give the reported number, it will be calculated by
        adding operating expense and cost of revenue.
        """
        ...

    @property
    def InterestIncome(self) -> QuantConnect.Data.Fundamental.InterestIncomeIncomeStatement:
        """Income generated from interest-bearing deposits or accounts."""
        ...

    @InterestIncome.setter
    def InterestIncome(self, value: QuantConnect.Data.Fundamental.InterestIncomeIncomeStatement):
        """Income generated from interest-bearing deposits or accounts."""
        ...

    @property
    def EBIT(self) -> QuantConnect.Data.Fundamental.EBITIncomeStatement:
        """Earnings minus expenses (excluding interest and tax expenses)."""
        ...

    @EBIT.setter
    def EBIT(self, value: QuantConnect.Data.Fundamental.EBITIncomeStatement):
        """Earnings minus expenses (excluding interest and tax expenses)."""
        ...

    @property
    def EBITDA(self) -> QuantConnect.Data.Fundamental.EBITDAIncomeStatement:
        """Earnings minus expenses (excluding interest, tax, depreciation, and amortization expenses)."""
        ...

    @EBITDA.setter
    def EBITDA(self, value: QuantConnect.Data.Fundamental.EBITDAIncomeStatement):
        """Earnings minus expenses (excluding interest, tax, depreciation, and amortization expenses)."""
        ...

    @property
    def NetIncomeContinuousOperationsNetMinorityInterest(self) -> QuantConnect.Data.Fundamental.NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement:
        """
        Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:
        Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing
        Operation; Income from Tax Loss Carry forward; Other Gains/Losses.
        """
        ...

    @NetIncomeContinuousOperationsNetMinorityInterest.setter
    def NetIncomeContinuousOperationsNetMinorityInterest(self, value: QuantConnect.Data.Fundamental.NetIncomeContinuousOperationsNetMinorityInterestIncomeStatement):
        """
        Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:
        Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing
        Operation; Income from Tax Loss Carry forward; Other Gains/Losses.
        """
        ...

    @property
    def CededPremiums(self) -> QuantConnect.Data.Fundamental.CededPremiumsIncomeStatement:
        """
        The amount of premiums paid and payable to another insurer as a result of reinsurance arrangements in order to exchange for that
        company accepting all or part of insurance on a risk or exposure. This item is usually only available for insurance industry.
        """
        ...

    @CededPremiums.setter
    def CededPremiums(self, value: QuantConnect.Data.Fundamental.CededPremiumsIncomeStatement):
        """
        The amount of premiums paid and payable to another insurer as a result of reinsurance arrangements in order to exchange for that
        company accepting all or part of insurance on a risk or exposure. This item is usually only available for insurance industry.
        """
        ...

    @property
    def CommissionExpenses(self) -> QuantConnect.Data.Fundamental.CommissionExpensesIncomeStatement:
        """"""
        ...

    @CommissionExpenses.setter
    def CommissionExpenses(self, value: QuantConnect.Data.Fundamental.CommissionExpensesIncomeStatement):
        """"""
        ...

    @property
    def CreditCard(self) -> QuantConnect.Data.Fundamental.CreditCardIncomeStatement:
        """
        Income earned from credit card services including late, over limit, and annual fees. This item is usually only available for bank
        industry.
        """
        ...

    @CreditCard.setter
    def CreditCard(self, value: QuantConnect.Data.Fundamental.CreditCardIncomeStatement):
        """
        Income earned from credit card services including late, over limit, and annual fees. This item is usually only available for bank
        industry.
        """
        ...

    @property
    def DividendIncome(self) -> QuantConnect.Data.Fundamental.DividendIncomeIncomeStatement:
        """Dividends earned from equity investment securities. This item is usually only available for bank industry."""
        ...

    @DividendIncome.setter
    def DividendIncome(self, value: QuantConnect.Data.Fundamental.DividendIncomeIncomeStatement):
        """Dividends earned from equity investment securities. This item is usually only available for bank industry."""
        ...

    @property
    def EarningsFromEquityInterest(self) -> QuantConnect.Data.Fundamental.EarningsFromEquityInterestIncomeStatement:
        """
        The earnings from equity interest can be a result of any of the following: Income from earnings distribution of the business, either
        as dividends paid to corporate shareholders or as drawings in a partnership; Capital gain realized upon sale of the business; Capital
        gain realized from selling his or her interest to other partners. This item is usually not available for bank and insurance industries.
        """
        ...

    @EarningsFromEquityInterest.setter
    def EarningsFromEquityInterest(self, value: QuantConnect.Data.Fundamental.EarningsFromEquityInterestIncomeStatement):
        """
        The earnings from equity interest can be a result of any of the following: Income from earnings distribution of the business, either
        as dividends paid to corporate shareholders or as drawings in a partnership; Capital gain realized upon sale of the business; Capital
        gain realized from selling his or her interest to other partners. This item is usually not available for bank and insurance industries.
        """
        ...

    @property
    def Equipment(self) -> QuantConnect.Data.Fundamental.EquipmentIncomeStatement:
        """
        Equipment expenses include depreciation, repairs, rentals, and service contract costs. This also includes equipment purchases
        which do not qualify for capitalization in accordance with the entity's accounting policy. This item may also include furniture
        expenses. This item is usually only available for bank industry.
        """
        ...

    @Equipment.setter
    def Equipment(self, value: QuantConnect.Data.Fundamental.EquipmentIncomeStatement):
        """
        Equipment expenses include depreciation, repairs, rentals, and service contract costs. This also includes equipment purchases
        which do not qualify for capitalization in accordance with the entity's accounting policy. This item may also include furniture
        expenses. This item is usually only available for bank industry.
        """
        ...

    @property
    def ExplorationDevelopmentAndMineralPropertyLeaseExpenses(self) -> QuantConnect.Data.Fundamental.ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement:
        """
        Costs incurred in identifying areas that may warrant examination and in examining specific areas that are considered to have
        prospects of containing energy or metal reserves, including costs of drilling exploratory wells. Development expense is the
        capitalized costs incurred to obtain access to proved reserves and to provide facilities for extracting, treating, gathering and storing
        the energy and metal. Mineral property includes oil and gas wells, mines, and other natural deposits (including geothermal
        deposits). The payment for leasing those properties is called mineral property lease expense. Exploration expense is included in
        operation expenses for mining industry.
        """
        ...

    @ExplorationDevelopmentAndMineralPropertyLeaseExpenses.setter
    def ExplorationDevelopmentAndMineralPropertyLeaseExpenses(self, value: QuantConnect.Data.Fundamental.ExplorationDevelopmentAndMineralPropertyLeaseExpensesIncomeStatement):
        """
        Costs incurred in identifying areas that may warrant examination and in examining specific areas that are considered to have
        prospects of containing energy or metal reserves, including costs of drilling exploratory wells. Development expense is the
        capitalized costs incurred to obtain access to proved reserves and to provide facilities for extracting, treating, gathering and storing
        the energy and metal. Mineral property includes oil and gas wells, mines, and other natural deposits (including geothermal
        deposits). The payment for leasing those properties is called mineral property lease expense. Exploration expense is included in
        operation expenses for mining industry.
        """
        ...

    @property
    def FeesAndCommissions(self) -> QuantConnect.Data.Fundamental.FeesAndCommissionsIncomeStatement:
        """
        Total fees and commissions earned from providing services such as leasing of space or maintaining: (1) depositor accounts; (2)
        transfer agent; (3) fiduciary and trust; (4) brokerage and underwriting; (5) mortgage; (6) credit cards; (7) correspondent clearing;
        and (8) other such services and activities performed for others. This item is usually available for bank and insurance industries.
        """
        ...

    @FeesAndCommissions.setter
    def FeesAndCommissions(self, value: QuantConnect.Data.Fundamental.FeesAndCommissionsIncomeStatement):
        """
        Total fees and commissions earned from providing services such as leasing of space or maintaining: (1) depositor accounts; (2)
        transfer agent; (3) fiduciary and trust; (4) brokerage and underwriting; (5) mortgage; (6) credit cards; (7) correspondent clearing;
        and (8) other such services and activities performed for others. This item is usually available for bank and insurance industries.
        """
        ...

    @property
    def ForeignExchangeTradingGains(self) -> QuantConnect.Data.Fundamental.ForeignExchangeTradingGainsIncomeStatement:
        """
        Trading revenues that result from foreign exchange exposures such as cash instruments and off-balance sheet derivative
        instruments. This item is usually only available for bank industry.
        """
        ...

    @ForeignExchangeTradingGains.setter
    def ForeignExchangeTradingGains(self, value: QuantConnect.Data.Fundamental.ForeignExchangeTradingGainsIncomeStatement):
        """
        Trading revenues that result from foreign exchange exposures such as cash instruments and off-balance sheet derivative
        instruments. This item is usually only available for bank industry.
        """
        ...

    @property
    def Fuel(self) -> QuantConnect.Data.Fundamental.FuelIncomeStatement:
        """
        The aggregate amount of fuel cost for current period associated with the revenue generation. This item is usually only available for
        transportation industry.
        """
        ...

    @Fuel.setter
    def Fuel(self, value: QuantConnect.Data.Fundamental.FuelIncomeStatement):
        """
        The aggregate amount of fuel cost for current period associated with the revenue generation. This item is usually only available for
        transportation industry.
        """
        ...

    @property
    def FuelAndPurchasePower(self) -> QuantConnect.Data.Fundamental.FuelAndPurchasePowerIncomeStatement:
        """Cost of fuel, purchase power and gas associated with revenue generation. This item is usually only available for utility industry."""
        ...

    @FuelAndPurchasePower.setter
    def FuelAndPurchasePower(self, value: QuantConnect.Data.Fundamental.FuelAndPurchasePowerIncomeStatement):
        """Cost of fuel, purchase power and gas associated with revenue generation. This item is usually only available for utility industry."""
        ...

    @property
    def GainOnSaleOfBusiness(self) -> QuantConnect.Data.Fundamental.GainOnSaleOfBusinessIncomeStatement:
        """
        The amount of excess earned in comparison to fair value when selling a business. This item is usually not available for insurance
        industry.
        """
        ...

    @GainOnSaleOfBusiness.setter
    def GainOnSaleOfBusiness(self, value: QuantConnect.Data.Fundamental.GainOnSaleOfBusinessIncomeStatement):
        """
        The amount of excess earned in comparison to fair value when selling a business. This item is usually not available for insurance
        industry.
        """
        ...

    @property
    def GainOnSaleOfPPE(self) -> QuantConnect.Data.Fundamental.GainOnSaleOfPPEIncomeStatement:
        """
        The amount of excess earned in comparison to the net book value for sale of property, plant, equipment. This item is usually not
        available for bank and insurance industries.
        """
        ...

    @GainOnSaleOfPPE.setter
    def GainOnSaleOfPPE(self, value: QuantConnect.Data.Fundamental.GainOnSaleOfPPEIncomeStatement):
        """
        The amount of excess earned in comparison to the net book value for sale of property, plant, equipment. This item is usually not
        available for bank and insurance industries.
        """
        ...

    @property
    def GainOnSaleOfSecurity(self) -> QuantConnect.Data.Fundamental.GainOnSaleOfSecurityIncomeStatement:
        """The amount of excess earned in comparison to the original purchase value of the security."""
        ...

    @GainOnSaleOfSecurity.setter
    def GainOnSaleOfSecurity(self, value: QuantConnect.Data.Fundamental.GainOnSaleOfSecurityIncomeStatement):
        """The amount of excess earned in comparison to the original purchase value of the security."""
        ...

    @property
    def GrossPremiumsWritten(self) -> QuantConnect.Data.Fundamental.GrossPremiumsWrittenIncomeStatement:
        """
        Total premiums generated from all policies written by an insurance company within a given period of time. This item is usually only
        available for insurance industry.
        """
        ...

    @GrossPremiumsWritten.setter
    def GrossPremiumsWritten(self, value: QuantConnect.Data.Fundamental.GrossPremiumsWrittenIncomeStatement):
        """
        Total premiums generated from all policies written by an insurance company within a given period of time. This item is usually only
        available for insurance industry.
        """
        ...

    @property
    def ImpairmentOfCapitalAssets(self) -> QuantConnect.Data.Fundamental.ImpairmentOfCapitalAssetsIncomeStatement:
        """
        Impairments are considered to be permanent, which is a downward revaluation of fixed assets. If the sum of all estimated future
        cash flows is less than the carrying value of the asset, then the asset would be considered impaired and would have to be written
        down to its fair value. Once an asset is written down, it may only be written back up under very few circumstances. Usually the
        company uses the sum of undiscounted future cash flows to determine if the impairment should occur, and uses the sum of
        discounted future cash flows to make the impairment judgment. The impairment decision emphasizes on capital assets' future
        profit collection ability.
        """
        ...

    @ImpairmentOfCapitalAssets.setter
    def ImpairmentOfCapitalAssets(self, value: QuantConnect.Data.Fundamental.ImpairmentOfCapitalAssetsIncomeStatement):
        """
        Impairments are considered to be permanent, which is a downward revaluation of fixed assets. If the sum of all estimated future
        cash flows is less than the carrying value of the asset, then the asset would be considered impaired and would have to be written
        down to its fair value. Once an asset is written down, it may only be written back up under very few circumstances. Usually the
        company uses the sum of undiscounted future cash flows to determine if the impairment should occur, and uses the sum of
        discounted future cash flows to make the impairment judgment. The impairment decision emphasizes on capital assets' future
        profit collection ability.
        """
        ...

    @property
    def IncreaseDecreaseInNetUnearnedPremiumReserves(self) -> QuantConnect.Data.Fundamental.IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement:
        """
        Premium might contain a portion of the amount that has been paid in advance for insurance that has not yet been provided, which
        is called unearned premium. If either party cancels the contract, the insurer must have the unearned premium ready to refund.
        Hence, the amount of premium reserve maintained by insurers is called unearned premium reserves, which is prepared for
        liquidation.  This item is usually only available for insurance industry.
        """
        ...

    @IncreaseDecreaseInNetUnearnedPremiumReserves.setter
    def IncreaseDecreaseInNetUnearnedPremiumReserves(self, value: QuantConnect.Data.Fundamental.IncreaseDecreaseInNetUnearnedPremiumReservesIncomeStatement):
        """
        Premium might contain a portion of the amount that has been paid in advance for insurance that has not yet been provided, which
        is called unearned premium. If either party cancels the contract, the insurer must have the unearned premium ready to refund.
        Hence, the amount of premium reserve maintained by insurers is called unearned premium reserves, which is prepared for
        liquidation.  This item is usually only available for insurance industry.
        """
        ...

    @property
    def InsuranceAndClaims(self) -> QuantConnect.Data.Fundamental.InsuranceAndClaimsIncomeStatement:
        """
        Insurance and claims are the expenses in the period incurred with respect to protection provided by insurance entities against risks
        other than risks associated with production (which is allocated to cost of sales). This item is usually not available for insurance
        industries.
        """
        ...

    @InsuranceAndClaims.setter
    def InsuranceAndClaims(self, value: QuantConnect.Data.Fundamental.InsuranceAndClaimsIncomeStatement):
        """
        Insurance and claims are the expenses in the period incurred with respect to protection provided by insurance entities against risks
        other than risks associated with production (which is allocated to cost of sales). This item is usually not available for insurance
        industries.
        """
        ...

    @property
    def InterestExpenseForDeposit(self) -> QuantConnect.Data.Fundamental.InterestExpenseForDepositIncomeStatement:
        """
        Includes interest expense on the following deposit accounts: Interest-bearing Demand deposit; Checking account; Savings account;
        Deposit in foreign offices; Money Market Certificates & Deposit Accounts. This item is usually only available for bank industry.
        """
        ...

    @InterestExpenseForDeposit.setter
    def InterestExpenseForDeposit(self, value: QuantConnect.Data.Fundamental.InterestExpenseForDepositIncomeStatement):
        """
        Includes interest expense on the following deposit accounts: Interest-bearing Demand deposit; Checking account; Savings account;
        Deposit in foreign offices; Money Market Certificates & Deposit Accounts. This item is usually only available for bank industry.
        """
        ...

    @property
    def InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self) -> QuantConnect.Data.Fundamental.InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement:
        """
        Gross expenses on the purchase of Federal funds at a specified price with a simultaneous agreement to sell the same to the same
        counterparty at a fixed or determinable price at a future date. This item is usually only available for bank industry.
        """
        ...

    @InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell.setter
    def InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self, value: QuantConnect.Data.Fundamental.InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement):
        """
        Gross expenses on the purchase of Federal funds at a specified price with a simultaneous agreement to sell the same to the same
        counterparty at a fixed or determinable price at a future date. This item is usually only available for bank industry.
        """
        ...

    @property
    def InterestExpenseForLongTermDebtAndCapitalSecurities(self) -> QuantConnect.Data.Fundamental.InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement:
        """
        The aggregate interest expenses incurred on long-term borrowings and any interest expenses on fixed assets (property, plant,
        equipment) that are leased due longer than one year. This item is usually only available for bank industry.
        """
        ...

    @InterestExpenseForLongTermDebtAndCapitalSecurities.setter
    def InterestExpenseForLongTermDebtAndCapitalSecurities(self, value: QuantConnect.Data.Fundamental.InterestExpenseForLongTermDebtAndCapitalSecuritiesIncomeStatement):
        """
        The aggregate interest expenses incurred on long-term borrowings and any interest expenses on fixed assets (property, plant,
        equipment) that are leased due longer than one year. This item is usually only available for bank industry.
        """
        ...

    @property
    def InterestExpenseForShortTermDebt(self) -> QuantConnect.Data.Fundamental.InterestExpenseForShortTermDebtIncomeStatement:
        """
        The aggregate interest expenses incurred on short-term borrowings and any interest expenses on fixed assets (property, plant,
        equipment) that are leased within one year. This item is usually only available for bank industry.
        """
        ...

    @InterestExpenseForShortTermDebt.setter
    def InterestExpenseForShortTermDebt(self, value: QuantConnect.Data.Fundamental.InterestExpenseForShortTermDebtIncomeStatement):
        """
        The aggregate interest expenses incurred on short-term borrowings and any interest expenses on fixed assets (property, plant,
        equipment) that are leased within one year. This item is usually only available for bank industry.
        """
        ...

    @property
    def InterestIncomeFromDeposits(self) -> QuantConnect.Data.Fundamental.InterestIncomeFromDepositsIncomeStatement:
        """Interest income generated from all deposit accounts. This item is usually only available for bank industry."""
        ...

    @InterestIncomeFromDeposits.setter
    def InterestIncomeFromDeposits(self, value: QuantConnect.Data.Fundamental.InterestIncomeFromDepositsIncomeStatement):
        """Interest income generated from all deposit accounts. This item is usually only available for bank industry."""
        ...

    @property
    def InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self) -> QuantConnect.Data.Fundamental.InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement:
        """
        The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to
        resell the identical security purchased or a security that meets the definition of ""substantially the same"" in the case of a dollar roll.
        Also includes purchases of participations in pools of securities that are subject to a resale agreement; This category includes all
        interest income generated from federal funds sold and securities purchases under agreements to resell; This category includes all
        interest income generated from federal funds sold and securities purchases under agreements to resell.
        """
        ...

    @InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell.setter
    def InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self, value: QuantConnect.Data.Fundamental.InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellIncomeStatement):
        """
        The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to
        resell the identical security purchased or a security that meets the definition of ""substantially the same"" in the case of a dollar roll.
        Also includes purchases of participations in pools of securities that are subject to a resale agreement; This category includes all
        interest income generated from federal funds sold and securities purchases under agreements to resell; This category includes all
        interest income generated from federal funds sold and securities purchases under agreements to resell.
        """
        ...

    @property
    def InterestIncomeFromLeases(self) -> QuantConnect.Data.Fundamental.InterestIncomeFromLeasesIncomeStatement:
        """Includes interest and fee income generated by direct lease financing. This item is usually only available for bank industry."""
        ...

    @InterestIncomeFromLeases.setter
    def InterestIncomeFromLeases(self, value: QuantConnect.Data.Fundamental.InterestIncomeFromLeasesIncomeStatement):
        """Includes interest and fee income generated by direct lease financing. This item is usually only available for bank industry."""
        ...

    @property
    def InterestIncomeFromLoans(self) -> QuantConnect.Data.Fundamental.InterestIncomeFromLoansIncomeStatement:
        """
        Loan is a common field to banks. Interest Income from Loans is interest and fee income generated from all loans, which includes
        Commercial loans; Credit loans; Other consumer loans; Real Estate - Construction; Real Estate - Mortgage; Foreign loans. Banks
        earn interest from loans. This item is usually only available for bank industry.
        """
        ...

    @InterestIncomeFromLoans.setter
    def InterestIncomeFromLoans(self, value: QuantConnect.Data.Fundamental.InterestIncomeFromLoansIncomeStatement):
        """
        Loan is a common field to banks. Interest Income from Loans is interest and fee income generated from all loans, which includes
        Commercial loans; Credit loans; Other consumer loans; Real Estate - Construction; Real Estate - Mortgage; Foreign loans. Banks
        earn interest from loans. This item is usually only available for bank industry.
        """
        ...

    @property
    def InterestIncomeFromLoansAndLease(self) -> QuantConnect.Data.Fundamental.InterestIncomeFromLoansAndLeaseIncomeStatement:
        """Total interest and fee income generated by loans and lease. This item is usually only available for bank industry."""
        ...

    @InterestIncomeFromLoansAndLease.setter
    def InterestIncomeFromLoansAndLease(self, value: QuantConnect.Data.Fundamental.InterestIncomeFromLoansAndLeaseIncomeStatement):
        """Total interest and fee income generated by loans and lease. This item is usually only available for bank industry."""
        ...

    @property
    def InterestIncomeFromSecurities(self) -> QuantConnect.Data.Fundamental.InterestIncomeFromSecuritiesIncomeStatement:
        """
        Represents total interest and dividend income from U.S. Treasury securities, U.S. government agency and corporation obligations,
        securities issued by states and political subdivisions, other domestic debt securities, foreign debt securities, and equity securities
        (including investments in mutual funds). Excludes interest income from securities held in trading accounts. This item is usually only
        available for bank industry.
        """
        ...

    @InterestIncomeFromSecurities.setter
    def InterestIncomeFromSecurities(self, value: QuantConnect.Data.Fundamental.InterestIncomeFromSecuritiesIncomeStatement):
        """
        Represents total interest and dividend income from U.S. Treasury securities, U.S. government agency and corporation obligations,
        securities issued by states and political subdivisions, other domestic debt securities, foreign debt securities, and equity securities
        (including investments in mutual funds). Excludes interest income from securities held in trading accounts. This item is usually only
        available for bank industry.
        """
        ...

    @property
    def InvestmentBankingProfit(self) -> QuantConnect.Data.Fundamental.InvestmentBankingProfitIncomeStatement:
        """
        Includes (1) underwriting revenue (the spread between the resale price received and the cost of the securities and related
        expenses) generated through the purchasing, distributing and reselling of new issues of securities (alternatively, could be a
        secondary offering of a large block of previously issued securities); and (2) fees earned for mergers, acquisitions, divestitures,
        restructurings, and other types of financial advisory services. This item is usually only available for bank industry.
        """
        ...

    @InvestmentBankingProfit.setter
    def InvestmentBankingProfit(self, value: QuantConnect.Data.Fundamental.InvestmentBankingProfitIncomeStatement):
        """
        Includes (1) underwriting revenue (the spread between the resale price received and the cost of the securities and related
        expenses) generated through the purchasing, distributing and reselling of new issues of securities (alternatively, could be a
        secondary offering of a large block of previously issued securities); and (2) fees earned for mergers, acquisitions, divestitures,
        restructurings, and other types of financial advisory services. This item is usually only available for bank industry.
        """
        ...

    @property
    def MaintenanceAndRepairs(self) -> QuantConnect.Data.Fundamental.MaintenanceAndRepairsIncomeStatement:
        """
        The aggregate amount of maintenance and repair expenses in the current period associated with the revenue generation. Mainly
        for fixed assets. This item is usually only available for transportation industry.
        """
        ...

    @MaintenanceAndRepairs.setter
    def MaintenanceAndRepairs(self, value: QuantConnect.Data.Fundamental.MaintenanceAndRepairsIncomeStatement):
        """
        The aggregate amount of maintenance and repair expenses in the current period associated with the revenue generation. Mainly
        for fixed assets. This item is usually only available for transportation industry.
        """
        ...

    @property
    def NetForeignExchangeGainLoss(self) -> QuantConnect.Data.Fundamental.NetForeignExchangeGainLossIncomeStatement:
        """
        The aggregate foreign currency translation gain or loss (both realized and unrealized) included as part of revenue. This item is
        usually only available for insurance industry.
        """
        ...

    @NetForeignExchangeGainLoss.setter
    def NetForeignExchangeGainLoss(self, value: QuantConnect.Data.Fundamental.NetForeignExchangeGainLossIncomeStatement):
        """
        The aggregate foreign currency translation gain or loss (both realized and unrealized) included as part of revenue. This item is
        usually only available for insurance industry.
        """
        ...

    @property
    def NetOccupancyExpense(self) -> QuantConnect.Data.Fundamental.NetOccupancyExpenseIncomeStatement:
        """
        Occupancy expense may include items, such as depreciation of facilities and equipment, lease expenses, property taxes and
        property and casualty insurance expense. This item is usually only available for bank industry.
        """
        ...

    @NetOccupancyExpense.setter
    def NetOccupancyExpense(self, value: QuantConnect.Data.Fundamental.NetOccupancyExpenseIncomeStatement):
        """
        Occupancy expense may include items, such as depreciation of facilities and equipment, lease expenses, property taxes and
        property and casualty insurance expense. This item is usually only available for bank industry.
        """
        ...

    @property
    def NetPremiumsWritten(self) -> QuantConnect.Data.Fundamental.NetPremiumsWrittenIncomeStatement:
        """Net premiums written are gross premiums written less ceded premiums. This item is usually only available for insurance industry."""
        ...

    @NetPremiumsWritten.setter
    def NetPremiumsWritten(self, value: QuantConnect.Data.Fundamental.NetPremiumsWrittenIncomeStatement):
        """Net premiums written are gross premiums written less ceded premiums. This item is usually only available for insurance industry."""
        ...

    @property
    def NetRealizedGainLossOnInvestments(self) -> QuantConnect.Data.Fundamental.NetRealizedGainLossOnInvestmentsIncomeStatement:
        """
        Gain or loss realized during the period of time for all kinds of investment securities. In might include trading, available-for-sale, or
        held-to-maturity securities. This item is usually only available for insurance industry.
        """
        ...

    @NetRealizedGainLossOnInvestments.setter
    def NetRealizedGainLossOnInvestments(self, value: QuantConnect.Data.Fundamental.NetRealizedGainLossOnInvestmentsIncomeStatement):
        """
        Gain or loss realized during the period of time for all kinds of investment securities. In might include trading, available-for-sale, or
        held-to-maturity securities. This item is usually only available for insurance industry.
        """
        ...

    @property
    def OccupancyAndEquipment(self) -> QuantConnect.Data.Fundamental.OccupancyAndEquipmentIncomeStatement:
        """Includes total expenses of occupancy and equipment. This item is usually only available for bank industry."""
        ...

    @OccupancyAndEquipment.setter
    def OccupancyAndEquipment(self, value: QuantConnect.Data.Fundamental.OccupancyAndEquipmentIncomeStatement):
        """Includes total expenses of occupancy and equipment. This item is usually only available for bank industry."""
        ...

    @property
    def OperationAndMaintenance(self) -> QuantConnect.Data.Fundamental.OperationAndMaintenanceIncomeStatement:
        """
        The aggregate amount of operation and maintenance expenses, which is the one important operating expense for the utility
        industry. It includes any costs related to production and maintenance cost of the property during the revenue generation process.
        This item is usually only available for mining and utility industries.
        """
        ...

    @OperationAndMaintenance.setter
    def OperationAndMaintenance(self, value: QuantConnect.Data.Fundamental.OperationAndMaintenanceIncomeStatement):
        """
        The aggregate amount of operation and maintenance expenses, which is the one important operating expense for the utility
        industry. It includes any costs related to production and maintenance cost of the property during the revenue generation process.
        This item is usually only available for mining and utility industries.
        """
        ...

    @property
    def OtherCustomerServices(self) -> QuantConnect.Data.Fundamental.OtherCustomerServicesIncomeStatement:
        """Represents fees and commissions earned from provide other services. This item is usually only available for bank industry."""
        ...

    @OtherCustomerServices.setter
    def OtherCustomerServices(self, value: QuantConnect.Data.Fundamental.OtherCustomerServicesIncomeStatement):
        """Represents fees and commissions earned from provide other services. This item is usually only available for bank industry."""
        ...

    @property
    def OtherInterestExpense(self) -> QuantConnect.Data.Fundamental.OtherInterestExpenseIncomeStatement:
        """All other interest expense that is not otherwise classified"""
        ...

    @OtherInterestExpense.setter
    def OtherInterestExpense(self, value: QuantConnect.Data.Fundamental.OtherInterestExpenseIncomeStatement):
        """All other interest expense that is not otherwise classified"""
        ...

    @property
    def OtherInterestIncome(self) -> QuantConnect.Data.Fundamental.OtherInterestIncomeIncomeStatement:
        """All other interest income that is not otherwise classified"""
        ...

    @OtherInterestIncome.setter
    def OtherInterestIncome(self, value: QuantConnect.Data.Fundamental.OtherInterestIncomeIncomeStatement):
        """All other interest income that is not otherwise classified"""
        ...

    @property
    def OtherNonInterestExpense(self) -> QuantConnect.Data.Fundamental.OtherNonInterestExpenseIncomeStatement:
        """All other non interest expense that is not otherwise classified"""
        ...

    @OtherNonInterestExpense.setter
    def OtherNonInterestExpense(self, value: QuantConnect.Data.Fundamental.OtherNonInterestExpenseIncomeStatement):
        """All other non interest expense that is not otherwise classified"""
        ...

    @property
    def OtherSpecialCharges(self) -> QuantConnect.Data.Fundamental.OtherSpecialChargesIncomeStatement:
        """All other special charges that are not otherwise classified"""
        ...

    @OtherSpecialCharges.setter
    def OtherSpecialCharges(self, value: QuantConnect.Data.Fundamental.OtherSpecialChargesIncomeStatement):
        """All other special charges that are not otherwise classified"""
        ...

    @property
    def OtherTaxes(self) -> QuantConnect.Data.Fundamental.OtherTaxesIncomeStatement:
        """Any taxes that are not part of income taxes. This item is usually not available for bank and insurance industries."""
        ...

    @OtherTaxes.setter
    def OtherTaxes(self, value: QuantConnect.Data.Fundamental.OtherTaxesIncomeStatement):
        """Any taxes that are not part of income taxes. This item is usually not available for bank and insurance industries."""
        ...

    @property
    def PolicyholderBenefitsCeded(self) -> QuantConnect.Data.Fundamental.PolicyholderBenefitsCededIncomeStatement:
        """
        The provision in current period for future policy benefits, claims, and claims settlement, which is under reinsurance arrangements.
        This item is usually only available for insurance industry.
        """
        ...

    @PolicyholderBenefitsCeded.setter
    def PolicyholderBenefitsCeded(self, value: QuantConnect.Data.Fundamental.PolicyholderBenefitsCededIncomeStatement):
        """
        The provision in current period for future policy benefits, claims, and claims settlement, which is under reinsurance arrangements.
        This item is usually only available for insurance industry.
        """
        ...

    @property
    def PolicyholderBenefitsGross(self) -> QuantConnect.Data.Fundamental.PolicyholderBenefitsGrossIncomeStatement:
        """
        The gross amount of provision in current period for future policyholder benefits, claims, and claims settlement, incurred in the
        claims settlement process before the effects of reinsurance arrangements. This item is usually only available for insurance industry.
        """
        ...

    @PolicyholderBenefitsGross.setter
    def PolicyholderBenefitsGross(self, value: QuantConnect.Data.Fundamental.PolicyholderBenefitsGrossIncomeStatement):
        """
        The gross amount of provision in current period for future policyholder benefits, claims, and claims settlement, incurred in the
        claims settlement process before the effects of reinsurance arrangements. This item is usually only available for insurance industry.
        """
        ...

    @property
    def PolicyholderDividends(self) -> QuantConnect.Data.Fundamental.PolicyholderDividendsIncomeStatement:
        """
        Payments made or credits extended to the insured by the company, usually at the end of a policy year results in reducing the net
        insurance cost to the policyholder. Such dividends may be paid in cash to the insured or applied by the insured as reductions of the
        premiums due for the next policy year. This item is usually only available for insurance industry.
        """
        ...

    @PolicyholderDividends.setter
    def PolicyholderDividends(self, value: QuantConnect.Data.Fundamental.PolicyholderDividendsIncomeStatement):
        """
        Payments made or credits extended to the insured by the company, usually at the end of a policy year results in reducing the net
        insurance cost to the policyholder. Such dividends may be paid in cash to the insured or applied by the insured as reductions of the
        premiums due for the next policy year. This item is usually only available for insurance industry.
        """
        ...

    @property
    def PolicyholderInterest(self) -> QuantConnect.Data.Fundamental.PolicyholderInterestIncomeStatement:
        """
        The periodic income payment provided to the annuitant by the insurance company, which is determined by the assumed interest
        rate (AIR) and other factors. This item is usually only available for insurance industry.
        """
        ...

    @PolicyholderInterest.setter
    def PolicyholderInterest(self, value: QuantConnect.Data.Fundamental.PolicyholderInterestIncomeStatement):
        """
        The periodic income payment provided to the annuitant by the insurance company, which is determined by the assumed interest
        rate (AIR) and other factors. This item is usually only available for insurance industry.
        """
        ...

    @property
    def ProfessionalExpenseAndContractServicesExpense(self) -> QuantConnect.Data.Fundamental.ProfessionalExpenseAndContractServicesExpenseIncomeStatement:
        """
        Professional and contract service expense includes cost reimbursements for support services related to contracted projects,
        outsourced management, technical and staff support. This item is usually only available for bank industry.
        """
        ...

    @ProfessionalExpenseAndContractServicesExpense.setter
    def ProfessionalExpenseAndContractServicesExpense(self, value: QuantConnect.Data.Fundamental.ProfessionalExpenseAndContractServicesExpenseIncomeStatement):
        """
        Professional and contract service expense includes cost reimbursements for support services related to contracted projects,
        outsourced management, technical and staff support. This item is usually only available for bank industry.
        """
        ...

    @property
    def ProvisionForDoubtfulAccounts(self) -> QuantConnect.Data.Fundamental.ProvisionForDoubtfulAccountsIncomeStatement:
        """
        Amount of the current period expense charged against operations, the offset which is generally to the allowance for doubtful
        accounts for the purpose of reducing receivables, including notes receivable, to an amount that approximates their net realizable
        value (the amount expected to be collected). The category includes provision for loan losses, provision for any doubtful account
        receivable, and bad debt expenses. This item is usually not available for bank and insurance industries.
        """
        ...

    @ProvisionForDoubtfulAccounts.setter
    def ProvisionForDoubtfulAccounts(self, value: QuantConnect.Data.Fundamental.ProvisionForDoubtfulAccountsIncomeStatement):
        """
        Amount of the current period expense charged against operations, the offset which is generally to the allowance for doubtful
        accounts for the purpose of reducing receivables, including notes receivable, to an amount that approximates their net realizable
        value (the amount expected to be collected). The category includes provision for loan losses, provision for any doubtful account
        receivable, and bad debt expenses. This item is usually not available for bank and insurance industries.
        """
        ...

    @property
    def RentAndLandingFees(self) -> QuantConnect.Data.Fundamental.RentAndLandingFeesIncomeStatement:
        """
        Rent fees are the cost of occupying space during the accounting period. Landing fees are a change paid to an airport company for
        landing at a particular airport. This item is not available for insurance industry.
        """
        ...

    @RentAndLandingFees.setter
    def RentAndLandingFees(self, value: QuantConnect.Data.Fundamental.RentAndLandingFeesIncomeStatement):
        """
        Rent fees are the cost of occupying space during the accounting period. Landing fees are a change paid to an airport company for
        landing at a particular airport. This item is not available for insurance industry.
        """
        ...

    @property
    def RestructuringAndMergernAcquisition(self) -> QuantConnect.Data.Fundamental.RestructuringAndMergernAcquisitionIncomeStatement:
        """
        Expenses are related to restructuring, merger, or acquisitions. Restructuring expenses are charges associated with the
        consolidation and relocation of operations, disposition or abandonment of operations or productive assets. Merger and acquisition
        expenses are the amount of costs of a business combination including legal, accounting, and other costs that were charged to
        expense during the period.
        """
        ...

    @RestructuringAndMergernAcquisition.setter
    def RestructuringAndMergernAcquisition(self, value: QuantConnect.Data.Fundamental.RestructuringAndMergernAcquisitionIncomeStatement):
        """
        Expenses are related to restructuring, merger, or acquisitions. Restructuring expenses are charges associated with the
        consolidation and relocation of operations, disposition or abandonment of operations or productive assets. Merger and acquisition
        expenses are the amount of costs of a business combination including legal, accounting, and other costs that were charged to
        expense during the period.
        """
        ...

    @property
    def SalariesAndWages(self) -> QuantConnect.Data.Fundamental.SalariesAndWagesIncomeStatement:
        """All salary, wages, compensation, management fees, and employee benefit expenses."""
        ...

    @SalariesAndWages.setter
    def SalariesAndWages(self, value: QuantConnect.Data.Fundamental.SalariesAndWagesIncomeStatement):
        """All salary, wages, compensation, management fees, and employee benefit expenses."""
        ...

    @property
    def SecuritiesActivities(self) -> QuantConnect.Data.Fundamental.SecuritiesActivitiesIncomeStatement:
        """Income/Loss from Securities and Activities"""
        ...

    @SecuritiesActivities.setter
    def SecuritiesActivities(self, value: QuantConnect.Data.Fundamental.SecuritiesActivitiesIncomeStatement):
        """Income/Loss from Securities and Activities"""
        ...

    @property
    def ServiceChargeOnDepositorAccounts(self) -> QuantConnect.Data.Fundamental.ServiceChargeOnDepositorAccountsIncomeStatement:
        """
        Includes any service charges on following accounts: Demand Deposit; Checking account; Savings account; Deposit in foreign
        offices; ESCROW accounts; Money Market Certificates & Deposit accounts, CDs (Negotiable Certificates of Deposits); NOW
        Accounts (Negotiable Order of Withdrawal); IRAs (Individual Retirement Accounts). This item is usually only available for bank
        industry.
        """
        ...

    @ServiceChargeOnDepositorAccounts.setter
    def ServiceChargeOnDepositorAccounts(self, value: QuantConnect.Data.Fundamental.ServiceChargeOnDepositorAccountsIncomeStatement):
        """
        Includes any service charges on following accounts: Demand Deposit; Checking account; Savings account; Deposit in foreign
        offices; ESCROW accounts; Money Market Certificates & Deposit accounts, CDs (Negotiable Certificates of Deposits); NOW
        Accounts (Negotiable Order of Withdrawal); IRAs (Individual Retirement Accounts). This item is usually only available for bank
        industry.
        """
        ...

    @property
    def TradingGainLoss(self) -> QuantConnect.Data.Fundamental.TradingGainLossIncomeStatement:
        """
        A broker-dealer or other financial entity may buy and sell securities exclusively for its own account, sometimes referred to as
        proprietary trading. The profit or loss is measured by the difference between the acquisition cost and the selling price or current
        market or fair value. The net gain or loss, includes both realized and unrealized, from trading cash instruments, equities and
        derivative contracts (including commodity contracts) that has been recognized during the accounting period for the broker dealer or
        other financial entity's own account. This item is typically available for bank industry.
        """
        ...

    @TradingGainLoss.setter
    def TradingGainLoss(self, value: QuantConnect.Data.Fundamental.TradingGainLossIncomeStatement):
        """
        A broker-dealer or other financial entity may buy and sell securities exclusively for its own account, sometimes referred to as
        proprietary trading. The profit or loss is measured by the difference between the acquisition cost and the selling price or current
        market or fair value. The net gain or loss, includes both realized and unrealized, from trading cash instruments, equities and
        derivative contracts (including commodity contracts) that has been recognized during the accounting period for the broker dealer or
        other financial entity's own account. This item is typically available for bank industry.
        """
        ...

    @property
    def TrustFeesbyCommissions(self) -> QuantConnect.Data.Fundamental.TrustFeesbyCommissionsIncomeStatement:
        """
        Bank manages funds on behalf of its customers through the operation of various trust accounts. Any fees earned through managing
        those funds are called trust fees, which are recognized when earned. This item is typically available for bank industry.
        """
        ...

    @TrustFeesbyCommissions.setter
    def TrustFeesbyCommissions(self, value: QuantConnect.Data.Fundamental.TrustFeesbyCommissionsIncomeStatement):
        """
        Bank manages funds on behalf of its customers through the operation of various trust accounts. Any fees earned through managing
        those funds are called trust fees, which are recognized when earned. This item is typically available for bank industry.
        """
        ...

    @property
    def UnderwritingExpenses(self) -> QuantConnect.Data.Fundamental.UnderwritingExpensesIncomeStatement:
        """
        Also known as Policy Acquisition Costs; and reported by insurance companies.  The cost incurred by an insurer when deciding
        whether to accept or decline a risk; may include meetings with the insureds or brokers, actuarial review of loss history, or physical
        inspections of exposures. Also, expenses deducted from insurance company revenues (including incurred losses and acquisition
        costs) to determine underwriting profit.
        """
        ...

    @UnderwritingExpenses.setter
    def UnderwritingExpenses(self, value: QuantConnect.Data.Fundamental.UnderwritingExpensesIncomeStatement):
        """
        Also known as Policy Acquisition Costs; and reported by insurance companies.  The cost incurred by an insurer when deciding
        whether to accept or decline a risk; may include meetings with the insureds or brokers, actuarial review of loss history, or physical
        inspections of exposures. Also, expenses deducted from insurance company revenues (including incurred losses and acquisition
        costs) to determine underwriting profit.
        """
        ...

    @property
    def WriteOff(self) -> QuantConnect.Data.Fundamental.WriteOffIncomeStatement:
        """A reduction in the value of an asset or earnings by the amount of an expense or loss."""
        ...

    @WriteOff.setter
    def WriteOff(self, value: QuantConnect.Data.Fundamental.WriteOffIncomeStatement):
        """A reduction in the value of an asset or earnings by the amount of an expense or loss."""
        ...

    @property
    def OtherNonInterestIncome(self) -> QuantConnect.Data.Fundamental.OtherNonInterestIncomeIncomeStatement:
        """Usually available for the banking industry.  This is Non-Interest Income that is not otherwise classified."""
        ...

    @OtherNonInterestIncome.setter
    def OtherNonInterestIncome(self, value: QuantConnect.Data.Fundamental.OtherNonInterestIncomeIncomeStatement):
        """Usually available for the banking industry.  This is Non-Interest Income that is not otherwise classified."""
        ...

    @property
    def AmortizationOfIntangibles(self) -> QuantConnect.Data.Fundamental.AmortizationOfIntangiblesIncomeStatement:
        """
        The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in
        production) in a systematic and rational manner to the periods expected to benefit from such assets.
        """
        ...

    @AmortizationOfIntangibles.setter
    def AmortizationOfIntangibles(self, value: QuantConnect.Data.Fundamental.AmortizationOfIntangiblesIncomeStatement):
        """
        The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in
        production) in a systematic and rational manner to the periods expected to benefit from such assets.
        """
        ...

    @property
    def NetIncomeFromContinuingAndDiscontinuedOperation(self) -> QuantConnect.Data.Fundamental.NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement:
        """Net Income from Continuing Operations and Discontinued Operations, added together."""
        ...

    @NetIncomeFromContinuingAndDiscontinuedOperation.setter
    def NetIncomeFromContinuingAndDiscontinuedOperation(self, value: QuantConnect.Data.Fundamental.NetIncomeFromContinuingAndDiscontinuedOperationIncomeStatement):
        """Net Income from Continuing Operations and Discontinued Operations, added together."""
        ...

    @property
    def NetIncomeFromTaxLossCarryforward(self) -> QuantConnect.Data.Fundamental.NetIncomeFromTaxLossCarryforwardIncomeStatement:
        """
        Occurs if a company has had a net loss from operations on a previous year that can be carried forward to reduce net income for tax
        purposes.
        """
        ...

    @NetIncomeFromTaxLossCarryforward.setter
    def NetIncomeFromTaxLossCarryforward(self, value: QuantConnect.Data.Fundamental.NetIncomeFromTaxLossCarryforwardIncomeStatement):
        """
        Occurs if a company has had a net loss from operations on a previous year that can be carried forward to reduce net income for tax
        purposes.
        """
        ...

    @property
    def OtherOperatingExpenses(self) -> QuantConnect.Data.Fundamental.OtherOperatingExpensesIncomeStatement:
        """
        The aggregate amount of operating expenses associated with normal operations. Will not include any gain, loss, benefit, or income;
        and its value reported by the company should be <0.
        """
        ...

    @OtherOperatingExpenses.setter
    def OtherOperatingExpenses(self, value: QuantConnect.Data.Fundamental.OtherOperatingExpensesIncomeStatement):
        """
        The aggregate amount of operating expenses associated with normal operations. Will not include any gain, loss, benefit, or income;
        and its value reported by the company should be <0.
        """
        ...

    @property
    def TotalMoneyMarketInvestments(self) -> QuantConnect.Data.Fundamental.TotalMoneyMarketInvestmentsIncomeStatement:
        """The sum of the money market investments held by a bank's depositors, which are FDIC insured."""
        ...

    @TotalMoneyMarketInvestments.setter
    def TotalMoneyMarketInvestments(self, value: QuantConnect.Data.Fundamental.TotalMoneyMarketInvestmentsIncomeStatement):
        """The sum of the money market investments held by a bank's depositors, which are FDIC insured."""
        ...

    @property
    def ReconciledCostOfRevenue(self) -> QuantConnect.Data.Fundamental.ReconciledCostOfRevenueIncomeStatement:
        """
        The Cost Of Revenue plus Depreciation, Depletion & Amortization from the IncomeStatement; minus Depreciation, Depletion &
        Amortization from the Cash Flow Statement
        """
        ...

    @ReconciledCostOfRevenue.setter
    def ReconciledCostOfRevenue(self, value: QuantConnect.Data.Fundamental.ReconciledCostOfRevenueIncomeStatement):
        """
        The Cost Of Revenue plus Depreciation, Depletion & Amortization from the IncomeStatement; minus Depreciation, Depletion &
        Amortization from the Cash Flow Statement
        """
        ...

    @property
    def ReconciledDepreciation(self) -> QuantConnect.Data.Fundamental.ReconciledDepreciationIncomeStatement:
        """Is Depreciation, Depletion & Amortization from the Cash Flow Statement"""
        ...

    @ReconciledDepreciation.setter
    def ReconciledDepreciation(self, value: QuantConnect.Data.Fundamental.ReconciledDepreciationIncomeStatement):
        """Is Depreciation, Depletion & Amortization from the Cash Flow Statement"""
        ...

    @property
    def NormalizedIncome(self) -> QuantConnect.Data.Fundamental.NormalizedIncomeIncomeStatement:
        """
        This calculation represents earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be
        used to fairly measure a company's profitability. This is calculated using Net Income from Continuing Operations plus/minus any tax
        affected unusual Items and Goodwill Impairments/Write Offs.
        """
        ...

    @NormalizedIncome.setter
    def NormalizedIncome(self, value: QuantConnect.Data.Fundamental.NormalizedIncomeIncomeStatement):
        """
        This calculation represents earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be
        used to fairly measure a company's profitability. This is calculated using Net Income from Continuing Operations plus/minus any tax
        affected unusual Items and Goodwill Impairments/Write Offs.
        """
        ...

    @property
    def NetIncomeFromContinuingOperationNetMinorityInterest(self) -> QuantConnect.Data.Fundamental.NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement:
        """
        Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:
        Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing
        Operation; Income from Tax Loss Carry forward; Other Gains/Losses.
        """
        ...

    @NetIncomeFromContinuingOperationNetMinorityInterest.setter
    def NetIncomeFromContinuingOperationNetMinorityInterest(self, value: QuantConnect.Data.Fundamental.NetIncomeFromContinuingOperationNetMinorityInterestIncomeStatement):
        """
        Revenue less expenses and taxes from the entity's ongoing operations net of minority interest and before income (loss) from:
        Preferred Dividends; Extraordinary Gains and Losses; Income from Cumulative Effects of Accounting Change; Discontinuing
        Operation; Income from Tax Loss Carry forward; Other Gains/Losses.
        """
        ...

    @property
    def GainLossonSaleofAssets(self) -> QuantConnect.Data.Fundamental.GainLossonSaleofAssetsIncomeStatement:
        """
        Any gain (loss) recognized on the sale of assets or a sale which generates profit or loss, which is a difference between sales price
        and net book value at the disposal time.
        """
        ...

    @GainLossonSaleofAssets.setter
    def GainLossonSaleofAssets(self, value: QuantConnect.Data.Fundamental.GainLossonSaleofAssetsIncomeStatement):
        """
        Any gain (loss) recognized on the sale of assets or a sale which generates profit or loss, which is a difference between sales price
        and net book value at the disposal time.
        """
        ...

    @property
    def GainonSaleofLoans(self) -> QuantConnect.Data.Fundamental.GainonSaleofLoansIncomeStatement:
        """Gain on sale of any loans investment."""
        ...

    @GainonSaleofLoans.setter
    def GainonSaleofLoans(self, value: QuantConnect.Data.Fundamental.GainonSaleofLoansIncomeStatement):
        """Gain on sale of any loans investment."""
        ...

    @property
    def GainonSaleofInvestmentProperty(self) -> QuantConnect.Data.Fundamental.GainonSaleofInvestmentPropertyIncomeStatement:
        """Gain on the disposal of investment property."""
        ...

    @GainonSaleofInvestmentProperty.setter
    def GainonSaleofInvestmentProperty(self, value: QuantConnect.Data.Fundamental.GainonSaleofInvestmentPropertyIncomeStatement):
        """Gain on the disposal of investment property."""
        ...

    @property
    def LossonExtinguishmentofDebt(self) -> QuantConnect.Data.Fundamental.LossonExtinguishmentofDebtIncomeStatement:
        """
        Loss on extinguishment of debt is the accounting loss that results from a debt extinguishment. A debt shall be accounted for as
        having been extinguished in a number of circumstances, including when it has been settled through repayment or replacement by
        another liability. It generally results in an accounting gain or loss. Amount represents the difference between the fair value of the
        payments made and the carrying amount of the debt at the time of its extinguishment.
        """
        ...

    @LossonExtinguishmentofDebt.setter
    def LossonExtinguishmentofDebt(self, value: QuantConnect.Data.Fundamental.LossonExtinguishmentofDebtIncomeStatement):
        """
        Loss on extinguishment of debt is the accounting loss that results from a debt extinguishment. A debt shall be accounted for as
        having been extinguished in a number of circumstances, including when it has been settled through repayment or replacement by
        another liability. It generally results in an accounting gain or loss. Amount represents the difference between the fair value of the
        payments made and the carrying amount of the debt at the time of its extinguishment.
        """
        ...

    @property
    def EarningsfromEquityInterestNetOfTax(self) -> QuantConnect.Data.Fundamental.EarningsfromEquityInterestNetOfTaxIncomeStatement:
        """Income from other equity interest reported after Provision of Tax. This applies to all industries."""
        ...

    @EarningsfromEquityInterestNetOfTax.setter
    def EarningsfromEquityInterestNetOfTax(self, value: QuantConnect.Data.Fundamental.EarningsfromEquityInterestNetOfTaxIncomeStatement):
        """Income from other equity interest reported after Provision of Tax. This applies to all industries."""
        ...

    @property
    def NetIncomeIncludingNoncontrollingInterests(self) -> QuantConnect.Data.Fundamental.NetIncomeIncludingNoncontrollingInterestsIncomeStatement:
        """Net income of the group after the adjustment of all expenses and benefit."""
        ...

    @NetIncomeIncludingNoncontrollingInterests.setter
    def NetIncomeIncludingNoncontrollingInterests(self, value: QuantConnect.Data.Fundamental.NetIncomeIncludingNoncontrollingInterestsIncomeStatement):
        """Net income of the group after the adjustment of all expenses and benefit."""
        ...

    @property
    def OtherunderPreferredStockDividend(self) -> QuantConnect.Data.Fundamental.OtherunderPreferredStockDividendIncomeStatement:
        """Dividend paid to the preferred shareholders before the common stock shareholders."""
        ...

    @OtherunderPreferredStockDividend.setter
    def OtherunderPreferredStockDividend(self, value: QuantConnect.Data.Fundamental.OtherunderPreferredStockDividendIncomeStatement):
        """Dividend paid to the preferred shareholders before the common stock shareholders."""
        ...

    @property
    def StaffCosts(self) -> QuantConnect.Data.Fundamental.StaffCostsIncomeStatement:
        """Total staff cost which is paid to the employees that is not part of Selling, General, and Administration expense."""
        ...

    @StaffCosts.setter
    def StaffCosts(self, value: QuantConnect.Data.Fundamental.StaffCostsIncomeStatement):
        """Total staff cost which is paid to the employees that is not part of Selling, General, and Administration expense."""
        ...

    @property
    def SocialSecurityCosts(self) -> QuantConnect.Data.Fundamental.SocialSecurityCostsIncomeStatement:
        """Benefits paid to the employees in respect of their work."""
        ...

    @SocialSecurityCosts.setter
    def SocialSecurityCosts(self, value: QuantConnect.Data.Fundamental.SocialSecurityCostsIncomeStatement):
        """Benefits paid to the employees in respect of their work."""
        ...

    @property
    def PensionCosts(self) -> QuantConnect.Data.Fundamental.PensionCostsIncomeStatement:
        """
        The expense that a company incurs each year by providing a pension plan for its employees. Major expenses in the pension cost
        include employer matching contributions and management fees.
        """
        ...

    @PensionCosts.setter
    def PensionCosts(self, value: QuantConnect.Data.Fundamental.PensionCostsIncomeStatement):
        """
        The expense that a company incurs each year by providing a pension plan for its employees. Major expenses in the pension cost
        include employer matching contributions and management fees.
        """
        ...

    @property
    def OtherOperatingIncomeTotal(self) -> QuantConnect.Data.Fundamental.OtherOperatingIncomeTotalIncomeStatement:
        """Total Other Operating Income- including interest income, dividend income and other types of operating income."""
        ...

    @OtherOperatingIncomeTotal.setter
    def OtherOperatingIncomeTotal(self, value: QuantConnect.Data.Fundamental.OtherOperatingIncomeTotalIncomeStatement):
        """Total Other Operating Income- including interest income, dividend income and other types of operating income."""
        ...

    @property
    def IncomefromAssociatesandOtherParticipatingInterests(self) -> QuantConnect.Data.Fundamental.IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement:
        """Total income from the associates and joint venture via investment, accounted for in the Non-Operating section."""
        ...

    @IncomefromAssociatesandOtherParticipatingInterests.setter
    def IncomefromAssociatesandOtherParticipatingInterests(self, value: QuantConnect.Data.Fundamental.IncomefromAssociatesandOtherParticipatingInterestsIncomeStatement):
        """Total income from the associates and joint venture via investment, accounted for in the Non-Operating section."""
        ...

    @property
    def TotalOtherFinanceCost(self) -> QuantConnect.Data.Fundamental.TotalOtherFinanceCostIncomeStatement:
        """Any other finance cost which is not clearly defined in the Non-Operating section."""
        ...

    @TotalOtherFinanceCost.setter
    def TotalOtherFinanceCost(self, value: QuantConnect.Data.Fundamental.TotalOtherFinanceCostIncomeStatement):
        """Any other finance cost which is not clearly defined in the Non-Operating section."""
        ...

    @property
    def GrossDividendPayment(self) -> QuantConnect.Data.Fundamental.GrossDividendPaymentIncomeStatement:
        """Total amount paid in dividends to investors- this includes dividends paid on equity and non-equity shares."""
        ...

    @GrossDividendPayment.setter
    def GrossDividendPayment(self, value: QuantConnect.Data.Fundamental.GrossDividendPaymentIncomeStatement):
        """Total amount paid in dividends to investors- this includes dividends paid on equity and non-equity shares."""
        ...

    @property
    def FeesandCommissionIncome(self) -> QuantConnect.Data.Fundamental.FeesandCommissionIncomeIncomeStatement:
        """Fees and commission income earned by bank and insurance companies on the rendering services."""
        ...

    @FeesandCommissionIncome.setter
    def FeesandCommissionIncome(self, value: QuantConnect.Data.Fundamental.FeesandCommissionIncomeIncomeStatement):
        """Fees and commission income earned by bank and insurance companies on the rendering services."""
        ...

    @property
    def FeesandCommissionExpense(self) -> QuantConnect.Data.Fundamental.FeesandCommissionExpenseIncomeStatement:
        """Cost incurred by bank and insurance companies for fees and commission income."""
        ...

    @FeesandCommissionExpense.setter
    def FeesandCommissionExpense(self, value: QuantConnect.Data.Fundamental.FeesandCommissionExpenseIncomeStatement):
        """Cost incurred by bank and insurance companies for fees and commission income."""
        ...

    @property
    def NetTradingIncome(self) -> QuantConnect.Data.Fundamental.NetTradingIncomeIncomeStatement:
        """Any trading income on the securities."""
        ...

    @NetTradingIncome.setter
    def NetTradingIncome(self, value: QuantConnect.Data.Fundamental.NetTradingIncomeIncomeStatement):
        """Any trading income on the securities."""
        ...

    @property
    def OtherStaffCosts(self) -> QuantConnect.Data.Fundamental.OtherStaffCostsIncomeStatement:
        """Other costs in incurred in lieu of the employees that cannot be identified by other specific items in the Staff Costs section."""
        ...

    @OtherStaffCosts.setter
    def OtherStaffCosts(self, value: QuantConnect.Data.Fundamental.OtherStaffCostsIncomeStatement):
        """Other costs in incurred in lieu of the employees that cannot be identified by other specific items in the Staff Costs section."""
        ...

    @property
    def GainonInvestmentProperties(self) -> QuantConnect.Data.Fundamental.GainonInvestmentPropertiesIncomeStatement:
        """Gain on disposal and change in fair value of investment properties."""
        ...

    @GainonInvestmentProperties.setter
    def GainonInvestmentProperties(self, value: QuantConnect.Data.Fundamental.GainonInvestmentPropertiesIncomeStatement):
        """Gain on disposal and change in fair value of investment properties."""
        ...

    @property
    def AverageDilutionEarnings(self) -> QuantConnect.Data.Fundamental.AverageDilutionEarningsIncomeStatement:
        """
        Adjustments to reported net income to calculate Diluted EPS, by assuming that all convertible instruments are converted to
        Common Equity. The adjustments usually include the interest expense of debentures when assumed converted and preferred
        dividends of convertible preferred stock when assumed converted.
        """
        ...

    @AverageDilutionEarnings.setter
    def AverageDilutionEarnings(self, value: QuantConnect.Data.Fundamental.AverageDilutionEarningsIncomeStatement):
        """
        Adjustments to reported net income to calculate Diluted EPS, by assuming that all convertible instruments are converted to
        Common Equity. The adjustments usually include the interest expense of debentures when assumed converted and preferred
        dividends of convertible preferred stock when assumed converted.
        """
        ...

    @property
    def GainLossonFinancialInstrumentsDesignatedasCashFlowHedges(self) -> QuantConnect.Data.Fundamental.GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement:
        """Gain/Loss through hedging activities."""
        ...

    @GainLossonFinancialInstrumentsDesignatedasCashFlowHedges.setter
    def GainLossonFinancialInstrumentsDesignatedasCashFlowHedges(self, value: QuantConnect.Data.Fundamental.GainLossonFinancialInstrumentsDesignatedasCashFlowHedgesIncomeStatement):
        """Gain/Loss through hedging activities."""
        ...

    @property
    def GainLossonDerecognitionofAvailableForSaleFinancialAssets(self) -> QuantConnect.Data.Fundamental.GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement:
        """Gain/loss on the write-off of financial assets available-for-sale."""
        ...

    @GainLossonDerecognitionofAvailableForSaleFinancialAssets.setter
    def GainLossonDerecognitionofAvailableForSaleFinancialAssets(self, value: QuantConnect.Data.Fundamental.GainLossonDerecognitionofAvailableForSaleFinancialAssetsIncomeStatement):
        """Gain/loss on the write-off of financial assets available-for-sale."""
        ...

    @property
    def NegativeGoodwillImmediatelyRecognized(self) -> QuantConnect.Data.Fundamental.NegativeGoodwillImmediatelyRecognizedIncomeStatement:
        """
        Negative Goodwill recognized in the Income Statement. Negative Goodwill arises where the net assets at the date of acquisition,
        fairly valued, falls below the cost of acquisition.
        """
        ...

    @NegativeGoodwillImmediatelyRecognized.setter
    def NegativeGoodwillImmediatelyRecognized(self, value: QuantConnect.Data.Fundamental.NegativeGoodwillImmediatelyRecognizedIncomeStatement):
        """
        Negative Goodwill recognized in the Income Statement. Negative Goodwill arises where the net assets at the date of acquisition,
        fairly valued, falls below the cost of acquisition.
        """
        ...

    @property
    def GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotal(self) -> QuantConnect.Data.Fundamental.GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement:
        """Gain or loss on derivatives investment due to the fair value adjustment."""
        ...

    @GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotal.setter
    def GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotal(self, value: QuantConnect.Data.Fundamental.GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotalIncomeStatement):
        """Gain or loss on derivatives investment due to the fair value adjustment."""
        ...

    @property
    def ImpairmentLossesReversalsFinancialInstrumentsNet(self) -> QuantConnect.Data.Fundamental.ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement:
        """
        Impairment or reversal of impairment on financial instrument such as derivative. This is a contra account under Total Revenue in
        banks.
        """
        ...

    @ImpairmentLossesReversalsFinancialInstrumentsNet.setter
    def ImpairmentLossesReversalsFinancialInstrumentsNet(self, value: QuantConnect.Data.Fundamental.ImpairmentLossesReversalsFinancialInstrumentsNetIncomeStatement):
        """
        Impairment or reversal of impairment on financial instrument such as derivative. This is a contra account under Total Revenue in
        banks.
        """
        ...

    @property
    def ClaimsandPaidIncurred(self) -> QuantConnect.Data.Fundamental.ClaimsandPaidIncurredIncomeStatement:
        """All reported claims arising out of incidents in that year are considered incurred grouped with claims paid out."""
        ...

    @ClaimsandPaidIncurred.setter
    def ClaimsandPaidIncurred(self, value: QuantConnect.Data.Fundamental.ClaimsandPaidIncurredIncomeStatement):
        """All reported claims arising out of incidents in that year are considered incurred grouped with claims paid out."""
        ...

    @property
    def ReinsuranceRecoveriesClaimsandBenefits(self) -> QuantConnect.Data.Fundamental.ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement:
        """Claim on the reinsurance company and take the benefits."""
        ...

    @ReinsuranceRecoveriesClaimsandBenefits.setter
    def ReinsuranceRecoveriesClaimsandBenefits(self, value: QuantConnect.Data.Fundamental.ReinsuranceRecoveriesClaimsandBenefitsIncomeStatement):
        """Claim on the reinsurance company and take the benefits."""
        ...

    @property
    def ChangeinInsuranceLiabilitiesNetofReinsurance(self) -> QuantConnect.Data.Fundamental.ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement:
        """Income/Expense due to changes between periods in insurance liabilities."""
        ...

    @ChangeinInsuranceLiabilitiesNetofReinsurance.setter
    def ChangeinInsuranceLiabilitiesNetofReinsurance(self, value: QuantConnect.Data.Fundamental.ChangeinInsuranceLiabilitiesNetofReinsuranceIncomeStatement):
        """Income/Expense due to changes between periods in insurance liabilities."""
        ...

    @property
    def ChangeinInvestmentContract(self) -> QuantConnect.Data.Fundamental.ChangeinInvestmentContractIncomeStatement:
        """Income/Expense due to changes between periods in Investment Contracts."""
        ...

    @ChangeinInvestmentContract.setter
    def ChangeinInvestmentContract(self, value: QuantConnect.Data.Fundamental.ChangeinInvestmentContractIncomeStatement):
        """Income/Expense due to changes between periods in Investment Contracts."""
        ...

    @property
    def CreditRiskProvisions(self) -> QuantConnect.Data.Fundamental.CreditRiskProvisionsIncomeStatement:
        """
        Provision for the risk of loss of principal or loss of a financial reward stemming from a borrower's failure to repay a loan or otherwise
        meet a contractual obligation. Credit risk arises whenever a borrower is expecting to use future cash flows to pay a current debt.
        Investors are compensated for assuming credit risk by way of interest payments from the borrower or issuer of a debt obligation.
        This is a contra account under Total Revenue in banks.
        """
        ...

    @CreditRiskProvisions.setter
    def CreditRiskProvisions(self, value: QuantConnect.Data.Fundamental.CreditRiskProvisionsIncomeStatement):
        """
        Provision for the risk of loss of principal or loss of a financial reward stemming from a borrower's failure to repay a loan or otherwise
        meet a contractual obligation. Credit risk arises whenever a borrower is expecting to use future cash flows to pay a current debt.
        Investors are compensated for assuming credit risk by way of interest payments from the borrower or issuer of a debt obligation.
        This is a contra account under Total Revenue in banks.
        """
        ...

    @property
    def WagesandSalaries(self) -> QuantConnect.Data.Fundamental.WagesandSalariesIncomeStatement:
        """This is the portion under Staff Costs that represents salary paid to the employees in respect of their work."""
        ...

    @WagesandSalaries.setter
    def WagesandSalaries(self, value: QuantConnect.Data.Fundamental.WagesandSalariesIncomeStatement):
        """This is the portion under Staff Costs that represents salary paid to the employees in respect of their work."""
        ...

    @property
    def OtherNonOperatingIncomeExpenses(self) -> QuantConnect.Data.Fundamental.OtherNonOperatingIncomeExpensesIncomeStatement:
        """Total other income and expense of the company that cannot be identified by other specific items in the Non-Operating section."""
        ...

    @OtherNonOperatingIncomeExpenses.setter
    def OtherNonOperatingIncomeExpenses(self, value: QuantConnect.Data.Fundamental.OtherNonOperatingIncomeExpensesIncomeStatement):
        """Total other income and expense of the company that cannot be identified by other specific items in the Non-Operating section."""
        ...

    @property
    def OtherNonOperatingIncome(self) -> QuantConnect.Data.Fundamental.OtherNonOperatingIncomeIncomeStatement:
        """Other income of the company that cannot be identified by other specific items in the Non-Operating section."""
        ...

    @OtherNonOperatingIncome.setter
    def OtherNonOperatingIncome(self, value: QuantConnect.Data.Fundamental.OtherNonOperatingIncomeIncomeStatement):
        """Other income of the company that cannot be identified by other specific items in the Non-Operating section."""
        ...

    @property
    def OtherNonOperatingExpenses(self) -> QuantConnect.Data.Fundamental.OtherNonOperatingExpensesIncomeStatement:
        """Other expenses of the company that cannot be identified by other specific items in the Non-Operating section."""
        ...

    @OtherNonOperatingExpenses.setter
    def OtherNonOperatingExpenses(self, value: QuantConnect.Data.Fundamental.OtherNonOperatingExpensesIncomeStatement):
        """Other expenses of the company that cannot be identified by other specific items in the Non-Operating section."""
        ...

    @property
    def TotalUnusualItems(self) -> QuantConnect.Data.Fundamental.TotalUnusualItemsIncomeStatement:
        """Total unusual items including Negative Goodwill."""
        ...

    @TotalUnusualItems.setter
    def TotalUnusualItems(self, value: QuantConnect.Data.Fundamental.TotalUnusualItemsIncomeStatement):
        """Total unusual items including Negative Goodwill."""
        ...

    @property
    def TotalUnusualItemsExcludingGoodwill(self) -> QuantConnect.Data.Fundamental.TotalUnusualItemsExcludingGoodwillIncomeStatement:
        """The sum of all the identifiable operating and non-operating unusual items."""
        ...

    @TotalUnusualItemsExcludingGoodwill.setter
    def TotalUnusualItemsExcludingGoodwill(self, value: QuantConnect.Data.Fundamental.TotalUnusualItemsExcludingGoodwillIncomeStatement):
        """The sum of all the identifiable operating and non-operating unusual items."""
        ...

    @property
    def TaxRateForCalcs(self) -> QuantConnect.Data.Fundamental.TaxRateForCalcsIncomeStatement:
        """Tax rate used for Morningstar calculations."""
        ...

    @TaxRateForCalcs.setter
    def TaxRateForCalcs(self, value: QuantConnect.Data.Fundamental.TaxRateForCalcsIncomeStatement):
        """Tax rate used for Morningstar calculations."""
        ...

    @property
    def TaxEffectOfUnusualItems(self) -> QuantConnect.Data.Fundamental.TaxEffectOfUnusualItemsIncomeStatement:
        """Tax effect of the usual items"""
        ...

    @TaxEffectOfUnusualItems.setter
    def TaxEffectOfUnusualItems(self, value: QuantConnect.Data.Fundamental.TaxEffectOfUnusualItemsIncomeStatement):
        """Tax effect of the usual items"""
        ...

    @property
    def NormalizedEBITDA(self) -> QuantConnect.Data.Fundamental.NormalizedEBITDAIncomeStatement:
        """EBITDA less Total Unusual Items"""
        ...

    @NormalizedEBITDA.setter
    def NormalizedEBITDA(self, value: QuantConnect.Data.Fundamental.NormalizedEBITDAIncomeStatement):
        """EBITDA less Total Unusual Items"""
        ...

    @property
    def StockBasedCompensation(self) -> QuantConnect.Data.Fundamental.StockBasedCompensationIncomeStatement:
        """The cost to the company for granting stock options to reward employees."""
        ...

    @StockBasedCompensation.setter
    def StockBasedCompensation(self, value: QuantConnect.Data.Fundamental.StockBasedCompensationIncomeStatement):
        """The cost to the company for granting stock options to reward employees."""
        ...

    @property
    def ISFileDate(self) -> datetime.datetime:
        """Filing date of the Income Statement."""
        ...

    @ISFileDate.setter
    def ISFileDate(self, value: datetime.datetime):
        """Filing date of the Income Statement."""
        ...

    @property
    def DilutedNIAvailtoComStockholders(self) -> QuantConnect.Data.Fundamental.DilutedNIAvailtoComStockholdersIncomeStatement:
        """
        Net income to calculate Diluted EPS, accounting for adjustments assuming that all the convertible instruments are being converted
        to Common Equity.
        """
        ...

    @DilutedNIAvailtoComStockholders.setter
    def DilutedNIAvailtoComStockholders(self, value: QuantConnect.Data.Fundamental.DilutedNIAvailtoComStockholdersIncomeStatement):
        """
        Net income to calculate Diluted EPS, accounting for adjustments assuming that all the convertible instruments are being converted
        to Common Equity.
        """
        ...

    @property
    def InvestmentContractLiabilitiesIncurred(self) -> QuantConnect.Data.Fundamental.InvestmentContractLiabilitiesIncurredIncomeStatement:
        """Income/Expenses due to the insurer's liabilities incurred in Investment Contracts."""
        ...

    @InvestmentContractLiabilitiesIncurred.setter
    def InvestmentContractLiabilitiesIncurred(self, value: QuantConnect.Data.Fundamental.InvestmentContractLiabilitiesIncurredIncomeStatement):
        """Income/Expenses due to the insurer's liabilities incurred in Investment Contracts."""
        ...

    @property
    def ReinsuranceRecoveriesofInvestmentContract(self) -> QuantConnect.Data.Fundamental.ReinsuranceRecoveriesofInvestmentContractIncomeStatement:
        """Income/Expense due to recoveries from reinsurers for Investment Contracts."""
        ...

    @ReinsuranceRecoveriesofInvestmentContract.setter
    def ReinsuranceRecoveriesofInvestmentContract(self, value: QuantConnect.Data.Fundamental.ReinsuranceRecoveriesofInvestmentContractIncomeStatement):
        """Income/Expense due to recoveries from reinsurers for Investment Contracts."""
        ...

    @property
    def TotalDividendPaymentofEquityShares(self) -> QuantConnect.Data.Fundamental.TotalDividendPaymentofEquitySharesIncomeStatement:
        """Total amount paid in dividends to equity securities investors."""
        ...

    @TotalDividendPaymentofEquityShares.setter
    def TotalDividendPaymentofEquityShares(self, value: QuantConnect.Data.Fundamental.TotalDividendPaymentofEquitySharesIncomeStatement):
        """Total amount paid in dividends to equity securities investors."""
        ...

    @property
    def TotalDividendPaymentofNonEquityShares(self) -> QuantConnect.Data.Fundamental.TotalDividendPaymentofNonEquitySharesIncomeStatement:
        """Total amount paid in dividends to Non-Equity securities investors."""
        ...

    @TotalDividendPaymentofNonEquityShares.setter
    def TotalDividendPaymentofNonEquityShares(self, value: QuantConnect.Data.Fundamental.TotalDividendPaymentofNonEquitySharesIncomeStatement):
        """Total amount paid in dividends to Non-Equity securities investors."""
        ...

    @property
    def ChangeinTheGrossProvisionforUnearnedPremiums(self) -> QuantConnect.Data.Fundamental.ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement:
        """The change in the amount of the unearned premium reserves maintained by insurers."""
        ...

    @ChangeinTheGrossProvisionforUnearnedPremiums.setter
    def ChangeinTheGrossProvisionforUnearnedPremiums(self, value: QuantConnect.Data.Fundamental.ChangeinTheGrossProvisionforUnearnedPremiumsIncomeStatement):
        """The change in the amount of the unearned premium reserves maintained by insurers."""
        ...

    @property
    def ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShare(self) -> QuantConnect.Data.Fundamental.ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement:
        """The change in the amount of unearned premium reserve to be covered by reinsurers."""
        ...

    @ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShare.setter
    def ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShare(self, value: QuantConnect.Data.Fundamental.ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShareIncomeStatement):
        """The change in the amount of unearned premium reserve to be covered by reinsurers."""
        ...

    @property
    def ClaimsandChangeinInsuranceLiabilities(self) -> QuantConnect.Data.Fundamental.ClaimsandChangeinInsuranceLiabilitiesIncomeStatement:
        """Income/Expense due to the insurer's changes in insurance liabilities."""
        ...

    @ClaimsandChangeinInsuranceLiabilities.setter
    def ClaimsandChangeinInsuranceLiabilities(self, value: QuantConnect.Data.Fundamental.ClaimsandChangeinInsuranceLiabilitiesIncomeStatement):
        """Income/Expense due to the insurer's changes in insurance liabilities."""
        ...

    @property
    def ReinsuranceRecoveriesofInsuranceLiabilities(self) -> QuantConnect.Data.Fundamental.ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement:
        """Income/Expense due to recoveries from reinsurers for insurance liabilities."""
        ...

    @ReinsuranceRecoveriesofInsuranceLiabilities.setter
    def ReinsuranceRecoveriesofInsuranceLiabilities(self, value: QuantConnect.Data.Fundamental.ReinsuranceRecoveriesofInsuranceLiabilitiesIncomeStatement):
        """Income/Expense due to recoveries from reinsurers for insurance liabilities."""
        ...

    @property
    def TotalOperatingIncomeAsReported(self) -> QuantConnect.Data.Fundamental.TotalOperatingIncomeAsReportedIncomeStatement:
        """Operating profit/loss as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    @TotalOperatingIncomeAsReported.setter
    def TotalOperatingIncomeAsReported(self, value: QuantConnect.Data.Fundamental.TotalOperatingIncomeAsReportedIncomeStatement):
        """Operating profit/loss as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    @property
    def OtherGA(self) -> QuantConnect.Data.Fundamental.OtherGAIncomeStatement:
        """
        Other General and Administrative Expenses not categorized that the company incurs that are not directly tied to a specific function
        such as manufacturing, production, or sales.
        """
        ...

    @OtherGA.setter
    def OtherGA(self, value: QuantConnect.Data.Fundamental.OtherGAIncomeStatement):
        """
        Other General and Administrative Expenses not categorized that the company incurs that are not directly tied to a specific function
        such as manufacturing, production, or sales.
        """
        ...

    @property
    def OtherCostofRevenue(self) -> QuantConnect.Data.Fundamental.OtherCostofRevenueIncomeStatement:
        """Other costs associated with the revenue-generating activities of the company not categorized above."""
        ...

    @OtherCostofRevenue.setter
    def OtherCostofRevenue(self, value: QuantConnect.Data.Fundamental.OtherCostofRevenueIncomeStatement):
        """Other costs associated with the revenue-generating activities of the company not categorized above."""
        ...

    @property
    def RentandLandingFeesCostofRevenue(self) -> QuantConnect.Data.Fundamental.RentandLandingFeesCostofRevenueIncomeStatement:
        """Costs paid to use the facilities necessary to generate revenue during the accounting period."""
        ...

    @RentandLandingFeesCostofRevenue.setter
    def RentandLandingFeesCostofRevenue(self, value: QuantConnect.Data.Fundamental.RentandLandingFeesCostofRevenueIncomeStatement):
        """Costs paid to use the facilities necessary to generate revenue during the accounting period."""
        ...

    @property
    def DDACostofRevenue(self) -> QuantConnect.Data.Fundamental.DDACostofRevenueIncomeStatement:
        """Costs of depreciation and amortization on assets used for the revenue-generating activities during the accounting period"""
        ...

    @DDACostofRevenue.setter
    def DDACostofRevenue(self, value: QuantConnect.Data.Fundamental.DDACostofRevenueIncomeStatement):
        """Costs of depreciation and amortization on assets used for the revenue-generating activities during the accounting period"""
        ...

    @property
    def RentExpenseSupplemental(self) -> QuantConnect.Data.Fundamental.RentExpenseSupplementalIncomeStatement:
        """
        The sum of all rent expenses incurred by the company for operating leases during the year, it is a supplemental value which would
        be reported outside consolidated statements or consolidated statement's footnotes.
        """
        ...

    @RentExpenseSupplemental.setter
    def RentExpenseSupplemental(self, value: QuantConnect.Data.Fundamental.RentExpenseSupplementalIncomeStatement):
        """
        The sum of all rent expenses incurred by the company for operating leases during the year, it is a supplemental value which would
        be reported outside consolidated statements or consolidated statement's footnotes.
        """
        ...

    @property
    def NormalizedPreTaxIncome(self) -> QuantConnect.Data.Fundamental.NormalizedPreTaxIncomeIncomeStatement:
        """
        This calculation represents pre-tax earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This
        can be used to fairly measure a company's profitability. This is calculated using Pre-Tax Income plus/minus any unusual Items and
        Goodwill Impairments/Write Offs.
        """
        ...

    @NormalizedPreTaxIncome.setter
    def NormalizedPreTaxIncome(self, value: QuantConnect.Data.Fundamental.NormalizedPreTaxIncomeIncomeStatement):
        """
        This calculation represents pre-tax earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This
        can be used to fairly measure a company's profitability. This is calculated using Pre-Tax Income plus/minus any unusual Items and
        Goodwill Impairments/Write Offs.
        """
        ...

    @property
    def ResearchAndDevelopmentExpensesSupplemental(self) -> QuantConnect.Data.Fundamental.ResearchAndDevelopmentExpensesSupplementalIncomeStatement:
        """
        The aggregate amount of research and development expenses during the year. It is a supplemental value which would be reported
        outside consolidated statements.
        """
        ...

    @ResearchAndDevelopmentExpensesSupplemental.setter
    def ResearchAndDevelopmentExpensesSupplemental(self, value: QuantConnect.Data.Fundamental.ResearchAndDevelopmentExpensesSupplementalIncomeStatement):
        """
        The aggregate amount of research and development expenses during the year. It is a supplemental value which would be reported
        outside consolidated statements.
        """
        ...

    @property
    def DepreciationSupplemental(self) -> QuantConnect.Data.Fundamental.DepreciationSupplementalIncomeStatement:
        """
        The current period expense charged against earnings on tangible asset over its useful life. It is a supplemental value which would
        be reported outside consolidated statements.
        """
        ...

    @DepreciationSupplemental.setter
    def DepreciationSupplemental(self, value: QuantConnect.Data.Fundamental.DepreciationSupplementalIncomeStatement):
        """
        The current period expense charged against earnings on tangible asset over its useful life. It is a supplemental value which would
        be reported outside consolidated statements.
        """
        ...

    @property
    def AmortizationSupplemental(self) -> QuantConnect.Data.Fundamental.AmortizationSupplementalIncomeStatement:
        """
        The current period expense charged against earnings on intangible asset over its useful life. It is a supplemental value which would
        be reported outside consolidated statements.
        """
        ...

    @AmortizationSupplemental.setter
    def AmortizationSupplemental(self, value: QuantConnect.Data.Fundamental.AmortizationSupplementalIncomeStatement):
        """
        The current period expense charged against earnings on intangible asset over its useful life. It is a supplemental value which would
        be reported outside consolidated statements.
        """
        ...

    @property
    def TotalRevenueAsReported(self) -> QuantConnect.Data.Fundamental.TotalRevenueAsReportedIncomeStatement:
        """Total revenue as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    @TotalRevenueAsReported.setter
    def TotalRevenueAsReported(self, value: QuantConnect.Data.Fundamental.TotalRevenueAsReportedIncomeStatement):
        """Total revenue as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    @property
    def OperatingExpenseAsReported(self) -> QuantConnect.Data.Fundamental.OperatingExpenseAsReportedIncomeStatement:
        """Operating expense as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    @OperatingExpenseAsReported.setter
    def OperatingExpenseAsReported(self, value: QuantConnect.Data.Fundamental.OperatingExpenseAsReportedIncomeStatement):
        """Operating expense as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    @property
    def NormalizedIncomeAsReported(self) -> QuantConnect.Data.Fundamental.NormalizedIncomeAsReportedIncomeStatement:
        """
        Earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly measure a
        company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's standardized
        definition.
        """
        ...

    @NormalizedIncomeAsReported.setter
    def NormalizedIncomeAsReported(self, value: QuantConnect.Data.Fundamental.NormalizedIncomeAsReportedIncomeStatement):
        """
        Earnings adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly measure a
        company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's standardized
        definition.
        """
        ...

    @property
    def NormalizedEBITDAAsReported(self) -> QuantConnect.Data.Fundamental.NormalizedEBITDAAsReportedIncomeStatement:
        """
        EBITDA less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's
        standardized definition.
        """
        ...

    @NormalizedEBITDAAsReported.setter
    def NormalizedEBITDAAsReported(self, value: QuantConnect.Data.Fundamental.NormalizedEBITDAAsReportedIncomeStatement):
        """
        EBITDA less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's
        standardized definition.
        """
        ...

    @property
    def NormalizedEBITAsReported(self) -> QuantConnect.Data.Fundamental.NormalizedEBITAsReportedIncomeStatement:
        """
        EBIT less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's standardized
        definition.
        """
        ...

    @NormalizedEBITAsReported.setter
    def NormalizedEBITAsReported(self, value: QuantConnect.Data.Fundamental.NormalizedEBITAsReportedIncomeStatement):
        """
        EBIT less Total Unusual Items. This is as reported by the company, may be the same or not the same as Morningstar's standardized
        definition.
        """
        ...

    @property
    def NormalizedOperatingProfitAsReported(self) -> QuantConnect.Data.Fundamental.NormalizedOperatingProfitAsReportedIncomeStatement:
        """
        Operating profit adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly
        measure a company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's
        standardized definition.
        """
        ...

    @NormalizedOperatingProfitAsReported.setter
    def NormalizedOperatingProfitAsReported(self, value: QuantConnect.Data.Fundamental.NormalizedOperatingProfitAsReportedIncomeStatement):
        """
        Operating profit adjusted for items that are irregular or unusual in nature, and/or are non-recurring. This can be used to fairly
        measure a company's profitability. This is as reported by the company, may be the same or not the same as Morningstar's
        standardized definition.
        """
        ...

    @property
    def EffectiveTaxRateAsReported(self) -> QuantConnect.Data.Fundamental.EffectiveTaxRateAsReportedIncomeStatement:
        """
        The average tax rate for the period as reported by the company, may be the same or not the same as Morningstar's standardized
        definition.
        """
        ...

    @EffectiveTaxRateAsReported.setter
    def EffectiveTaxRateAsReported(self, value: QuantConnect.Data.Fundamental.EffectiveTaxRateAsReportedIncomeStatement):
        """
        The average tax rate for the period as reported by the company, may be the same or not the same as Morningstar's standardized
        definition.
        """
        ...

    def __init__(self) -> None:
        """Creates an instance of the IncomeStatement class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.IncomeStatement) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class AccountsPayableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Any money that a company owes its suppliers for goods and services purchased on credit and is expected to pay within the next
    year or operating cycle.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AccountsPayableBalanceSheet class"""
        ...


class AccountsReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AccountsReceivableBalanceSheet class"""
        ...


class CurrentAccruedExpensesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An expense recognized before it is paid for. Includes compensation, interest, pensions and all other miscellaneous accruals
    reported by the company. Expenses incurred during the accounting period, but not required to be paid until a later date.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentAccruedExpensesBalanceSheet class"""
        ...


class NonCurrentAccruedExpensesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An expense that has occurred but the transaction has not been entered in the accounting records. Accordingly, an adjusting entry
    is made to debit the appropriate expense account and to credit a liability account such as accrued expenses payable or accounts
    payable.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentAccruedExpensesBalanceSheet class"""
        ...


class AccruedInvestmentIncomeBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Interest, dividends, rents, ancillary and other revenues earned but not yet received by the entity on its investments."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AccruedInvestmentIncomeBalanceSheet class"""
        ...


class AccumulatedDepreciationBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cumulative amount of wear and tear or obsolescence charged against the fixed assets of a company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AccumulatedDepreciationBalanceSheet class"""
        ...


class GainsLossesNotAffectingRetainedEarningsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate amount of gains or losses that are not part of retained earnings. It is also called other comprehensive income."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainsLossesNotAffectingRetainedEarningsBalanceSheet class"""
        ...


class AdditionalPaidInCapitalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Excess of issue price over par or stated value of the entity's capital stock and amounts received from other transactions involving
    the entity's stock or stockholders. Includes adjustments to additional paid in capital. There are two major categories of additional
    paid in capital: 1) Paid in capital in excess of par/stated value, which is the difference between the actual issue price of the shares
    and the shares' par/stated value. 2) Paid in capital from other transactions which includes treasury stock, retirement of stock, stock
    dividends recorded at market, lapse of stock purchase warrants, conversion of convertible bonds in excess of the par value of the
    stock, and any other additional capital from the company's own stock transactions.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AdditionalPaidInCapitalBalanceSheet class"""
        ...


class AllowanceForLoansAndLeaseLossesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A contra account sets aside as an allowance for bad loans (e.g. customer defaults)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AllowanceForLoansAndLeaseLossesBalanceSheet class"""
        ...


class AvailableForSaleSecuritiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    For an unclassified balance sheet, this item represents equity securities categorized neither as held-to-maturity nor trading. Equity
    securities represent ownership interests or the right to acquire ownership interests in corporations and other legal entities which
    ownership interest is represented by shares of common or preferred stock (which is not mandatory redeemable or redeemable at
    the option of the holder), convertible securities, stock rights, or stock warrants. This category includes preferred stocks, available-
    for-sale and common stock, available-for-sale.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AvailableForSaleSecuritiesBalanceSheet class"""
        ...


class CapitalStockBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The total amount of stock authorized for issue by a corporation, including common and preferred stock."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CapitalStockBalanceSheet class"""
        ...


class CashBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash includes currency on hand as well as demand deposits with banks or financial institutions. It also includes other kinds of
    accounts that have the general characteristics of demand deposits in that the customer may deposit additional funds at any time
    and also effectively may withdraw funds at any time without prior notice or penalty.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashBalanceSheet class"""
        ...


class CashEquivalentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash equivalents, excluding items classified as marketable securities, include short-term, highly liquid investments that are both
    readily convertible to known amounts of cash, and so near their maturity that they present insignificant risk of changes in value
    because of changes in interest rates.  Generally, only investments with original maturities of three months or less qualify under this
    definition. Original maturity means original maturity to the entity holding the investment. For example, both a three-month US
    Treasury bill and a three-year Treasury note purchased three months from maturity qualify as cash equivalents. However, a Treasury
    note purchased three years ago does not become a cash equivalent when its remaining maturity is three months.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashEquivalentsBalanceSheet class"""
        ...


class CashAndCashEquivalentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Includes unrestricted cash on hand, money market instruments and other debt securities which can be converted to cash
    immediately.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashAndCashEquivalentsBalanceSheet class"""
        ...


class CashAndDueFromBanksBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Includes cash on hand (currency and coin), cash items in process of collection, non-interest bearing deposits due from other
    financial institutions (including corporate credit unions), and balances with the Federal Reserve Banks, Federal Home Loan Banks
    and central banks.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashAndDueFromBanksBalanceSheet class"""
        ...


class CashCashEquivalentsAndFederalFundsSoldBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate amount of cash, cash equivalents, and federal funds sold."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashCashEquivalentsAndFederalFundsSoldBalanceSheet class"""
        ...


class CashCashEquivalentsAndMarketableSecuritiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate amount of cash, cash equivalents, and marketable securities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashCashEquivalentsAndMarketableSecuritiesBalanceSheet class"""
        ...


class CommonStockBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Common stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet; i.e. it is one
    component of Common Stockholder's Equity
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommonStockBalanceSheet class"""
        ...


class CurrentAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The total amount of assets considered to be convertible into cash within a relatively short period of time, usually a year."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentAssetsBalanceSheet class"""
        ...


class CurrentDebtBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Represents the total amount of long-term debt such as bank loans and commercial paper, which is due within one year."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentDebtBalanceSheet class"""
        ...


class CurrentDebtAndCapitalLeaseObligationBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    All borrowings due within one year including current portions of long-term debt and capital leases as well as short-term debt such
    as bank loans and commercial paper.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentDebtAndCapitalLeaseObligationBalanceSheet class"""
        ...


class CurrentLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The debts or obligations of the firm that are due within one year."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentLiabilitiesBalanceSheet class"""
        ...


class CurrentCapitalLeaseObligationBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Represents the total amount of long-term capital leases that must be paid within the next accounting PeriodAsByte. Capital lease
    obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentCapitalLeaseObligationBalanceSheet class"""
        ...


class DeferredAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """An amount owed to a firm that is not expected to be received by the firm within one year from the date of the balance sheet."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DeferredAssetsBalanceSheet class"""
        ...


class DeferredCostsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An expenditure not recognized as a cost of operation of the period in which incurred, but carried forward to be written off in future
    periods.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DeferredCostsBalanceSheet class"""
        ...


class NonCurrentDeferredLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Represents the non-current portion of obligations, which is a liability that usually would have been paid but is now past due."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentDeferredLiabilitiesBalanceSheet class"""
        ...


class CurrentDeferredLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Represents the current portion of obligations, which is a liability that usually would have been paid but is now past due."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentDeferredLiabilitiesBalanceSheet class"""
        ...


class DeferredPolicyAcquisitionCostsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net amount of deferred policy acquisition costs capitalized on contracts remaining in force as of the balance sheet date."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DeferredPolicyAcquisitionCostsBalanceSheet class"""
        ...


class CurrentDeferredRevenueBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized.
    Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that
    must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called
    unearned revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentDeferredRevenueBalanceSheet class"""
        ...


class NonCurrentDeferredRevenueBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The non-current portion of deferred revenue amount as of the balance sheet date. Deferred revenue is a liability related to revenue
    producing activity for which revenue has not yet been recognized, and is not expected be recognized in the next twelve months.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentDeferredRevenueBalanceSheet class"""
        ...


class DeferredTaxAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An asset on a company's balance sheet that may be used to reduce any subsequent period's income tax expense. Deferred tax
    assets can arise due to net loss carryovers, which are only recorded as assets if it is deemed more likely than not that the asset
    will be used in future fiscal periods.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DeferredTaxAssetsBalanceSheet class"""
        ...


class CurrentDeferredTaxesAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Meaning a future tax asset, resulting from temporary differences between book (accounting) value of assets and liabilities and their
    tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax
    computation. It is also called future tax.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentDeferredTaxesAssetsBalanceSheet class"""
        ...


class CurrentDeferredTaxesLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Meaning a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and
    their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a
    tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income
    is accrued but not taxed until received.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentDeferredTaxesLiabilitiesBalanceSheet class"""
        ...


class NonCurrentDeferredTaxesAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A result of timing differences between taxable incomes reported on the income statement and taxable income from the company's
    tax return. Depending on the positioning of deferred income taxes, the field may be either current (within current assets) or non-
    current (below total current assets). Typically a company will have two deferred income taxes fields.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentDeferredTaxesAssetsBalanceSheet class"""
        ...


class NonCurrentDeferredTaxesLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The estimated future tax obligations, which usually arise when different accounting methods are used for financial statements and
    tax statement It is also an add-back to the cash flow statement. Deferred income taxes include accumulated tax deferrals due to
    accelerated depreciation and investment credit.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentDeferredTaxesLiabilitiesBalanceSheet class"""
        ...


class EquityInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """This asset represents equity securities categorized neither as held-to-maturity nor trading."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EquityInvestmentsBalanceSheet class"""
        ...


class FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This liability refers to the amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from
    another bank to meet its reserve requirements; and the amount of securities that an institution sells and agrees to repurchase at a
    specified date for a specified price, net of any reductions or offsets.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet class"""
        ...


class FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """This asset refers to very-short-term loans of funds to other banks and securities dealers."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet class"""
        ...


class FixedMaturityInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This asset refers to types of investments that may be contained within the fixed maturity category which securities are having a
    stated final repayment date. Examples of items within this category may include bonds, including convertibles and bonds with
    warrants, and redeemable preferred stocks.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FixedMaturityInvestmentsBalanceSheet class"""
        ...


class FuturePolicyBenefitsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be
    paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions
    regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FuturePolicyBenefitsBalanceSheet class"""
        ...


class GeneralPartnershipCapitalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the general
    partners.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GeneralPartnershipCapitalBalanceSheet class"""
        ...


class GoodwillBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The excess of the cost of an acquired company over the sum of the fair market value of its identifiable individual assets less the
    liabilities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GoodwillBalanceSheet class"""
        ...


class GoodwillAndOtherIntangibleAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Rights or economic benefits, such as patents and goodwill, that is not physical in nature. They are those that are neither physical
    nor financial in nature, nevertheless, have value to the company. Intangibles are listed net of accumulated amortization.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GoodwillAndOtherIntangibleAssetsBalanceSheet class"""
        ...


class GrossLoanBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Represents the sum of all loans (commercial, consumer, mortgage, etc.) as well as leases before any provisions for loan losses or
    unearned discounts.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossLoanBalanceSheet class"""
        ...


class GrossPPEBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying amount at the balance sheet date for long-lived physical assets used in the normal conduct of business and not intended
    for resale. This can include land, physical structures, machinery, vehicles, furniture, computer equipment, construction in progress,
    and similar items. Amount does not include depreciation.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossPPEBalanceSheet class"""
        ...


class HeldToMaturitySecuritiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Debt securities that a firm has the ability and intent to hold until maturity."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the HeldToMaturitySecuritiesBalanceSheet class"""
        ...


class IncomeTaxPayableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A current liability account which reflects the amount of income taxes currently due to the federal, state, and local governments."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IncomeTaxPayableBalanceSheet class"""
        ...


class InterestBearingDepositsLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate of all domestic and foreign deposits in the bank that earns interests."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestBearingDepositsLiabilitiesBalanceSheet class"""
        ...


class InterestPayableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Sum of the carrying values as of the balance sheet date of interest payable on all forms of debt, including trade payable that has
    been incurred.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestPayableBalanceSheet class"""
        ...


class InterestBearingDepositsAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Deposit of money with a financial institution, in consideration of which the financial institution pays or credits interest, or amounts in the nature
    of interest.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestBearingDepositsAssetsBalanceSheet class"""
        ...


class InventoryBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A company's merchandise, raw materials, and finished and unfinished products which have not yet been sold."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InventoryBalanceSheet class"""
        ...


class InvestmentsAndAdvancesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All investments in affiliates, real estate, securities, etc. Non-current investment, not including marketable securities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentsAndAdvancesBalanceSheet class"""
        ...


class LimitedPartnershipCapitalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the limited
    partners.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LimitedPartnershipCapitalBalanceSheet class"""
        ...


class LongTermDebtBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Sum of the carrying values as of the balance sheet date of all long-term debt, which is debt initially having maturities due after one
    year or beyond the operating cycle, if longer, but excluding the portions thereof scheduled to be repaid within one year or the
    normal operating cycle, if longer. Long-term debt includes notes payable, bonds payable, mortgage loans, convertible debt,
    subordinated debt and other types of long term debt.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LongTermDebtBalanceSheet class"""
        ...


class LongTermDebtAndCapitalLeaseObligationBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All borrowings lasting over one year including long-term debt and long-term portion of capital lease obligations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LongTermDebtAndCapitalLeaseObligationBalanceSheet class"""
        ...


class LongTermInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Often referred to simply as "investments". Long-term investments are to be held for many years and are not intended to be
    disposed in the near future. This group usually consists of four types of investments.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LongTermInvestmentsBalanceSheet class"""
        ...


class LongTermCapitalLeaseObligationBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Represents the total liability for long-term leases lasting over one year. Amount equal to the present value (the principal) at the
    beginning of the lease term less lease payments during the lease term.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LongTermCapitalLeaseObligationBalanceSheet class"""
        ...


class MinorityInterestBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of
    the entities included in the reporting entity's consolidated financial statements.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MinorityInterestBalanceSheet class"""
        ...


class MoneyMarketInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Short-term (typical maturity is less than one year), highly liquid government or corporate debt instrument such as bankers'
    acceptance, promissory notes, and treasury bills.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MoneyMarketInvestmentsBalanceSheet class"""
        ...


class NetLoanBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Represents the value of all loans after deduction of the appropriate allowances for loan and lease losses."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetLoanBalanceSheet class"""
        ...


class NetPPEBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for
    administrative purposes and that are expected to provide economic benefit for more than one year; net of accumulated
    depreciation.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetPPEBalanceSheet class"""
        ...


class NonInterestBearingDepositsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate amount of all domestic and foreign deposits in the banks that do not draw interest."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonInterestBearingDepositsBalanceSheet class"""
        ...


class CurrentNotesPayableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Written promises to pay a stated sum at one or more specified dates in the future, within the accounting PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentNotesPayableBalanceSheet class"""
        ...


class NotesReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money
    at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer. Such amount may
    include accrued interest receivable in accordance with the terms of the note. The note also may contain provisions including a
    discount or premium, payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among a myriad of other
    features and characteristics.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NotesReceivableBalanceSheet class"""
        ...


class NonCurrentNoteReceivablesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money
    at a future date(s), excluding the portion that is expected to be received within one year of the balance sheet date or the normal
    operating cycle, whichever is longer.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentNoteReceivablesBalanceSheet class"""
        ...


class OtherCurrentLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Other current liabilities = Total current liabilities - Payables and accrued Expenses - Current debt and capital lease obligation -
    provisions, current - deferred liabilities, current.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCurrentLiabilitiesBalanceSheet class"""
        ...


class OtherIntangibleAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Sum of the carrying amounts of all intangible assets, excluding goodwill."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherIntangibleAssetsBalanceSheet class"""
        ...


class OtherShortTermInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount of short term investments, which will be expired within one year that are not specifically classified as
    Available-for-Sale, Held-to-Maturity,  nor Trading investments.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherShortTermInvestmentsBalanceSheet class"""
        ...


class PayablesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The sum of all payables owed and expected to be paid within one year or one operating cycle, including accounts payables, taxes
    payable, dividends payable and all other current payables.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PayablesBalanceSheet class"""
        ...


class PayablesAndAccruedExpensesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """This balance sheet account includes all current payables and accrued expenses."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PayablesAndAccruedExpensesBalanceSheet class"""
        ...


class PolicyReservesBenefitsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be
    paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions
    regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PolicyReservesBenefitsBalanceSheet class"""
        ...


class PolicyholderFundsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The total liability as of the balance sheet date of amounts due to policy holders, excluding future policy benefits and claims,
    including unpaid policy dividends, retrospective refunds, and undistributed earnings on participating business.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PolicyholderFundsBalanceSheet class"""
        ...


class PreferredSecuritiesOutsideStockEquityBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Preferred securities that that firm treats as a liability. It includes convertible preferred stock or redeemable preferred stock."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreferredSecuritiesOutsideStockEquityBalanceSheet class"""
        ...


class PreferredStockBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Preferred stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreferredStockBalanceSheet class"""
        ...


class PrepaidAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in subsequent periods."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PrepaidAssetsBalanceSheet class"""
        ...


class NonCurrentPrepaidAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in periods after one
    year or beyond the operating cycle, if longer.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentPrepaidAssetsBalanceSheet class"""
        ...


class ReceivablesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The sum of all receivables owed by customers and affiliates within one year, including accounts receivable, notes receivable,
    premiums receivable, and other current receivables.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReceivablesBalanceSheet class"""
        ...


class ReinsuranceRecoverableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount of benefits the ceding insurer expects to recover on insurance policies ceded to other insurance entities as of the
    balance sheet date for all guaranteed benefit types. It includes estimated amounts for claims incurred but not reported, and policy
    benefits, net of any related valuation allowance.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReinsuranceRecoverableBalanceSheet class"""
        ...


class RetainedEarningsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The cumulative net income of the company from the date of its inception (or reorganization) to the date of the financial statement
    less the cumulative distributions to shareholders either directly (dividends) or indirectly (treasury stock).
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RetainedEarningsBalanceSheet class"""
        ...


class SecuritiesLendingCollateralBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying value as of the balance sheet date of the liabilities collateral securities loaned to other broker-dealers. Borrowers of
    securities generally are required to provide collateral to the lenders of securities, commonly cash but sometimes other securities or
    standby letters of credit, with a value slightly higher than that of the securities borrowed.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SecuritiesLendingCollateralBalanceSheet class"""
        ...


class SecurityAgreeToBeResellBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to
    resell the identical security purchased or a security that meets the definition of "substantially the same" in the case of a dollar roll.
    Also includes purchases of participations in pools of securities that are subject to a resale agreement.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SecurityAgreeToBeResellBalanceSheet class"""
        ...


class SecuritySoldNotYetRepurchasedBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Represent obligations of the company to deliver the specified security at the contracted price and, thereby, create a liability to
    purchase the security in the market at prevailing prices.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SecuritySoldNotYetRepurchasedBalanceSheet class"""
        ...


class SeparateAccountAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The fair value of the assets held by the company for the benefit of separate account policyholders."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SeparateAccountAssetsBalanceSheet class"""
        ...


class SeparateAccountBusinessBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Refers to revenue that is generated that is not part of typical operations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SeparateAccountBusinessBalanceSheet class"""
        ...


class ShortTermInvestmentsAvailableForSaleBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The current assets section of a company's balance sheet that contains the investments that a company holds with the purpose for
    trading.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ShortTermInvestmentsAvailableForSaleBalanceSheet class"""
        ...


class ShortTermInvestmentsHeldToMaturityBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The current assets section of a company's balance sheet that contains the investments that a company has made that will expire
    at a fixed date within one year.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ShortTermInvestmentsHeldToMaturityBalanceSheet class"""
        ...


class ShortTermInvestmentsTradingBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The current assets section of a company's balance sheet that contains the investments that a company can trade at any moment."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ShortTermInvestmentsTradingBalanceSheet class"""
        ...


class StockholdersEquityBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The residual interest in the assets of the enterprise that remains after deducting its liabilities. Equity is increased by owners'
    investments and by comprehensive income, and it is reduced by distributions to the owners.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the StockholdersEquityBalanceSheet class"""
        ...


class TotalTaxPayableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A liability that reflects the taxes owed to federal, state, and local tax authorities. It is the carrying value as of the balance sheet
    date of obligations incurred and payable for statutory income, sales, use, payroll, excise, real, property and other taxes.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalTaxPayableBalanceSheet class"""
        ...


class TotalAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount of probable future economic benefits obtained or controlled by a particular enterprise as a result of past
    transactions or events.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalAssetsBalanceSheet class"""
        ...


class TotalDepositsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A liability account which represents the total amount of funds deposited."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalDepositsBalanceSheet class"""
        ...


class TotalInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Asset that refers to the sum of all available for sale securities and other investments often reported on the balance sheet of
    insurance firms.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalInvestmentsBalanceSheet class"""
        ...


class TotalNonCurrentAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Sum of the carrying amounts as of the balance sheet date of all assets that are expected to be realized in cash, sold or consumed
    after one year or beyond the normal operating cycle, if longer.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalNonCurrentAssetsBalanceSheet class"""
        ...


class TotalPartnershipCapitalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Ownership interest of different classes of partners in the publicly listed limited partnership or master limited partnership. Partners
    include general, limited and preferred partners.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalPartnershipCapitalBalanceSheet class"""
        ...


class TradingAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Trading account assets are bought and held principally for the purpose of selling them in the near term (thus held for only a short
    period of time). Unrealized holding gains and losses for trading securities are included in earnings.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TradingAssetsBalanceSheet class"""
        ...


class TradingLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying amount of liabilities as of the balance sheet date that pertain to principal and customer trading transactions, or which
    may be incurred with the objective of generating a profit from short-term fluctuations in price as part of an entity's market-making,
    hedging and proprietary trading. Examples include short positions in securities, derivatives and commodities, obligations under
    repurchase agreements, and securities borrowed arrangements.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TradingLiabilitiesBalanceSheet class"""
        ...


class TradingSecuritiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The total of financial instruments that are bought and held principally for the purpose of selling them in the near term (thus held for
    only a short period of time) or for debt and equity securities formerly categorized as available-for-sale or held-to-maturity which the
    company held as of the date it opted to account for such securities at fair value.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TradingSecuritiesBalanceSheet class"""
        ...


class TreasuryStockBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The portion of shares that a company keeps in their own treasury. Treasury stock may have come from a repurchase or buyback
    from shareholders; or it may have never been issued to the public in the first place. These shares don't pay dividends, have no
    voting rights, and are not included in shares outstanding calculations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TreasuryStockBalanceSheet class"""
        ...


class UnearnedIncomeBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Income received but not yet earned, it represents the unearned amount that is netted against the total loan."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the UnearnedIncomeBalanceSheet class"""
        ...


class UnearnedPremiumsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Carrying amount of premiums written on insurance contracts that have not been earned as of the balance sheet date."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the UnearnedPremiumsBalanceSheet class"""
        ...


class UnpaidLossAndLossReserveBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Liability amount that reflects claims that are expected based upon statistical projections, but which have not been reported to the
    insurer.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the UnpaidLossAndLossReserveBalanceSheet class"""
        ...


class InvestedCapitalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Invested capital = common shareholders' equity + long term debt + current debt"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestedCapitalBalanceSheet class"""
        ...


class CurrentDeferredAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Payments that will be assigned as expenses with one accounting period, but that are paid in advance and temporarily set up as
    current assets on the balance sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentDeferredAssetsBalanceSheet class"""
        ...


class NonCurrentDeferredAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Payments that will be assigned as expenses longer than one accounting period, but that are paid in advance and temporarily set up
    as non-current assets on the balance sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentDeferredAssetsBalanceSheet class"""
        ...


class SecuritiesAndInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Asset, often applicable to Banks, which refers to the aggregate amount of all securities and investments."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SecuritiesAndInvestmentsBalanceSheet class"""
        ...


class TotalLiabilitiesNetMinorityInterestBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Probable future sacrifices of economic benefits arising from present obligations of an enterprise to transfer assets or provide
    services to others in the future as a result of past transactions or events, excluding minority interest.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalLiabilitiesNetMinorityInterestBalanceSheet class"""
        ...


class TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total obligations, net minority interest, incurred as part of normal operations that is expected to be repaid beyond the following
    twelve months or one business cycle; excludes minority interest.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet class"""
        ...


class TotalEquityGrossMinorityInterestBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is
    increased by owners' investments and by comprehensive income, and it is reduced by distributions to the owners.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalEquityGrossMinorityInterestBalanceSheet class"""
        ...


class GrossAccountsReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossAccountsReceivableBalanceSheet class"""
        ...


class NonCurrentAccountsReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Accounts receivable represents sums owed to the business that the business records as revenue. Gross accounts receivable is
    accounts receivable before the business deducts uncollectable accounts to calculate the true value of accounts receivable.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentAccountsReceivableBalanceSheet class"""
        ...


class AccruedInterestReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This account shows the amount of unpaid interest accrued to the date of purchase and included in the purchase price of securities
    purchased between interest dates.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AccruedInterestReceivableBalanceSheet class"""
        ...


class AdvanceFromFederalHomeLoanBanksBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This item is typically available for bank industry. It's the amount of borrowings as of the balance sheet date from the Federal Home
    Loan Bank, which are primarily used to cover shortages in the required reserve balance and liquidity shortages.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AdvanceFromFederalHomeLoanBanksBalanceSheet class"""
        ...


class AllowanceForDoubtfulAccountsReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """An Allowance for Doubtful Accounts measures receivables recorded but not expected to be collected."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AllowanceForDoubtfulAccountsReceivableBalanceSheet class"""
        ...


class AllowanceForNotesReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This item is typically available for bank industry. It represents a provision relating to a written agreement to receive money  with the
    terms of the note (at a specified future date(s) within one year from the reporting date (or the normal operating cycle, whichever is
    longer), consisting of principal as well as any accrued interest) for the portion that is expected to be uncollectible.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AllowanceForNotesReceivableBalanceSheet class"""
        ...


class AssetsHeldForSaleBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """This item is typically available for bank industry. It's a part of long-lived assets, which has been decided for sale in the future."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AssetsHeldForSaleBalanceSheet class"""
        ...


class AssetsOfDiscontinuedOperationsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A portion of a company's business that has been disposed of or sold."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AssetsOfDiscontinuedOperationsBalanceSheet class"""
        ...


class BankIndebtednessBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    All indebtedness for borrowed money or the deferred purchase price of property or services, including without limitation
    reimbursement and other obligations with respect to surety bonds and letters of credit, all obligations evidenced by notes, bonds
    debentures or similar instruments, all capital lease obligations and all contingent obligations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BankIndebtednessBalanceSheet class"""
        ...


class BankOwnedLifeInsuranceBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying amount of a life insurance policy on an officer, executive or employee for which the reporting entity (a bank) is entitled
    to proceeds from the policy upon death of the insured or surrender of the insurance policy.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BankOwnedLifeInsuranceBalanceSheet class"""
        ...


class SecurityBorrowedBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The securities borrowed or on loan, which is the temporary loan of securities by a lender to a borrower in exchange for cash.  This
    item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SecurityBorrowedBalanceSheet class"""
        ...


class BuildingsAndImprovementsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Fixed assets that specifically deal with the facilities a company owns. Include the improvements associated with buildings."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BuildingsAndImprovementsBalanceSheet class"""
        ...


class CommercialLoanBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Short-term loan, typically 90 days, used by a company to finance seasonal working capital needs."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommercialLoanBalanceSheet class"""
        ...


class CommercialPaperBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Commercial paper is a money-market security issued by large banks and corporations. It represents the current obligation for the
    company. There are four basic kinds of commercial paper: promissory notes, drafts, checks, and certificates of deposit. The
    maturities of these money market securities generally do not exceed 270 days.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommercialPaperBalanceSheet class"""
        ...


class CommonStockEquityBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The portion of the Stockholders' Equity that reflects the amount of common stock, which are units of ownership."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommonStockEquityBalanceSheet class"""
        ...


class ConstructionInProgressBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    It represents carrying amount of long-lived asset under construction that includes construction costs to date on capital projects.
    Assets constructed, but not completed.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ConstructionInProgressBalanceSheet class"""
        ...


class ConsumerLoanBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A loan that establishes consumer credit that is granted for personal use; usually unsecured and based on the borrower's integrity
    and ability to pay.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ConsumerLoanBalanceSheet class"""
        ...


class MinimumPensionLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The company's minimum pension obligations to its former employees, paid into a defined pension plan to satisfy all pension
    entitlements that have been earned by employees to date.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MinimumPensionLiabilitiesBalanceSheet class"""
        ...


class CustomerAcceptancesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Amounts receivable from customers on short-term negotiable time drafts drawn on and accepted by the institution (also known as
    banker's acceptance transactions) that are outstanding on the reporting date.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CustomerAcceptancesBalanceSheet class"""
        ...


class DefinedPensionBenefitBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The recognition of an asset where pension fund assets exceed promised benefits."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DefinedPensionBenefitBalanceSheet class"""
        ...


class DerivativeProductLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Fair values of all liabilities resulting from contracts that meet the criteria of being accounted for as derivative instruments; and
    which are expected to be extinguished or otherwise disposed of after one year or beyond the normal operating cycle.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DerivativeProductLiabilitiesBalanceSheet class"""
        ...


class DerivativeAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Fair values of assets resulting from contracts that meet the criteria of being accounted for as derivative instruments, net of the
    effects of master netting arrangements.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DerivativeAssetsBalanceSheet class"""
        ...


class DividendsPayableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Sum of the carrying values of dividends declared but unpaid on equity securities issued and outstanding (also includes dividends
    collected on behalf of another owner of securities that are being held by entity) by the entity.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DividendsPayableBalanceSheet class"""
        ...


class EmployeeBenefitsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying amount as of the balance sheet date of the portion of the obligations recognized for the various benefits provided to former
    or inactive employees, their beneficiaries, and covered dependents after employment but before retirement.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EmployeeBenefitsBalanceSheet class"""
        ...


class FederalFundsPurchasedBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount borrowed by a bank, at the federal funds rate, from another bank to meet its reserve requirements.  This item is
    typically available for the bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FederalFundsPurchasedBalanceSheet class"""
        ...


class FederalFundsSoldBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Federal funds transactions involve lending (federal funds sold) or borrowing (federal funds purchased) of immediately available
    reserve balances.  This item is typically available for the bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FederalFundsSoldBalanceSheet class"""
        ...


class FederalHomeLoanBankStockBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Federal Home Loan Bank stock represents an equity interest in a FHLB. It does not have a readily determinable fair value because
    its ownership is restricted and it lacks a market (liquidity).  This item is typically available for the bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FederalHomeLoanBankStockBalanceSheet class"""
        ...


class FinancialAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Fair values as of the balance sheet date of all assets resulting from contracts that meet the criteria of being accounted for as
    derivative instruments, net of the effects of master netting arrangements.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancialAssetsBalanceSheet class"""
        ...


class FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying value as of the balance sheet date of securities that an institution sells and agrees to repurchase (the identical or
    substantially the same securities) as a seller-borrower at a specified date for a specified price, also known as a repurchase
    agreement.  This item is typically available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet class"""
        ...


class FinishedGoodsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying amount as of the balance sheet date of merchandise or goods held by the company that are readily available for sale.
    This item is typically available for mining and manufacturing industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinishedGoodsBalanceSheet class"""
        ...


class FlightFleetVehicleAndRelatedEquipmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    It is one of the important fixed assets for transportation industry, which includes bicycles, cars, motorcycles, trains, ships, boats,
    and aircraft.  This item is typically available for transportation industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FlightFleetVehicleAndRelatedEquipmentsBalanceSheet class"""
        ...


class ForeclosedAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying amount as of the balance sheet date of all assets obtained in full or partial satisfaction of a debt arrangement through
    foreclosure proceedings or defeasance; includes real and personal property; equity interests in corporations, partnerships, and joint
    ventures; and beneficial interest in trusts.  This item is typically typically available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ForeclosedAssetsBalanceSheet class"""
        ...


class ForeignCurrencyTranslationAdjustmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Changes to accumulated comprehensive income that results from the process of translating subsidiary financial statements and
    foreign equity investments into functional currency of the reporting company.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ForeignCurrencyTranslationAdjustmentsBalanceSheet class"""
        ...


class InventoriesAdjustmentsAllowancesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This item represents certain charges made in the current period in inventory resulting from such factors as breakage, spoilage,
    employee theft and shoplifting. This item is typically available for manufacturing, mining and utility industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InventoriesAdjustmentsAllowancesBalanceSheet class"""
        ...


class InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This item represents the carrying amount on the company's balance sheet of its investments in common stock of an equity method.
    This item is typically available for the insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet class"""
        ...


class LandAndImprovementsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Fixed Assets that specifically deal with land a company owns. Includes the improvements associated with land. This excludes land
    held for sale.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LandAndImprovementsBalanceSheet class"""
        ...


class LeasesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying amount at the balance sheet date of a long-lived, depreciable asset that is an addition or improvement to assets held
    under lease arrangement. This item is usually not available for the insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LeasesBalanceSheet class"""
        ...


class LiabilitiesOfDiscontinuedOperationsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The obligations arising from the sale, disposal, or planned sale in the near future (generally within one year) of a disposal group,
    including a component of the entity (discontinued operation). This item is typically available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LiabilitiesOfDiscontinuedOperationsBalanceSheet class"""
        ...


class LineOfCreditBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying value as of the balance sheet date of obligations drawn from a line of credit, which is a bank's commitment to make
    loans up to a specific amount.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LineOfCreditBalanceSheet class"""
        ...


class LoansHeldForSaleBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    It means the aggregate amount of loans receivable that will be sold to other entities.  This item is typically available for bank
    industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LoansHeldForSaleBalanceSheet class"""
        ...


class LoansReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Reflects the carrying amount of unpaid loans issued to other institutions for cash needs or an asset purchase."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LoansReceivableBalanceSheet class"""
        ...


class MachineryFurnitureEquipmentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Fixed assets specifically dealing with tools, equipment and office furniture. This item is usually not available for the insurance and
    utility industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MachineryFurnitureEquipmentBalanceSheet class"""
        ...


class MaterialsAndSuppliesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Aggregated amount of unprocessed materials to be used in manufacturing or production process and supplies that will be
    consumed. This item is typically available for the utility industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MaterialsAndSuppliesBalanceSheet class"""
        ...


class MineralPropertiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A fixed asset that represents strictly mineral type properties.  This item is typically available for mining industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MineralPropertiesBalanceSheet class"""
        ...


class MortgageLoanBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """This is a lien on real estate to protect a lender.  This item is typically available for bank industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MortgageLoanBalanceSheet class"""
        ...


class MortgageAndConsumerloansBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """It means the aggregate amount of mortgage and consumer loans.  This item is typically available for the insurance industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MortgageAndConsumerloansBalanceSheet class"""
        ...


class GrossNotesReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money
    at a future date(s) within one year of the balance sheet date or the normal operating cycle. Such amount may include accrued
    interest receivable in accordance with the terms of the note. The note also may contain provisions including a discount or premium,
    payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among myriad other features and
    characteristics. This item is typically available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossNotesReceivableBalanceSheet class"""
        ...


class OtherAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other non-current assets that are not otherwise classified."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherAssetsBalanceSheet class"""
        ...


class OtherCapitalStockBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other Capital Stock that is not otherwise classified."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCapitalStockBalanceSheet class"""
        ...


class OtherCurrentAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other current assets that are not otherwise classified."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCurrentAssetsBalanceSheet class"""
        ...


class OtherCurrentBorrowingsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Short Term Borrowings that are not otherwise classified."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCurrentBorrowingsBalanceSheet class"""
        ...


class OtherEquityAdjustmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other adjustments to stockholders' equity that is not otherwise classified, including other reserves."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherEquityAdjustmentsBalanceSheet class"""
        ...


class OtherInventoriesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other non-current inventories not otherwise classified."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherInventoriesBalanceSheet class"""
        ...


class OtherInvestedAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An item represents all the other investments or/and securities that cannot be defined into any category above. This item is typically
    available for the insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherInvestedAssetsBalanceSheet class"""
        ...


class OtherNonCurrentAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other non-current assets that are not otherwise classified."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherNonCurrentAssetsBalanceSheet class"""
        ...


class OtherPropertiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other fixed assets not otherwise classified."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherPropertiesBalanceSheet class"""
        ...


class OtherRealEstateOwnedBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The Carrying amount as of the balance sheet date of other real estate, which may include real estate investments, real estate loans
    that qualify as investments in real estate, and premises that are no longer used in operations may also be included in real estate
    owned. This does not include real estate assets taken in settlement of troubled loans through surrender or foreclosure.  This item is
    typically available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherRealEstateOwnedBalanceSheet class"""
        ...


class OtherReceivablesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other non-current receivables not otherwise classified."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherReceivablesBalanceSheet class"""
        ...


class NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral.  This item is usually
    only available in the insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet class"""
        ...


class PolicyLoansBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral. This item is usually
    only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PolicyLoansBalanceSheet class"""
        ...


class PreferredStockEquityBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A class of ownership in a company that has a higher claim on the assets and earnings than common stock. Preferred stock
    generally has a dividend that must be paid out before dividends to common stockholders and the shares usually do not have voting
    rights.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreferredStockEquityBalanceSheet class"""
        ...


class PropertiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for
    administrative purposes and that are expected to provide economic benefit for more than one year. This item is available for
    manufacturing, bank and transportation industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PropertiesBalanceSheet class"""
        ...


class CurrentProvisionsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory
    action or measure. Current provision is expired within one accounting PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentProvisionsBalanceSheet class"""
        ...


class LongTermProvisionsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory
    action or measure. Long-term provision is expired beyond one accounting PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LongTermProvisionsBalanceSheet class"""
        ...


class RawMaterialsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying amount as of the balance sheet data of unprocessed items to be consumed in the manufacturing or production process.
    This item is available for manufacturing and mining industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RawMaterialsBalanceSheet class"""
        ...


class ReceivablesAdjustmentsAllowancesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A provision relating to a written agreement to receive money at a specified future date(s) (within one year from the reporting date
    or the normal operating cycle, whichever is longer), consisting of principal as well as any accrued interest).
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReceivablesAdjustmentsAllowancesBalanceSheet class"""
        ...


class RegulatoryAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying amount as of the balance sheet date of capitalized costs of regulated entities that are expected to be recovered through
    revenue sources over one year or beyond the normal operating cycle.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RegulatoryAssetsBalanceSheet class"""
        ...


class RegulatoryLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount for the individual regulatory noncurrent liability as itemized in a table of regulatory noncurrent liabilities as of the end of
    the PeriodAsByte. Such things as the costs of energy efficiency programs and low-income energy assistances programs and deferred fuel.
    This item is usually only available for utility industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RegulatoryLiabilitiesBalanceSheet class"""
        ...


class ReinsuranceBalancesPayableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying amount as of the balance sheet date of the known and estimated amounts owed to insurers under reinsurance
    treaties or other arrangements. This item is usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReinsuranceBalancesPayableBalanceSheet class"""
        ...


class RestrictedCashBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying amounts of cash and cash equivalent items, which are restricted as to withdrawal or usage. Restrictions may include
    legally restricted deposits held as compensating balances against short-term borrowing arrangements, contracts entered into with
    others, or entity statements of intention with regard to particular deposits; however, time deposits and short-term certificates of
    deposit are not generally included in legally restricted deposits. Excludes compensating balance arrangements that are not
    agreements, which legally restrict the use of cash amounts shown on the balance sheet. For a classified balance sheet, represents
    the current portion only (the non-current portion has a separate concept); for an unclassified balance sheet represents the entire
    amount. This item is usually not available for bank and insurance industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RestrictedCashBalanceSheet class"""
        ...


class RestrictedCashAndCashEquivalentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying amounts of cash and cash equivalent items which are restricted as to withdrawal or usage. This item is available for
    bank and insurance industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RestrictedCashAndCashEquivalentsBalanceSheet class"""
        ...


class RestrictedCashAndInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The cash and investments whose use in whole or in part is restricted for the long-term, generally by contractual agreements or
    regulatory requirements. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RestrictedCashAndInvestmentsBalanceSheet class"""
        ...


class RestrictedCommonStockBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Shares of stock for which sale is contractually or governmentally restricted for a given period of time. Stock that is acquired through
    an employee stock option plan or other private means may not be transferred. Restricted stock must be traded in compliance with
    special SEC regulations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RestrictedCommonStockBalanceSheet class"""
        ...


class RestrictedInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Investments whose use is restricted in whole or in part, generally by contractual agreements or regulatory requirements. This item
    is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RestrictedInvestmentsBalanceSheet class"""
        ...


class TaxesReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the
    balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes. This item is
    usually not available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxesReceivableBalanceSheet class"""
        ...


class TotalCapitalizationBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Stockholder's Equity plus Long Term Debt."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalCapitalizationBalanceSheet class"""
        ...


class TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Revenue received by a firm but not yet reported as income.  This item is usually only available for utility industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet class"""
        ...


class UnbilledReceivablesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Revenues that are not currently billed from the customer under the terms of the contract.  This item is usually only available for
    utility industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the UnbilledReceivablesBalanceSheet class"""
        ...


class UnrealizedGainLossBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A profit or loss that results from holding onto an asset rather than cashing it in and officially taking the profit or loss."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the UnrealizedGainLossBalanceSheet class"""
        ...


class WorkInProcessBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Work, or goods, in the process of being fabricated or manufactured but not yet completed as finished goods. This item is usually
    available for manufacturing and mining industries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the WorkInProcessBalanceSheet class"""
        ...


class OtherNonCurrentLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """This item is usually not available for bank and insurance industries."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherNonCurrentLiabilitiesBalanceSheet class"""
        ...


class CapitalLeaseObligationsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Current Portion of Capital Lease Obligation plus Long Term Portion of Capital Lease Obligation."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CapitalLeaseObligationsBalanceSheet class"""
        ...


class OtherLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """This item is available for bank and insurance industries."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherLiabilitiesBalanceSheet class"""
        ...


class OtherPayableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Payables and Accrued Expenses that are not defined as Trade, Tax or Dividends related."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherPayableBalanceSheet class"""
        ...


class TangibleBookValueBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The company's total book value less the value of any intangible assets.
    Methodology: Common Stock Equity minus Goodwill and Other Intangible Assets
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TangibleBookValueBalanceSheet class"""
        ...


class TotalEquityBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total Equity equals Preferred Stock Equity + Common Stock Equity."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalEquityBalanceSheet class"""
        ...


class WorkingCapitalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Current Assets minus Current Liabilities.  This item is usually not available for bank and insurance industries."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the WorkingCapitalBalanceSheet class"""
        ...


class TotalDebtBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All borrowings incurred by the company including debt and capital lease obligations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalDebtBalanceSheet class"""
        ...


class CommonUtilityPlantBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The amount for the other plant related to the utility industry fix assets."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommonUtilityPlantBalanceSheet class"""
        ...


class ElectricUtilityPlantBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The amount for the electric plant related to the utility industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ElectricUtilityPlantBalanceSheet class"""
        ...


class NaturalGasFuelAndOtherBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount for the natural gas, fuel and other items related to the utility industry, which might include oil and gas wells, the
    properties to exploit oil and gas or liquefied natural gas sites.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NaturalGasFuelAndOtherBalanceSheet class"""
        ...


class NetUtilityPlantBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Net utility plant might include water production, electric utility plan, natural gas, fuel and other, common utility plant and
    accumulated depreciation. This item is usually only available for utility industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetUtilityPlantBalanceSheet class"""
        ...


class WaterProductionBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount for a facility and plant that provides water which might include wells, reservoirs, pumping stations, and control
    facilities; and waste water systems which includes the waste treatment and disposal facility and equipment. This item is usually
    only available for utility industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the WaterProductionBalanceSheet class"""
        ...


class OrdinarySharesNumberBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Number of Common or Ordinary Shares."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OrdinarySharesNumberBalanceSheet class"""
        ...


class PreferredSharesNumberBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Number of Preferred Shares."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreferredSharesNumberBalanceSheet class"""
        ...


class TreasurySharesNumberBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Number of Treasury Shares."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TreasurySharesNumberBalanceSheet class"""
        ...


class TradingAndOtherReceivableBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This will serve as the "parent" value to AccountsReceivable (DataId 23001) and OtherReceivables (DataId 23342) for all company
    financials reported in the IFRS GAAP.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TradingAndOtherReceivableBalanceSheet class"""
        ...


class EquityAttributableToOwnersOfParentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EquityAttributableToOwnersOfParentBalanceSheet class"""
        ...


class SecuritiesLoanedBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The carrying value as of the balance sheet date of securities loaned to other broker dealers, typically used by such parties to cover
    short sales, secured by cash or other securities furnished by such parties until the borrowing is closed.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SecuritiesLoanedBalanceSheet class"""
        ...


class NetTangibleAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net assets in physical form. This is calculated using Stockholders' Equity less Intangible Assets (including Goodwill)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetTangibleAssetsBalanceSheet class"""
        ...


class DuefromRelatedPartiesCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Amounts owed to the company from a non-arm's length entity, due within the company's current operating cycle."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DuefromRelatedPartiesCurrentBalanceSheet class"""
        ...


class DuefromRelatedPartiesNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Amounts owed to the company from a non-arm's length entity, due after the company's current operating cycle."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DuefromRelatedPartiesNonCurrentBalanceSheet class"""
        ...


class DuetoRelatedPartiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Amounts owed by the company to a non-arm's length entity."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DuetoRelatedPartiesBalanceSheet class"""
        ...


class DuetoRelatedPartiesCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Amounts owed by the company to a non-arm's length entity that has to be repaid within the company's current operating cycle."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DuetoRelatedPartiesCurrentBalanceSheet class"""
        ...


class DuetoRelatedPartiesNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Amounts owed by the company to a non-arm's length entity that has to be repaid after the company's current operating cycle."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DuetoRelatedPartiesNonCurrentBalanceSheet class"""
        ...


class InvestmentPropertiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Company's investments in properties net of accumulated depreciation, which generate a return."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentPropertiesBalanceSheet class"""
        ...


class InvestmentsinSubsidiariesatCostBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A stake in any company which is more than 51%."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentsinSubsidiariesatCostBalanceSheet class"""
        ...


class InvestmentsinAssociatesatCostBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A stake in any company which is more than 20% but less than 50%."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentsinAssociatesatCostBalanceSheet class"""
        ...


class InvestmentsinJointVenturesatCostBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A 50% stake in any company in which remaining 50% belongs to other company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentsinJointVenturesatCostBalanceSheet class"""
        ...


class InvestmentinFinancialAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Represents the sum of all financial investments (trading securities, available-for-sale securities, held-to-maturity securities, etc.)"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentinFinancialAssetsBalanceSheet class"""
        ...


class FinanceLeaseReceivablesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Accounts owed to the bank in relation to capital leases. Capital/ finance lease obligation are contractual obligations that arise from
    obtaining the use of property or equipment via a capital lease contract.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinanceLeaseReceivablesBalanceSheet class"""
        ...


class ConvertibleLoansCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This represents loans that entitle the lender (or the holder of loan debenture) to convert the loan to common or preferred stock
    (ordinary or preference shares) within the next 12 months or operating cycle.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ConvertibleLoansCurrentBalanceSheet class"""
        ...


class BankLoansCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the
    instrument to interest payments and the repayment of principal at a specified time within the next 12 months or operating cycle.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BankLoansCurrentBalanceSheet class"""
        ...


class OtherLoansCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due within the
    next 12 months or operating cycle.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherLoansCurrentBalanceSheet class"""
        ...


class AccruedandDeferredIncomeBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Sum of accrued liabilities and deferred income (amount received in advance but the services are not provided in respect of
    amount).
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AccruedandDeferredIncomeBalanceSheet class"""
        ...


class BankLoansNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the
    instrument to interest payments and the repayment of principal at a specified time beyond the current accounting PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BankLoansNonCurrentBalanceSheet class"""
        ...


class OtherLoansNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due beyond the
    current operating cycle.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherLoansNonCurrentBalanceSheet class"""
        ...


class OtherReservesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other reserves owned by the company that cannot be identified by other specific items in the Reserves section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherReservesBalanceSheet class"""
        ...


class LoansandAdvancestoBankBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate amount of loans and advances made to a bank or financial institution."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LoansandAdvancestoBankBalanceSheet class"""
        ...


class LoansandAdvancestoCustomerBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate amount of loans and advances made to customers."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LoansandAdvancestoCustomerBalanceSheet class"""
        ...


class TreasuryBillsandOtherEligibleBillsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Investments backed by the central government, it usually carries less risk than other investments."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TreasuryBillsandOtherEligibleBillsBalanceSheet class"""
        ...


class EquitySharesInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Investments in shares of a company representing ownership in that company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EquitySharesInvestmentsBalanceSheet class"""
        ...


class DepositsbyBankBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Banks investment in the ongoing entity."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepositsbyBankBalanceSheet class"""
        ...


class CustomerAccountsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying value of amounts transferred by customers to third parties for security purposes that are expected to be returned or
    applied towards payment after one year or beyond the operating cycle, if longer.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CustomerAccountsBalanceSheet class"""
        ...


class ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying amount as of the balance sheet date of drafts and bills of exchange that have been accepted by the reporting bank or by
    others for its own account, as its liability to holders of the drafts.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet class"""
        ...


class TradingandFinancialLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total carrying amount of total trading, financial liabilities and debt in a non-differentiated balance sheet."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TradingandFinancialLiabilitiesBalanceSheet class"""
        ...


class DebtSecuritiesinIssueBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Any debt financial instrument issued instead of cash loan."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DebtSecuritiesinIssueBalanceSheet class"""
        ...


class SubordinatedLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The total carrying value of securities loaned to other broker dealers, typically used by such parties to cover short sales, secured by
    cash or other securities furnished by such parties until the borrowing is closed; in a Non-Differentiated Balance Sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SubordinatedLiabilitiesBalanceSheet class"""
        ...


class ProvisionsTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Provisions are created to protect the interests of one or both parties named in a contract or legal document, which is a preparatory
    action or measure. Current provision is expired within one accounting PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProvisionsTotalBalanceSheet class"""
        ...


class OperatingLeaseAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A contract that allows for the use of an asset, but does not convey rights of ownership of the asset. An operating lease is not
    capitalized; it is accounted for as a rental expense in what is known as "off balance sheet financing." For the lessor, the asset being
    leased is accounted for as an asset and is depreciated as such.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperatingLeaseAssetsBalanceSheet class"""
        ...


class ClaimsOutstandingBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Amounts owing to policy holders who have filed claims but have not yet been settled or paid."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ClaimsOutstandingBalanceSheet class"""
        ...


class LiabilitiesHeldforSaleCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Liabilities due within the next 12 months related from an asset classified as Held for Sale."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LiabilitiesHeldforSaleCurrentBalanceSheet class"""
        ...


class LiabilitiesHeldforSaleNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Liabilities related to an asset classified as held for sale excluding the portion due the next 12 months or operating cycle."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LiabilitiesHeldforSaleNonCurrentBalanceSheet class"""
        ...


class DebtSecuritiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Debt securities held as investments."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DebtSecuritiesBalanceSheet class"""
        ...


class TotalFinancialLeaseObligationsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Represents the total amount of long-term capital leases that must be paid within the next accounting period for a Non-
    Differentiated Balance Sheet. Capital lease obligations are contractual obligations that arise from obtaining the use of property or
    equipment via a capital lease contract.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalFinancialLeaseObligationsBalanceSheet class"""
        ...


class AccruedandDeferredIncomeCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of
    amount) due within 1 year.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AccruedandDeferredIncomeCurrentBalanceSheet class"""
        ...


class AccruedandDeferredIncomeNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of
    amount) due after 1 year.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AccruedandDeferredIncomeNonCurrentBalanceSheet class"""
        ...


class FinanceLeaseReceivablesCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Accounts owed to the bank in relation to capital leases to be received within the next accounting PeriodAsByte. Capital/ finance lease
    obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinanceLeaseReceivablesCurrentBalanceSheet class"""
        ...


class FinanceLeaseReceivablesNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Accounts owed to the bank in relation to capital leases to be received beyond the next accounting PeriodAsByte. Capital/ finance lease
    obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinanceLeaseReceivablesNonCurrentBalanceSheet class"""
        ...


class FinancialLiabilitiesCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Financial related liabilities due within one year, including short term and current portions of long-term debt, capital leases and
    derivative liabilities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancialLiabilitiesCurrentBalanceSheet class"""
        ...


class FinancialLiabilitiesNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Financial related liabilities due beyond one year, including long term debt, capital leases and derivative liabilities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancialLiabilitiesNonCurrentBalanceSheet class"""
        ...


class FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Financial assets that are held at fair value through profit or loss comprise assets held for trading and those financial assets
    designated as being held at fair value through profit or loss.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet class"""
        ...


class TaxesAssetsCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the
    balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes, and current
    deferred tax assets.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxesAssetsCurrentBalanceSheet class"""
        ...


class OtherEquityInterestBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other equity instruments issued by the company that cannot be identified by other specific items in the Equity section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherEquityInterestBalanceSheet class"""
        ...


class InterestBearingBorrowingsNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Carrying amount of any interest-bearing loan which is due after one year."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestBearingBorrowingsNonCurrentBalanceSheet class"""
        ...


class NonInterestBearingBorrowingsNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Non-interest bearing borrowings due after a year."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonInterestBearingBorrowingsNonCurrentBalanceSheet class"""
        ...


class TradeandOtherPayablesNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Sum of all non-current payables and accrued expenses."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TradeandOtherPayablesNonCurrentBalanceSheet class"""
        ...


class NonInterestBearingBorrowingsCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Non-interest bearing deposits in other financial institutions for short periods of time, usually less than 12 months."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonInterestBearingBorrowingsCurrentBalanceSheet class"""
        ...


class PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related
    to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet class"""
        ...


class OtherLoanAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Reflects the carrying amount of any other unpaid loans, an asset of the bank."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherLoanAssetsBalanceSheet class"""
        ...


class AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total value collateral assets pledged to the bank that can be sold or used as collateral for other loans."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet class"""
        ...


class TaxAssetsTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Sum of total tax assets in a Non-Differentiated Balance Sheet, includes Tax Receivables and Deferred Tax Assets."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxAssetsTotalBalanceSheet class"""
        ...


class AdvancesfromCentralBanksBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Borrowings from the central bank, which are primarily used to cover shortages in the required reserve balance and liquidity
    shortages.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AdvancesfromCentralBanksBalanceSheet class"""
        ...


class DepositCertificatesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A savings certificate entitling the bearer to receive interest. A CD bears a maturity date, a specified fixed interest rate and can be
    issued in any denomination.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepositCertificatesBalanceSheet class"""
        ...


class NonInterestBearingBorrowingsTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Non-interest bearing deposits in other financial institutions for relatively short periods of time; on a Non-Differentiated Balance
    Sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonInterestBearingBorrowingsTotalBalanceSheet class"""
        ...


class OtherBorrowedFundsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other borrowings by the bank to fund its activities that cannot be identified by other specific items in the Liabilities section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherBorrowedFundsBalanceSheet class"""
        ...


class FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Financial liabilities that are held at fair value through profit or loss."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet class"""
        ...


class FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Financial liabilities carried at amortized cost."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet class"""
        ...


class AccruedLiabilitiesTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Liabilities which have occurred, but have not been paid or logged under accounts payable during an accounting PeriodAsByte. In other
    words, obligations for goods and services provided to a company for which invoices have not yet been received; on a Non-
    Differentiated Balance Sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AccruedLiabilitiesTotalBalanceSheet class"""
        ...


class DeferredIncomeTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized on a Non-
    Differentiated Balance Sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DeferredIncomeTotalBalanceSheet class"""
        ...


class DeferredTaxLiabilitiesTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax
    value or timing differences between the recognition of gains and losses in financial statements, on a Non-Differentiated Balance
    Sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DeferredTaxLiabilitiesTotalBalanceSheet class"""
        ...


class ReinsuranceAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Reinsurance asset is insurance that is purchased by an insurance company from another insurance company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReinsuranceAssetsBalanceSheet class"""
        ...


class DepositsMadeunderAssumedReinsuranceContractBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Deposits made under reinsurance."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepositsMadeunderAssumedReinsuranceContractBalanceSheet class"""
        ...


class InsuranceContractAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A contract under which one party (the insurer) accepts significant insurance risk from another party (the policyholder) by agreeing
    to compensate the policyholder if a specified uncertain future event (the insured event) adversely affects the policyholder. This
    includes Insurance Receivables and Premiums Receivables.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InsuranceContractAssetsBalanceSheet class"""
        ...


class InsuranceContractLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Any type of insurance policy that protects an individual or business from the risk that they may be sued and held legally liable for
    something such as malpractice, injury or negligence. Liability insurance policies cover both legal costs and any legal payouts for
    which the insured would be responsible if found legally liable. Intentional damage and contractual liabilities are typically not covered
    in these types of policies.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InsuranceContractLiabilitiesBalanceSheet class"""
        ...


class DepositsReceivedunderCededInsuranceContractBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Deposit received through ceded insurance contract."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepositsReceivedunderCededInsuranceContractBalanceSheet class"""
        ...


class InvestmentContractLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Liabilities due on the insurance investment contract."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestmentContractLiabilitiesBalanceSheet class"""
        ...


class PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related
    to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits. Used to reflect the
    current portion of the liabilities (due within one year or within the normal operating cycle if longer).
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet class"""
        ...


class LiabilitiesHeldforSaleTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Liabilities related to an asset classified as held for sale."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LiabilitiesHeldforSaleTotalBalanceSheet class"""
        ...


class HedgingAssetsCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A security transaction which expires within a 12 month period that reduces the risk on an existing investment position."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the HedgingAssetsCurrentBalanceSheet class"""
        ...


class ConvertibleLoansTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Loans that entitles the lender (or the holder of loan debenture) to convert the loan to common or preferred stock (ordinary or
    preference shares) at a specified rate conversion rate and a specified time frame; in a Non-Differentiated Balance Sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ConvertibleLoansTotalBalanceSheet class"""
        ...


class BankLoansTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total debt financing obligation issued by a bank or similar financial institution to a company that entitles the lender or holder of the
    instrument to interest payments and the repayment of principal at a specified time; in a Non-Differentiated Balance Sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BankLoansTotalBalanceSheet class"""
        ...


class OtherLoansTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Total other loans between the customer and bank which cannot be identified by other specific items in the Debt section; in a Non-
    Differentiated Balance Sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherLoansTotalBalanceSheet class"""
        ...


class InsuranceFundsNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Liabilities related to insurance funds that are dissolved after one year."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InsuranceFundsNonCurrentBalanceSheet class"""
        ...


class DebtTotalBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The total aggregate of all written promises and/or agreements to repay a stated amount of borrowed funds at a specified date in
    the future; in a Non-Differentiated Balance Sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DebtTotalBalanceSheet class"""
        ...


class ComTreShaNumBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The treasury stock number of common shares. This represents the number of common shares owned by the company as a result of
    share repurchase programs or donations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ComTreShaNumBalanceSheet class"""
        ...


class PreTreShaNumBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The treasury stock number of preferred shares. This represents the number of preferred shares owned by the company as a result
    of share repurchase programs or donations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreTreShaNumBalanceSheet class"""
        ...


class NetDebtBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is a metric that shows a company's overall debt situation by netting the value of a company's liabilities and
    debts with its cash and other similar liquid assets. It is calculated using [Current Debt] + [Long Term Debt] - [Cash and Cash
    Equivalents].
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetDebtBalanceSheet class"""
        ...


class ShareIssuedBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The number of authorized shares that is sold to and held by the shareholders of a company, regardless of whether they are insiders,
    institutional investors or the general public. Unlike shares that are held as treasury stock, shares that have been retired are not
    included in this figure. The amount of issued shares can be all or part of the total amount of authorized shares of a corporation.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ShareIssuedBalanceSheet class"""
        ...


class AssetsHeldForSaleCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Short term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less
    costs to sell.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AssetsHeldForSaleCurrentBalanceSheet class"""
        ...


class AssetsHeldForSaleNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Long term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less
    costs to sell.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AssetsHeldForSaleNonCurrentBalanceSheet class"""
        ...


class BiologicalAssetsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Biological assets include plants and animals."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BiologicalAssetsBalanceSheet class"""
        ...


class CashRestrictedOrPledgedBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash that the company can use only for specific purposes or cash deposit or placing of owned property by a debtor (the pledger) to
    a creditor (the pledgee) as a security for a loan or obligation.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashRestrictedOrPledgedBalanceSheet class"""
        ...


class ConvertibleLoansNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A long term loan with a warrant attached that gives the debt holder the option to exchange all or a portion of the loan principal for
    an equity position in the company at a predetermined rate of conversion within a specified period of time.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ConvertibleLoansNonCurrentBalanceSheet class"""
        ...


class FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Financial instruments that are linked to a specific financial instrument or indicator or commodity, and through which specific
    financial risks can be traded in financial markets in their own right, such as financial options, futures, forwards, etc.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet class"""
        ...


class OtherInvestmentsBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Investments that are neither Investment in Financial Assets nor Long term equity investment, not expected to be cashed within a
    year.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherInvestmentsBalanceSheet class"""
        ...


class TradeAndOtherReceivablesNonCurrentBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Amounts due from customers or clients, more than one year from the balance sheet date, for goods or services that have been
    delivered or sold in the normal course of business, or other receivables.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TradeAndOtherReceivablesNonCurrentBalanceSheet class"""
        ...


class DueFromRelatedPartiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """For an unclassified balance sheet, carrying amount as of the balance sheet date of obligations due all related parties."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DueFromRelatedPartiesBalanceSheet class"""
        ...


class UnallocatedSurplusBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount of surplus from insurance contracts which has not been allocated at the balance sheet date. This is represented as a
    liability to policyholders, as it pertains to cumulative income arising from the with-profits business.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the UnallocatedSurplusBalanceSheet class"""
        ...


class DebtDueInYear1BalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Debt due under 1 year according to the debt maturity schedule reported by the company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DebtDueInYear1BalanceSheet class"""
        ...


class DebtDueInYear2BalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Debt due under 2 years according to the debt maturity schedule reported by the company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DebtDueInYear2BalanceSheet class"""
        ...


class DebtDueInYear5BalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Debt due within 5 year if the company provide maturity schedule in range e.g. 1-5 years, 2-5 years. Debt due under 5 years
    according to the debt maturity schedule reported by the company. If a range is reported by the company, the value will be collected
    under the maximum number of years (eg. 1-5 years, 3-5 years or 5 years will all be collected under this data point.)
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DebtDueInYear5BalanceSheet class"""
        ...


class DebtDueBeyondBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Debt maturing beyond 5 years (eg. 5-10 years) or with no specified maturity, according to the debt maturity schedule reported by
    the company.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DebtDueBeyondBalanceSheet class"""
        ...


class TotalDebtInMaturityScheduleBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total Debt in Maturity Schedule is the sum of Debt details above."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalDebtInMaturityScheduleBalanceSheet class"""
        ...


class FixedAssetsRevaluationReserveBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Reserves created by revaluation of assets."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FixedAssetsRevaluationReserveBalanceSheet class"""
        ...


class CurrentOtherFinancialLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other short term financial liabilities not categorized and due within one year or a normal operating cycle (whichever is longer)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentOtherFinancialLiabilitiesBalanceSheet class"""
        ...


class NonCurrentOtherFinancialLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other long term financial liabilities not categorized and due over one year or a normal operating cycle (whichever is longer)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NonCurrentOtherFinancialLiabilitiesBalanceSheet class"""
        ...


class OtherFinancialLiabilitiesBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other financial liabilities not categorized."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherFinancialLiabilitiesBalanceSheet class"""
        ...


class TotalLiabilitiesAsReportedBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total liabilities as reported by the company, may be the same or not the same as Morningstar's standardized definition."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalLiabilitiesAsReportedBalanceSheet class"""
        ...


class TotalEquityAsReportedBalanceSheet(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total Equity as reported by the company, may be the same or not the same as Morningstar's standardized definition."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalEquityAsReportedBalanceSheet class"""
        ...


class BalanceSheet(System.Object):
    """Definition of the BalanceSheet class"""

    @property
    def AccountsPayable(self) -> QuantConnect.Data.Fundamental.AccountsPayableBalanceSheet:
        """
        Any money that a company owes its suppliers for goods and services purchased on credit and is expected to pay within the next
        year or operating cycle.
        """
        ...

    @AccountsPayable.setter
    def AccountsPayable(self, value: QuantConnect.Data.Fundamental.AccountsPayableBalanceSheet):
        """
        Any money that a company owes its suppliers for goods and services purchased on credit and is expected to pay within the next
        year or operating cycle.
        """
        ...

    @property
    def AccountsReceivable(self) -> QuantConnect.Data.Fundamental.AccountsReceivableBalanceSheet:
        """Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit."""
        ...

    @AccountsReceivable.setter
    def AccountsReceivable(self, value: QuantConnect.Data.Fundamental.AccountsReceivableBalanceSheet):
        """Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit."""
        ...

    @property
    def CurrentAccruedExpenses(self) -> QuantConnect.Data.Fundamental.CurrentAccruedExpensesBalanceSheet:
        """
        An expense recognized before it is paid for. Includes compensation, interest, pensions and all other miscellaneous accruals
        reported by the company. Expenses incurred during the accounting period, but not required to be paid until a later date.
        """
        ...

    @CurrentAccruedExpenses.setter
    def CurrentAccruedExpenses(self, value: QuantConnect.Data.Fundamental.CurrentAccruedExpensesBalanceSheet):
        """
        An expense recognized before it is paid for. Includes compensation, interest, pensions and all other miscellaneous accruals
        reported by the company. Expenses incurred during the accounting period, but not required to be paid until a later date.
        """
        ...

    @property
    def NonCurrentAccruedExpenses(self) -> QuantConnect.Data.Fundamental.NonCurrentAccruedExpensesBalanceSheet:
        """
        An expense that has occurred but the transaction has not been entered in the accounting records. Accordingly, an adjusting entry
        is made to debit the appropriate expense account and to credit a liability account such as accrued expenses payable or accounts
        payable.
        """
        ...

    @NonCurrentAccruedExpenses.setter
    def NonCurrentAccruedExpenses(self, value: QuantConnect.Data.Fundamental.NonCurrentAccruedExpensesBalanceSheet):
        """
        An expense that has occurred but the transaction has not been entered in the accounting records. Accordingly, an adjusting entry
        is made to debit the appropriate expense account and to credit a liability account such as accrued expenses payable or accounts
        payable.
        """
        ...

    @property
    def AccruedInvestmentIncome(self) -> QuantConnect.Data.Fundamental.AccruedInvestmentIncomeBalanceSheet:
        """Interest, dividends, rents, ancillary and other revenues earned but not yet received by the entity on its investments."""
        ...

    @AccruedInvestmentIncome.setter
    def AccruedInvestmentIncome(self, value: QuantConnect.Data.Fundamental.AccruedInvestmentIncomeBalanceSheet):
        """Interest, dividends, rents, ancillary and other revenues earned but not yet received by the entity on its investments."""
        ...

    @property
    def AccumulatedDepreciation(self) -> QuantConnect.Data.Fundamental.AccumulatedDepreciationBalanceSheet:
        """The cumulative amount of wear and tear or obsolescence charged against the fixed assets of a company."""
        ...

    @AccumulatedDepreciation.setter
    def AccumulatedDepreciation(self, value: QuantConnect.Data.Fundamental.AccumulatedDepreciationBalanceSheet):
        """The cumulative amount of wear and tear or obsolescence charged against the fixed assets of a company."""
        ...

    @property
    def GainsLossesNotAffectingRetainedEarnings(self) -> QuantConnect.Data.Fundamental.GainsLossesNotAffectingRetainedEarningsBalanceSheet:
        """The aggregate amount of gains or losses that are not part of retained earnings. It is also called other comprehensive income."""
        ...

    @GainsLossesNotAffectingRetainedEarnings.setter
    def GainsLossesNotAffectingRetainedEarnings(self, value: QuantConnect.Data.Fundamental.GainsLossesNotAffectingRetainedEarningsBalanceSheet):
        """The aggregate amount of gains or losses that are not part of retained earnings. It is also called other comprehensive income."""
        ...

    @property
    def AdditionalPaidInCapital(self) -> QuantConnect.Data.Fundamental.AdditionalPaidInCapitalBalanceSheet:
        """
        Excess of issue price over par or stated value of the entity's capital stock and amounts received from other transactions involving
        the entity's stock or stockholders. Includes adjustments to additional paid in capital. There are two major categories of additional
        paid in capital: 1) Paid in capital in excess of par/stated value, which is the difference between the actual issue price of the shares
        and the shares' par/stated value. 2) Paid in capital from other transactions which includes treasury stock, retirement of stock, stock
        dividends recorded at market, lapse of stock purchase warrants, conversion of convertible bonds in excess of the par value of the
        stock, and any other additional capital from the company's own stock transactions.
        """
        ...

    @AdditionalPaidInCapital.setter
    def AdditionalPaidInCapital(self, value: QuantConnect.Data.Fundamental.AdditionalPaidInCapitalBalanceSheet):
        """
        Excess of issue price over par or stated value of the entity's capital stock and amounts received from other transactions involving
        the entity's stock or stockholders. Includes adjustments to additional paid in capital. There are two major categories of additional
        paid in capital: 1) Paid in capital in excess of par/stated value, which is the difference between the actual issue price of the shares
        and the shares' par/stated value. 2) Paid in capital from other transactions which includes treasury stock, retirement of stock, stock
        dividends recorded at market, lapse of stock purchase warrants, conversion of convertible bonds in excess of the par value of the
        stock, and any other additional capital from the company's own stock transactions.
        """
        ...

    @property
    def AllowanceForLoansAndLeaseLosses(self) -> QuantConnect.Data.Fundamental.AllowanceForLoansAndLeaseLossesBalanceSheet:
        """A contra account sets aside as an allowance for bad loans (e.g. customer defaults)."""
        ...

    @AllowanceForLoansAndLeaseLosses.setter
    def AllowanceForLoansAndLeaseLosses(self, value: QuantConnect.Data.Fundamental.AllowanceForLoansAndLeaseLossesBalanceSheet):
        """A contra account sets aside as an allowance for bad loans (e.g. customer defaults)."""
        ...

    @property
    def AvailableForSaleSecurities(self) -> QuantConnect.Data.Fundamental.AvailableForSaleSecuritiesBalanceSheet:
        """
        For an unclassified balance sheet, this item represents equity securities categorized neither as held-to-maturity nor trading. Equity
        securities represent ownership interests or the right to acquire ownership interests in corporations and other legal entities which
        ownership interest is represented by shares of common or preferred stock (which is not mandatory redeemable or redeemable at
        the option of the holder), convertible securities, stock rights, or stock warrants. This category includes preferred stocks, available-
        for-sale and common stock, available-for-sale.
        """
        ...

    @AvailableForSaleSecurities.setter
    def AvailableForSaleSecurities(self, value: QuantConnect.Data.Fundamental.AvailableForSaleSecuritiesBalanceSheet):
        """
        For an unclassified balance sheet, this item represents equity securities categorized neither as held-to-maturity nor trading. Equity
        securities represent ownership interests or the right to acquire ownership interests in corporations and other legal entities which
        ownership interest is represented by shares of common or preferred stock (which is not mandatory redeemable or redeemable at
        the option of the holder), convertible securities, stock rights, or stock warrants. This category includes preferred stocks, available-
        for-sale and common stock, available-for-sale.
        """
        ...

    @property
    def CapitalStock(self) -> QuantConnect.Data.Fundamental.CapitalStockBalanceSheet:
        """The total amount of stock authorized for issue by a corporation, including common and preferred stock."""
        ...

    @CapitalStock.setter
    def CapitalStock(self, value: QuantConnect.Data.Fundamental.CapitalStockBalanceSheet):
        """The total amount of stock authorized for issue by a corporation, including common and preferred stock."""
        ...

    @property
    def Cash(self) -> QuantConnect.Data.Fundamental.CashBalanceSheet:
        """
        Cash includes currency on hand as well as demand deposits with banks or financial institutions. It also includes other kinds of
        accounts that have the general characteristics of demand deposits in that the customer may deposit additional funds at any time
        and also effectively may withdraw funds at any time without prior notice or penalty.
        """
        ...

    @Cash.setter
    def Cash(self, value: QuantConnect.Data.Fundamental.CashBalanceSheet):
        """
        Cash includes currency on hand as well as demand deposits with banks or financial institutions. It also includes other kinds of
        accounts that have the general characteristics of demand deposits in that the customer may deposit additional funds at any time
        and also effectively may withdraw funds at any time without prior notice or penalty.
        """
        ...

    @property
    def CashEquivalents(self) -> QuantConnect.Data.Fundamental.CashEquivalentsBalanceSheet:
        """
        Cash equivalents, excluding items classified as marketable securities, include short-term, highly liquid investments that are both
        readily convertible to known amounts of cash, and so near their maturity that they present insignificant risk of changes in value
        because of changes in interest rates.  Generally, only investments with original maturities of three months or less qualify under this
        definition. Original maturity means original maturity to the entity holding the investment. For example, both a three-month US
        Treasury bill and a three-year Treasury note purchased three months from maturity qualify as cash equivalents. However, a Treasury
        note purchased three years ago does not become a cash equivalent when its remaining maturity is three months.
        """
        ...

    @CashEquivalents.setter
    def CashEquivalents(self, value: QuantConnect.Data.Fundamental.CashEquivalentsBalanceSheet):
        """
        Cash equivalents, excluding items classified as marketable securities, include short-term, highly liquid investments that are both
        readily convertible to known amounts of cash, and so near their maturity that they present insignificant risk of changes in value
        because of changes in interest rates.  Generally, only investments with original maturities of three months or less qualify under this
        definition. Original maturity means original maturity to the entity holding the investment. For example, both a three-month US
        Treasury bill and a three-year Treasury note purchased three months from maturity qualify as cash equivalents. However, a Treasury
        note purchased three years ago does not become a cash equivalent when its remaining maturity is three months.
        """
        ...

    @property
    def CashAndCashEquivalents(self) -> QuantConnect.Data.Fundamental.CashAndCashEquivalentsBalanceSheet:
        """
        Includes unrestricted cash on hand, money market instruments and other debt securities which can be converted to cash
        immediately.
        """
        ...

    @CashAndCashEquivalents.setter
    def CashAndCashEquivalents(self, value: QuantConnect.Data.Fundamental.CashAndCashEquivalentsBalanceSheet):
        """
        Includes unrestricted cash on hand, money market instruments and other debt securities which can be converted to cash
        immediately.
        """
        ...

    @property
    def CashAndDueFromBanks(self) -> QuantConnect.Data.Fundamental.CashAndDueFromBanksBalanceSheet:
        """
        Includes cash on hand (currency and coin), cash items in process of collection, non-interest bearing deposits due from other
        financial institutions (including corporate credit unions), and balances with the Federal Reserve Banks, Federal Home Loan Banks
        and central banks.
        """
        ...

    @CashAndDueFromBanks.setter
    def CashAndDueFromBanks(self, value: QuantConnect.Data.Fundamental.CashAndDueFromBanksBalanceSheet):
        """
        Includes cash on hand (currency and coin), cash items in process of collection, non-interest bearing deposits due from other
        financial institutions (including corporate credit unions), and balances with the Federal Reserve Banks, Federal Home Loan Banks
        and central banks.
        """
        ...

    @property
    def CashCashEquivalentsAndFederalFundsSold(self) -> QuantConnect.Data.Fundamental.CashCashEquivalentsAndFederalFundsSoldBalanceSheet:
        """The aggregate amount of cash, cash equivalents, and federal funds sold."""
        ...

    @CashCashEquivalentsAndFederalFundsSold.setter
    def CashCashEquivalentsAndFederalFundsSold(self, value: QuantConnect.Data.Fundamental.CashCashEquivalentsAndFederalFundsSoldBalanceSheet):
        """The aggregate amount of cash, cash equivalents, and federal funds sold."""
        ...

    @property
    def CashCashEquivalentsAndMarketableSecurities(self) -> QuantConnect.Data.Fundamental.CashCashEquivalentsAndMarketableSecuritiesBalanceSheet:
        """The aggregate amount of cash, cash equivalents, and marketable securities."""
        ...

    @CashCashEquivalentsAndMarketableSecurities.setter
    def CashCashEquivalentsAndMarketableSecurities(self, value: QuantConnect.Data.Fundamental.CashCashEquivalentsAndMarketableSecuritiesBalanceSheet):
        """The aggregate amount of cash, cash equivalents, and marketable securities."""
        ...

    @property
    def CommonStock(self) -> QuantConnect.Data.Fundamental.CommonStockBalanceSheet:
        """
        Common stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet; i.e. it is one
        component of Common Stockholder's Equity
        """
        ...

    @CommonStock.setter
    def CommonStock(self, value: QuantConnect.Data.Fundamental.CommonStockBalanceSheet):
        """
        Common stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet; i.e. it is one
        component of Common Stockholder's Equity
        """
        ...

    @property
    def CurrentAssets(self) -> QuantConnect.Data.Fundamental.CurrentAssetsBalanceSheet:
        """The total amount of assets considered to be convertible into cash within a relatively short period of time, usually a year."""
        ...

    @CurrentAssets.setter
    def CurrentAssets(self, value: QuantConnect.Data.Fundamental.CurrentAssetsBalanceSheet):
        """The total amount of assets considered to be convertible into cash within a relatively short period of time, usually a year."""
        ...

    @property
    def CurrentDebt(self) -> QuantConnect.Data.Fundamental.CurrentDebtBalanceSheet:
        """Represents the total amount of long-term debt such as bank loans and commercial paper, which is due within one year."""
        ...

    @CurrentDebt.setter
    def CurrentDebt(self, value: QuantConnect.Data.Fundamental.CurrentDebtBalanceSheet):
        """Represents the total amount of long-term debt such as bank loans and commercial paper, which is due within one year."""
        ...

    @property
    def CurrentDebtAndCapitalLeaseObligation(self) -> QuantConnect.Data.Fundamental.CurrentDebtAndCapitalLeaseObligationBalanceSheet:
        """
        All borrowings due within one year including current portions of long-term debt and capital leases as well as short-term debt such
        as bank loans and commercial paper.
        """
        ...

    @CurrentDebtAndCapitalLeaseObligation.setter
    def CurrentDebtAndCapitalLeaseObligation(self, value: QuantConnect.Data.Fundamental.CurrentDebtAndCapitalLeaseObligationBalanceSheet):
        """
        All borrowings due within one year including current portions of long-term debt and capital leases as well as short-term debt such
        as bank loans and commercial paper.
        """
        ...

    @property
    def CurrentLiabilities(self) -> QuantConnect.Data.Fundamental.CurrentLiabilitiesBalanceSheet:
        """The debts or obligations of the firm that are due within one year."""
        ...

    @CurrentLiabilities.setter
    def CurrentLiabilities(self, value: QuantConnect.Data.Fundamental.CurrentLiabilitiesBalanceSheet):
        """The debts or obligations of the firm that are due within one year."""
        ...

    @property
    def CurrentCapitalLeaseObligation(self) -> QuantConnect.Data.Fundamental.CurrentCapitalLeaseObligationBalanceSheet:
        """
        Represents the total amount of long-term capital leases that must be paid within the next accounting period. Capital lease
        obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.
        """
        ...

    @CurrentCapitalLeaseObligation.setter
    def CurrentCapitalLeaseObligation(self, value: QuantConnect.Data.Fundamental.CurrentCapitalLeaseObligationBalanceSheet):
        """
        Represents the total amount of long-term capital leases that must be paid within the next accounting period. Capital lease
        obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.
        """
        ...

    @property
    def DeferredAssets(self) -> QuantConnect.Data.Fundamental.DeferredAssetsBalanceSheet:
        """An amount owed to a firm that is not expected to be received by the firm within one year from the date of the balance sheet."""
        ...

    @DeferredAssets.setter
    def DeferredAssets(self, value: QuantConnect.Data.Fundamental.DeferredAssetsBalanceSheet):
        """An amount owed to a firm that is not expected to be received by the firm within one year from the date of the balance sheet."""
        ...

    @property
    def DeferredCosts(self) -> QuantConnect.Data.Fundamental.DeferredCostsBalanceSheet:
        """
        An expenditure not recognized as a cost of operation of the period in which incurred, but carried forward to be written off in future
        periods.
        """
        ...

    @DeferredCosts.setter
    def DeferredCosts(self, value: QuantConnect.Data.Fundamental.DeferredCostsBalanceSheet):
        """
        An expenditure not recognized as a cost of operation of the period in which incurred, but carried forward to be written off in future
        periods.
        """
        ...

    @property
    def NonCurrentDeferredLiabilities(self) -> QuantConnect.Data.Fundamental.NonCurrentDeferredLiabilitiesBalanceSheet:
        """Represents the non-current portion of obligations, which is a liability that usually would have been paid but is now past due."""
        ...

    @NonCurrentDeferredLiabilities.setter
    def NonCurrentDeferredLiabilities(self, value: QuantConnect.Data.Fundamental.NonCurrentDeferredLiabilitiesBalanceSheet):
        """Represents the non-current portion of obligations, which is a liability that usually would have been paid but is now past due."""
        ...

    @property
    def CurrentDeferredLiabilities(self) -> QuantConnect.Data.Fundamental.CurrentDeferredLiabilitiesBalanceSheet:
        """Represents the current portion of obligations, which is a liability that usually would have been paid but is now past due."""
        ...

    @CurrentDeferredLiabilities.setter
    def CurrentDeferredLiabilities(self, value: QuantConnect.Data.Fundamental.CurrentDeferredLiabilitiesBalanceSheet):
        """Represents the current portion of obligations, which is a liability that usually would have been paid but is now past due."""
        ...

    @property
    def DeferredPolicyAcquisitionCosts(self) -> QuantConnect.Data.Fundamental.DeferredPolicyAcquisitionCostsBalanceSheet:
        """Net amount of deferred policy acquisition costs capitalized on contracts remaining in force as of the balance sheet date."""
        ...

    @DeferredPolicyAcquisitionCosts.setter
    def DeferredPolicyAcquisitionCosts(self, value: QuantConnect.Data.Fundamental.DeferredPolicyAcquisitionCostsBalanceSheet):
        """Net amount of deferred policy acquisition costs capitalized on contracts remaining in force as of the balance sheet date."""
        ...

    @property
    def CurrentDeferredRevenue(self) -> QuantConnect.Data.Fundamental.CurrentDeferredRevenueBalanceSheet:
        """
        Represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized.
        Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that
        must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called
        unearned revenue.
        """
        ...

    @CurrentDeferredRevenue.setter
    def CurrentDeferredRevenue(self, value: QuantConnect.Data.Fundamental.CurrentDeferredRevenueBalanceSheet):
        """
        Represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized.
        Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that
        must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called
        unearned revenue.
        """
        ...

    @property
    def NonCurrentDeferredRevenue(self) -> QuantConnect.Data.Fundamental.NonCurrentDeferredRevenueBalanceSheet:
        """
        The non-current portion of deferred revenue amount as of the balance sheet date. Deferred revenue is a liability related to revenue
        producing activity for which revenue has not yet been recognized, and is not expected be recognized in the next twelve months.
        """
        ...

    @NonCurrentDeferredRevenue.setter
    def NonCurrentDeferredRevenue(self, value: QuantConnect.Data.Fundamental.NonCurrentDeferredRevenueBalanceSheet):
        """
        The non-current portion of deferred revenue amount as of the balance sheet date. Deferred revenue is a liability related to revenue
        producing activity for which revenue has not yet been recognized, and is not expected be recognized in the next twelve months.
        """
        ...

    @property
    def DeferredTaxAssets(self) -> QuantConnect.Data.Fundamental.DeferredTaxAssetsBalanceSheet:
        """
        An asset on a company's balance sheet that may be used to reduce any subsequent period's income tax expense. Deferred tax
        assets can arise due to net loss carryovers, which are only recorded as assets if it is deemed more likely than not that the asset
        will be used in future fiscal periods.
        """
        ...

    @DeferredTaxAssets.setter
    def DeferredTaxAssets(self, value: QuantConnect.Data.Fundamental.DeferredTaxAssetsBalanceSheet):
        """
        An asset on a company's balance sheet that may be used to reduce any subsequent period's income tax expense. Deferred tax
        assets can arise due to net loss carryovers, which are only recorded as assets if it is deemed more likely than not that the asset
        will be used in future fiscal periods.
        """
        ...

    @property
    def CurrentDeferredTaxesAssets(self) -> QuantConnect.Data.Fundamental.CurrentDeferredTaxesAssetsBalanceSheet:
        """
        Meaning a future tax asset, resulting from temporary differences between book (accounting) value of assets and liabilities and their
        tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax
        computation. It is also called future tax.
        """
        ...

    @CurrentDeferredTaxesAssets.setter
    def CurrentDeferredTaxesAssets(self, value: QuantConnect.Data.Fundamental.CurrentDeferredTaxesAssetsBalanceSheet):
        """
        Meaning a future tax asset, resulting from temporary differences between book (accounting) value of assets and liabilities and their
        tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax
        computation. It is also called future tax.
        """
        ...

    @property
    def CurrentDeferredTaxesLiabilities(self) -> QuantConnect.Data.Fundamental.CurrentDeferredTaxesLiabilitiesBalanceSheet:
        """
        Meaning a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and
        their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a
        tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income
        is accrued but not taxed until received.
        """
        ...

    @CurrentDeferredTaxesLiabilities.setter
    def CurrentDeferredTaxesLiabilities(self, value: QuantConnect.Data.Fundamental.CurrentDeferredTaxesLiabilitiesBalanceSheet):
        """
        Meaning a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and
        their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a
        tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income
        is accrued but not taxed until received.
        """
        ...

    @property
    def NonCurrentDeferredTaxesAssets(self) -> QuantConnect.Data.Fundamental.NonCurrentDeferredTaxesAssetsBalanceSheet:
        """
        A result of timing differences between taxable incomes reported on the income statement and taxable income from the company's
        tax return. Depending on the positioning of deferred income taxes, the field may be either current (within current assets) or non-
        current (below total current assets). Typically a company will have two deferred income taxes fields.
        """
        ...

    @NonCurrentDeferredTaxesAssets.setter
    def NonCurrentDeferredTaxesAssets(self, value: QuantConnect.Data.Fundamental.NonCurrentDeferredTaxesAssetsBalanceSheet):
        """
        A result of timing differences between taxable incomes reported on the income statement and taxable income from the company's
        tax return. Depending on the positioning of deferred income taxes, the field may be either current (within current assets) or non-
        current (below total current assets). Typically a company will have two deferred income taxes fields.
        """
        ...

    @property
    def NonCurrentDeferredTaxesLiabilities(self) -> QuantConnect.Data.Fundamental.NonCurrentDeferredTaxesLiabilitiesBalanceSheet:
        """
        The estimated future tax obligations, which usually arise when different accounting methods are used for financial statements and
        tax statement It is also an add-back to the cash flow statement. Deferred income taxes include accumulated tax deferrals due to
        accelerated depreciation and investment credit.
        """
        ...

    @NonCurrentDeferredTaxesLiabilities.setter
    def NonCurrentDeferredTaxesLiabilities(self, value: QuantConnect.Data.Fundamental.NonCurrentDeferredTaxesLiabilitiesBalanceSheet):
        """
        The estimated future tax obligations, which usually arise when different accounting methods are used for financial statements and
        tax statement It is also an add-back to the cash flow statement. Deferred income taxes include accumulated tax deferrals due to
        accelerated depreciation and investment credit.
        """
        ...

    @property
    def EquityInvestments(self) -> QuantConnect.Data.Fundamental.EquityInvestmentsBalanceSheet:
        """This asset represents equity securities categorized neither as held-to-maturity nor trading."""
        ...

    @EquityInvestments.setter
    def EquityInvestments(self, value: QuantConnect.Data.Fundamental.EquityInvestmentsBalanceSheet):
        """This asset represents equity securities categorized neither as held-to-maturity nor trading."""
        ...

    @property
    def FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchase(self) -> QuantConnect.Data.Fundamental.FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet:
        """
        This liability refers to the amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from
        another bank to meet its reserve requirements; and the amount of securities that an institution sells and agrees to repurchase at a
        specified date for a specified price, net of any reductions or offsets.
        """
        ...

    @FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchase.setter
    def FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchase(self, value: QuantConnect.Data.Fundamental.FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchaseBalanceSheet):
        """
        This liability refers to the amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from
        another bank to meet its reserve requirements; and the amount of securities that an institution sells and agrees to repurchase at a
        specified date for a specified price, net of any reductions or offsets.
        """
        ...

    @property
    def FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self) -> QuantConnect.Data.Fundamental.FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet:
        """This asset refers to very-short-term loans of funds to other banks and securities dealers."""
        ...

    @FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell.setter
    def FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell(self, value: QuantConnect.Data.Fundamental.FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResellBalanceSheet):
        """This asset refers to very-short-term loans of funds to other banks and securities dealers."""
        ...

    @property
    def FixedMaturityInvestments(self) -> QuantConnect.Data.Fundamental.FixedMaturityInvestmentsBalanceSheet:
        """
        This asset refers to types of investments that may be contained within the fixed maturity category which securities are having a
        stated final repayment date. Examples of items within this category may include bonds, including convertibles and bonds with
        warrants, and redeemable preferred stocks.
        """
        ...

    @FixedMaturityInvestments.setter
    def FixedMaturityInvestments(self, value: QuantConnect.Data.Fundamental.FixedMaturityInvestmentsBalanceSheet):
        """
        This asset refers to types of investments that may be contained within the fixed maturity category which securities are having a
        stated final repayment date. Examples of items within this category may include bonds, including convertibles and bonds with
        warrants, and redeemable preferred stocks.
        """
        ...

    @property
    def FuturePolicyBenefits(self) -> QuantConnect.Data.Fundamental.FuturePolicyBenefitsBalanceSheet:
        """
        Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be
        paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions
        regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.
        """
        ...

    @FuturePolicyBenefits.setter
    def FuturePolicyBenefits(self, value: QuantConnect.Data.Fundamental.FuturePolicyBenefitsBalanceSheet):
        """
        Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be
        paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions
        regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.
        """
        ...

    @property
    def GeneralPartnershipCapital(self) -> QuantConnect.Data.Fundamental.GeneralPartnershipCapitalBalanceSheet:
        """
        In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the general
        partners.
        """
        ...

    @GeneralPartnershipCapital.setter
    def GeneralPartnershipCapital(self, value: QuantConnect.Data.Fundamental.GeneralPartnershipCapitalBalanceSheet):
        """
        In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the general
        partners.
        """
        ...

    @property
    def Goodwill(self) -> QuantConnect.Data.Fundamental.GoodwillBalanceSheet:
        """
        The excess of the cost of an acquired company over the sum of the fair market value of its identifiable individual assets less the
        liabilities.
        """
        ...

    @Goodwill.setter
    def Goodwill(self, value: QuantConnect.Data.Fundamental.GoodwillBalanceSheet):
        """
        The excess of the cost of an acquired company over the sum of the fair market value of its identifiable individual assets less the
        liabilities.
        """
        ...

    @property
    def GoodwillAndOtherIntangibleAssets(self) -> QuantConnect.Data.Fundamental.GoodwillAndOtherIntangibleAssetsBalanceSheet:
        """
        Rights or economic benefits, such as patents and goodwill, that is not physical in nature. They are those that are neither physical
        nor financial in nature, nevertheless, have value to the company. Intangibles are listed net of accumulated amortization.
        """
        ...

    @GoodwillAndOtherIntangibleAssets.setter
    def GoodwillAndOtherIntangibleAssets(self, value: QuantConnect.Data.Fundamental.GoodwillAndOtherIntangibleAssetsBalanceSheet):
        """
        Rights or economic benefits, such as patents and goodwill, that is not physical in nature. They are those that are neither physical
        nor financial in nature, nevertheless, have value to the company. Intangibles are listed net of accumulated amortization.
        """
        ...

    @property
    def GrossLoan(self) -> QuantConnect.Data.Fundamental.GrossLoanBalanceSheet:
        """
        Represents the sum of all loans (commercial, consumer, mortgage, etc.) as well as leases before any provisions for loan losses or
        unearned discounts.
        """
        ...

    @GrossLoan.setter
    def GrossLoan(self, value: QuantConnect.Data.Fundamental.GrossLoanBalanceSheet):
        """
        Represents the sum of all loans (commercial, consumer, mortgage, etc.) as well as leases before any provisions for loan losses or
        unearned discounts.
        """
        ...

    @property
    def GrossPPE(self) -> QuantConnect.Data.Fundamental.GrossPPEBalanceSheet:
        """
        Carrying amount at the balance sheet date for long-lived physical assets used in the normal conduct of business and not intended
        for resale. This can include land, physical structures, machinery, vehicles, furniture, computer equipment, construction in progress,
        and similar items. Amount does not include depreciation.
        """
        ...

    @GrossPPE.setter
    def GrossPPE(self, value: QuantConnect.Data.Fundamental.GrossPPEBalanceSheet):
        """
        Carrying amount at the balance sheet date for long-lived physical assets used in the normal conduct of business and not intended
        for resale. This can include land, physical structures, machinery, vehicles, furniture, computer equipment, construction in progress,
        and similar items. Amount does not include depreciation.
        """
        ...

    @property
    def HeldToMaturitySecurities(self) -> QuantConnect.Data.Fundamental.HeldToMaturitySecuritiesBalanceSheet:
        """Debt securities that a firm has the ability and intent to hold until maturity."""
        ...

    @HeldToMaturitySecurities.setter
    def HeldToMaturitySecurities(self, value: QuantConnect.Data.Fundamental.HeldToMaturitySecuritiesBalanceSheet):
        """Debt securities that a firm has the ability and intent to hold until maturity."""
        ...

    @property
    def IncomeTaxPayable(self) -> QuantConnect.Data.Fundamental.IncomeTaxPayableBalanceSheet:
        """A current liability account which reflects the amount of income taxes currently due to the federal, state, and local governments."""
        ...

    @IncomeTaxPayable.setter
    def IncomeTaxPayable(self, value: QuantConnect.Data.Fundamental.IncomeTaxPayableBalanceSheet):
        """A current liability account which reflects the amount of income taxes currently due to the federal, state, and local governments."""
        ...

    @property
    def InterestBearingDepositsLiabilities(self) -> QuantConnect.Data.Fundamental.InterestBearingDepositsLiabilitiesBalanceSheet:
        """The aggregate of all domestic and foreign deposits in the bank that earns interests."""
        ...

    @InterestBearingDepositsLiabilities.setter
    def InterestBearingDepositsLiabilities(self, value: QuantConnect.Data.Fundamental.InterestBearingDepositsLiabilitiesBalanceSheet):
        """The aggregate of all domestic and foreign deposits in the bank that earns interests."""
        ...

    @property
    def InterestPayable(self) -> QuantConnect.Data.Fundamental.InterestPayableBalanceSheet:
        """
        Sum of the carrying values as of the balance sheet date of interest payable on all forms of debt, including trade payable that has
        been incurred.
        """
        ...

    @InterestPayable.setter
    def InterestPayable(self, value: QuantConnect.Data.Fundamental.InterestPayableBalanceSheet):
        """
        Sum of the carrying values as of the balance sheet date of interest payable on all forms of debt, including trade payable that has
        been incurred.
        """
        ...

    @property
    def InterestBearingDepositsAssets(self) -> QuantConnect.Data.Fundamental.InterestBearingDepositsAssetsBalanceSheet:
        """
        Deposit of money with a financial institution, in consideration of which the financial institution pays or credits interest, or amounts in the nature
        of interest.
        """
        ...

    @InterestBearingDepositsAssets.setter
    def InterestBearingDepositsAssets(self, value: QuantConnect.Data.Fundamental.InterestBearingDepositsAssetsBalanceSheet):
        """
        Deposit of money with a financial institution, in consideration of which the financial institution pays or credits interest, or amounts in the nature
        of interest.
        """
        ...

    @property
    def Inventory(self) -> QuantConnect.Data.Fundamental.InventoryBalanceSheet:
        """A company's merchandise, raw materials, and finished and unfinished products which have not yet been sold."""
        ...

    @Inventory.setter
    def Inventory(self, value: QuantConnect.Data.Fundamental.InventoryBalanceSheet):
        """A company's merchandise, raw materials, and finished and unfinished products which have not yet been sold."""
        ...

    @property
    def InvestmentsAndAdvances(self) -> QuantConnect.Data.Fundamental.InvestmentsAndAdvancesBalanceSheet:
        """All investments in affiliates, real estate, securities, etc. Non-current investment, not including marketable securities."""
        ...

    @InvestmentsAndAdvances.setter
    def InvestmentsAndAdvances(self, value: QuantConnect.Data.Fundamental.InvestmentsAndAdvancesBalanceSheet):
        """All investments in affiliates, real estate, securities, etc. Non-current investment, not including marketable securities."""
        ...

    @property
    def LimitedPartnershipCapital(self) -> QuantConnect.Data.Fundamental.LimitedPartnershipCapitalBalanceSheet:
        """
        In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the limited
        partners.
        """
        ...

    @LimitedPartnershipCapital.setter
    def LimitedPartnershipCapital(self, value: QuantConnect.Data.Fundamental.LimitedPartnershipCapitalBalanceSheet):
        """
        In a limited partnership or master limited partnership form of business, this represents the balance of capital held by the limited
        partners.
        """
        ...

    @property
    def LongTermDebt(self) -> QuantConnect.Data.Fundamental.LongTermDebtBalanceSheet:
        """
        Sum of the carrying values as of the balance sheet date of all long-term debt, which is debt initially having maturities due after one
        year or beyond the operating cycle, if longer, but excluding the portions thereof scheduled to be repaid within one year or the
        normal operating cycle, if longer. Long-term debt includes notes payable, bonds payable, mortgage loans, convertible debt,
        subordinated debt and other types of long term debt.
        """
        ...

    @LongTermDebt.setter
    def LongTermDebt(self, value: QuantConnect.Data.Fundamental.LongTermDebtBalanceSheet):
        """
        Sum of the carrying values as of the balance sheet date of all long-term debt, which is debt initially having maturities due after one
        year or beyond the operating cycle, if longer, but excluding the portions thereof scheduled to be repaid within one year or the
        normal operating cycle, if longer. Long-term debt includes notes payable, bonds payable, mortgage loans, convertible debt,
        subordinated debt and other types of long term debt.
        """
        ...

    @property
    def LongTermDebtAndCapitalLeaseObligation(self) -> QuantConnect.Data.Fundamental.LongTermDebtAndCapitalLeaseObligationBalanceSheet:
        """All borrowings lasting over one year including long-term debt and long-term portion of capital lease obligations."""
        ...

    @LongTermDebtAndCapitalLeaseObligation.setter
    def LongTermDebtAndCapitalLeaseObligation(self, value: QuantConnect.Data.Fundamental.LongTermDebtAndCapitalLeaseObligationBalanceSheet):
        """All borrowings lasting over one year including long-term debt and long-term portion of capital lease obligations."""
        ...

    @property
    def LongTermInvestments(self) -> QuantConnect.Data.Fundamental.LongTermInvestmentsBalanceSheet:
        """
        Often referred to simply as "investments". Long-term investments are to be held for many years and are not intended to be
        disposed in the near future. This group usually consists of four types of investments.
        """
        ...

    @LongTermInvestments.setter
    def LongTermInvestments(self, value: QuantConnect.Data.Fundamental.LongTermInvestmentsBalanceSheet):
        """
        Often referred to simply as "investments". Long-term investments are to be held for many years and are not intended to be
        disposed in the near future. This group usually consists of four types of investments.
        """
        ...

    @property
    def LongTermCapitalLeaseObligation(self) -> QuantConnect.Data.Fundamental.LongTermCapitalLeaseObligationBalanceSheet:
        """
        Represents the total liability for long-term leases lasting over one year. Amount equal to the present value (the principal) at the
        beginning of the lease term less lease payments during the lease term.
        """
        ...

    @LongTermCapitalLeaseObligation.setter
    def LongTermCapitalLeaseObligation(self, value: QuantConnect.Data.Fundamental.LongTermCapitalLeaseObligationBalanceSheet):
        """
        Represents the total liability for long-term leases lasting over one year. Amount equal to the present value (the principal) at the
        beginning of the lease term less lease payments during the lease term.
        """
        ...

    @property
    def MinorityInterest(self) -> QuantConnect.Data.Fundamental.MinorityInterestBalanceSheet:
        """
        Carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of
        the entities included in the reporting entity's consolidated financial statements.
        """
        ...

    @MinorityInterest.setter
    def MinorityInterest(self, value: QuantConnect.Data.Fundamental.MinorityInterestBalanceSheet):
        """
        Carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of
        the entities included in the reporting entity's consolidated financial statements.
        """
        ...

    @property
    def MoneyMarketInvestments(self) -> QuantConnect.Data.Fundamental.MoneyMarketInvestmentsBalanceSheet:
        """
        Short-term (typical maturity is less than one year), highly liquid government or corporate debt instrument such as bankers'
        acceptance, promissory notes, and treasury bills.
        """
        ...

    @MoneyMarketInvestments.setter
    def MoneyMarketInvestments(self, value: QuantConnect.Data.Fundamental.MoneyMarketInvestmentsBalanceSheet):
        """
        Short-term (typical maturity is less than one year), highly liquid government or corporate debt instrument such as bankers'
        acceptance, promissory notes, and treasury bills.
        """
        ...

    @property
    def NetLoan(self) -> QuantConnect.Data.Fundamental.NetLoanBalanceSheet:
        """Represents the value of all loans after deduction of the appropriate allowances for loan and lease losses."""
        ...

    @NetLoan.setter
    def NetLoan(self, value: QuantConnect.Data.Fundamental.NetLoanBalanceSheet):
        """Represents the value of all loans after deduction of the appropriate allowances for loan and lease losses."""
        ...

    @property
    def NetPPE(self) -> QuantConnect.Data.Fundamental.NetPPEBalanceSheet:
        """
        Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for
        administrative purposes and that are expected to provide economic benefit for more than one year; net of accumulated
        depreciation.
        """
        ...

    @NetPPE.setter
    def NetPPE(self, value: QuantConnect.Data.Fundamental.NetPPEBalanceSheet):
        """
        Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for
        administrative purposes and that are expected to provide economic benefit for more than one year; net of accumulated
        depreciation.
        """
        ...

    @property
    def NonInterestBearingDeposits(self) -> QuantConnect.Data.Fundamental.NonInterestBearingDepositsBalanceSheet:
        """The aggregate amount of all domestic and foreign deposits in the banks that do not draw interest."""
        ...

    @NonInterestBearingDeposits.setter
    def NonInterestBearingDeposits(self, value: QuantConnect.Data.Fundamental.NonInterestBearingDepositsBalanceSheet):
        """The aggregate amount of all domestic and foreign deposits in the banks that do not draw interest."""
        ...

    @property
    def CurrentNotesPayable(self) -> QuantConnect.Data.Fundamental.CurrentNotesPayableBalanceSheet:
        """Written promises to pay a stated sum at one or more specified dates in the future, within the accounting period."""
        ...

    @CurrentNotesPayable.setter
    def CurrentNotesPayable(self, value: QuantConnect.Data.Fundamental.CurrentNotesPayableBalanceSheet):
        """Written promises to pay a stated sum at one or more specified dates in the future, within the accounting period."""
        ...

    @property
    def NotesReceivable(self) -> QuantConnect.Data.Fundamental.NotesReceivableBalanceSheet:
        """
        An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money
        at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer. Such amount may
        include accrued interest receivable in accordance with the terms of the note. The note also may contain provisions including a
        discount or premium, payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among a myriad of other
        features and characteristics.
        """
        ...

    @NotesReceivable.setter
    def NotesReceivable(self, value: QuantConnect.Data.Fundamental.NotesReceivableBalanceSheet):
        """
        An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money
        at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer. Such amount may
        include accrued interest receivable in accordance with the terms of the note. The note also may contain provisions including a
        discount or premium, payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among a myriad of other
        features and characteristics.
        """
        ...

    @property
    def NonCurrentNoteReceivables(self) -> QuantConnect.Data.Fundamental.NonCurrentNoteReceivablesBalanceSheet:
        """
        An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money
        at a future date(s), excluding the portion that is expected to be received within one year of the balance sheet date or the normal
        operating cycle, whichever is longer.
        """
        ...

    @NonCurrentNoteReceivables.setter
    def NonCurrentNoteReceivables(self, value: QuantConnect.Data.Fundamental.NonCurrentNoteReceivablesBalanceSheet):
        """
        An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money
        at a future date(s), excluding the portion that is expected to be received within one year of the balance sheet date or the normal
        operating cycle, whichever is longer.
        """
        ...

    @property
    def OtherCurrentLiabilities(self) -> QuantConnect.Data.Fundamental.OtherCurrentLiabilitiesBalanceSheet:
        """
        Other current liabilities = Total current liabilities - Payables and accrued Expenses - Current debt and capital lease obligation -
        provisions, current - deferred liabilities, current.
        """
        ...

    @OtherCurrentLiabilities.setter
    def OtherCurrentLiabilities(self, value: QuantConnect.Data.Fundamental.OtherCurrentLiabilitiesBalanceSheet):
        """
        Other current liabilities = Total current liabilities - Payables and accrued Expenses - Current debt and capital lease obligation -
        provisions, current - deferred liabilities, current.
        """
        ...

    @property
    def OtherIntangibleAssets(self) -> QuantConnect.Data.Fundamental.OtherIntangibleAssetsBalanceSheet:
        """Sum of the carrying amounts of all intangible assets, excluding goodwill."""
        ...

    @OtherIntangibleAssets.setter
    def OtherIntangibleAssets(self, value: QuantConnect.Data.Fundamental.OtherIntangibleAssetsBalanceSheet):
        """Sum of the carrying amounts of all intangible assets, excluding goodwill."""
        ...

    @property
    def OtherShortTermInvestments(self) -> QuantConnect.Data.Fundamental.OtherShortTermInvestmentsBalanceSheet:
        """
        The aggregate amount of short term investments, which will be expired within one year that are not specifically classified as
        Available-for-Sale, Held-to-Maturity,  nor Trading investments.
        """
        ...

    @OtherShortTermInvestments.setter
    def OtherShortTermInvestments(self, value: QuantConnect.Data.Fundamental.OtherShortTermInvestmentsBalanceSheet):
        """
        The aggregate amount of short term investments, which will be expired within one year that are not specifically classified as
        Available-for-Sale, Held-to-Maturity,  nor Trading investments.
        """
        ...

    @property
    def Payables(self) -> QuantConnect.Data.Fundamental.PayablesBalanceSheet:
        """
        The sum of all payables owed and expected to be paid within one year or one operating cycle, including accounts payables, taxes
        payable, dividends payable and all other current payables.
        """
        ...

    @Payables.setter
    def Payables(self, value: QuantConnect.Data.Fundamental.PayablesBalanceSheet):
        """
        The sum of all payables owed and expected to be paid within one year or one operating cycle, including accounts payables, taxes
        payable, dividends payable and all other current payables.
        """
        ...

    @property
    def PayablesAndAccruedExpenses(self) -> QuantConnect.Data.Fundamental.PayablesAndAccruedExpensesBalanceSheet:
        """This balance sheet account includes all current payables and accrued expenses."""
        ...

    @PayablesAndAccruedExpenses.setter
    def PayablesAndAccruedExpenses(self, value: QuantConnect.Data.Fundamental.PayablesAndAccruedExpensesBalanceSheet):
        """This balance sheet account includes all current payables and accrued expenses."""
        ...

    @property
    def PolicyReservesBenefits(self) -> QuantConnect.Data.Fundamental.PolicyReservesBenefitsBalanceSheet:
        """
        Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be
        paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions
        regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.
        """
        ...

    @PolicyReservesBenefits.setter
    def PolicyReservesBenefits(self, value: QuantConnect.Data.Fundamental.PolicyReservesBenefitsBalanceSheet):
        """
        Accounting policy pertaining to an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be
        paid to or on behalf of policyholders, describing the bases, methodologies and components of the reserve, and assumptions
        regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.
        """
        ...

    @property
    def PolicyholderFunds(self) -> QuantConnect.Data.Fundamental.PolicyholderFundsBalanceSheet:
        """
        The total liability as of the balance sheet date of amounts due to policy holders, excluding future policy benefits and claims,
        including unpaid policy dividends, retrospective refunds, and undistributed earnings on participating business.
        """
        ...

    @PolicyholderFunds.setter
    def PolicyholderFunds(self, value: QuantConnect.Data.Fundamental.PolicyholderFundsBalanceSheet):
        """
        The total liability as of the balance sheet date of amounts due to policy holders, excluding future policy benefits and claims,
        including unpaid policy dividends, retrospective refunds, and undistributed earnings on participating business.
        """
        ...

    @property
    def PreferredSecuritiesOutsideStockEquity(self) -> QuantConnect.Data.Fundamental.PreferredSecuritiesOutsideStockEquityBalanceSheet:
        """Preferred securities that that firm treats as a liability. It includes convertible preferred stock or redeemable preferred stock."""
        ...

    @PreferredSecuritiesOutsideStockEquity.setter
    def PreferredSecuritiesOutsideStockEquity(self, value: QuantConnect.Data.Fundamental.PreferredSecuritiesOutsideStockEquityBalanceSheet):
        """Preferred securities that that firm treats as a liability. It includes convertible preferred stock or redeemable preferred stock."""
        ...

    @property
    def PreferredStock(self) -> QuantConnect.Data.Fundamental.PreferredStockBalanceSheet:
        """Preferred stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet."""
        ...

    @PreferredStock.setter
    def PreferredStock(self, value: QuantConnect.Data.Fundamental.PreferredStockBalanceSheet):
        """Preferred stock (all issues) at par value, as reported within the Stockholder's Equity section of the balance sheet."""
        ...

    @property
    def PrepaidAssets(self) -> QuantConnect.Data.Fundamental.PrepaidAssetsBalanceSheet:
        """Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in subsequent periods."""
        ...

    @PrepaidAssets.setter
    def PrepaidAssets(self, value: QuantConnect.Data.Fundamental.PrepaidAssetsBalanceSheet):
        """Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in subsequent periods."""
        ...

    @property
    def NonCurrentPrepaidAssets(self) -> QuantConnect.Data.Fundamental.NonCurrentPrepaidAssetsBalanceSheet:
        """
        Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in periods after one
        year or beyond the operating cycle, if longer.
        """
        ...

    @NonCurrentPrepaidAssets.setter
    def NonCurrentPrepaidAssets(self, value: QuantConnect.Data.Fundamental.NonCurrentPrepaidAssetsBalanceSheet):
        """
        Sum of the carrying amounts that are paid in advance for expenses, which will be charged against earnings in periods after one
        year or beyond the operating cycle, if longer.
        """
        ...

    @property
    def Receivables(self) -> QuantConnect.Data.Fundamental.ReceivablesBalanceSheet:
        """
        The sum of all receivables owed by customers and affiliates within one year, including accounts receivable, notes receivable,
        premiums receivable, and other current receivables.
        """
        ...

    @Receivables.setter
    def Receivables(self, value: QuantConnect.Data.Fundamental.ReceivablesBalanceSheet):
        """
        The sum of all receivables owed by customers and affiliates within one year, including accounts receivable, notes receivable,
        premiums receivable, and other current receivables.
        """
        ...

    @property
    def ReinsuranceRecoverable(self) -> QuantConnect.Data.Fundamental.ReinsuranceRecoverableBalanceSheet:
        """
        The amount of benefits the ceding insurer expects to recover on insurance policies ceded to other insurance entities as of the
        balance sheet date for all guaranteed benefit types. It includes estimated amounts for claims incurred but not reported, and policy
        benefits, net of any related valuation allowance.
        """
        ...

    @ReinsuranceRecoverable.setter
    def ReinsuranceRecoverable(self, value: QuantConnect.Data.Fundamental.ReinsuranceRecoverableBalanceSheet):
        """
        The amount of benefits the ceding insurer expects to recover on insurance policies ceded to other insurance entities as of the
        balance sheet date for all guaranteed benefit types. It includes estimated amounts for claims incurred but not reported, and policy
        benefits, net of any related valuation allowance.
        """
        ...

    @property
    def RetainedEarnings(self) -> QuantConnect.Data.Fundamental.RetainedEarningsBalanceSheet:
        """
        The cumulative net income of the company from the date of its inception (or reorganization) to the date of the financial statement
        less the cumulative distributions to shareholders either directly (dividends) or indirectly (treasury stock).
        """
        ...

    @RetainedEarnings.setter
    def RetainedEarnings(self, value: QuantConnect.Data.Fundamental.RetainedEarningsBalanceSheet):
        """
        The cumulative net income of the company from the date of its inception (or reorganization) to the date of the financial statement
        less the cumulative distributions to shareholders either directly (dividends) or indirectly (treasury stock).
        """
        ...

    @property
    def SecuritiesLendingCollateral(self) -> QuantConnect.Data.Fundamental.SecuritiesLendingCollateralBalanceSheet:
        """
        The carrying value as of the balance sheet date of the liabilities collateral securities loaned to other broker-dealers. Borrowers of
        securities generally are required to provide collateral to the lenders of securities, commonly cash but sometimes other securities or
        standby letters of credit, with a value slightly higher than that of the securities borrowed.
        """
        ...

    @SecuritiesLendingCollateral.setter
    def SecuritiesLendingCollateral(self, value: QuantConnect.Data.Fundamental.SecuritiesLendingCollateralBalanceSheet):
        """
        The carrying value as of the balance sheet date of the liabilities collateral securities loaned to other broker-dealers. Borrowers of
        securities generally are required to provide collateral to the lenders of securities, commonly cash but sometimes other securities or
        standby letters of credit, with a value slightly higher than that of the securities borrowed.
        """
        ...

    @property
    def SecurityAgreeToBeResell(self) -> QuantConnect.Data.Fundamental.SecurityAgreeToBeResellBalanceSheet:
        """
        The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to
        resell the identical security purchased or a security that meets the definition of "substantially the same" in the case of a dollar roll.
        Also includes purchases of participations in pools of securities that are subject to a resale agreement.
        """
        ...

    @SecurityAgreeToBeResell.setter
    def SecurityAgreeToBeResell(self, value: QuantConnect.Data.Fundamental.SecurityAgreeToBeResellBalanceSheet):
        """
        The carrying value of funds outstanding loaned in the form of security resale agreements if the agreement requires the purchaser to
        resell the identical security purchased or a security that meets the definition of "substantially the same" in the case of a dollar roll.
        Also includes purchases of participations in pools of securities that are subject to a resale agreement.
        """
        ...

    @property
    def SecuritySoldNotYetRepurchased(self) -> QuantConnect.Data.Fundamental.SecuritySoldNotYetRepurchasedBalanceSheet:
        """
        Represent obligations of the company to deliver the specified security at the contracted price and, thereby, create a liability to
        purchase the security in the market at prevailing prices.
        """
        ...

    @SecuritySoldNotYetRepurchased.setter
    def SecuritySoldNotYetRepurchased(self, value: QuantConnect.Data.Fundamental.SecuritySoldNotYetRepurchasedBalanceSheet):
        """
        Represent obligations of the company to deliver the specified security at the contracted price and, thereby, create a liability to
        purchase the security in the market at prevailing prices.
        """
        ...

    @property
    def SeparateAccountAssets(self) -> QuantConnect.Data.Fundamental.SeparateAccountAssetsBalanceSheet:
        """The fair value of the assets held by the company for the benefit of separate account policyholders."""
        ...

    @SeparateAccountAssets.setter
    def SeparateAccountAssets(self, value: QuantConnect.Data.Fundamental.SeparateAccountAssetsBalanceSheet):
        """The fair value of the assets held by the company for the benefit of separate account policyholders."""
        ...

    @property
    def SeparateAccountBusiness(self) -> QuantConnect.Data.Fundamental.SeparateAccountBusinessBalanceSheet:
        """Refers to revenue that is generated that is not part of typical operations."""
        ...

    @SeparateAccountBusiness.setter
    def SeparateAccountBusiness(self, value: QuantConnect.Data.Fundamental.SeparateAccountBusinessBalanceSheet):
        """Refers to revenue that is generated that is not part of typical operations."""
        ...

    @property
    def ShortTermInvestmentsAvailableForSale(self) -> QuantConnect.Data.Fundamental.ShortTermInvestmentsAvailableForSaleBalanceSheet:
        """
        The current assets section of a company's balance sheet that contains the investments that a company holds with the purpose for
        trading.
        """
        ...

    @ShortTermInvestmentsAvailableForSale.setter
    def ShortTermInvestmentsAvailableForSale(self, value: QuantConnect.Data.Fundamental.ShortTermInvestmentsAvailableForSaleBalanceSheet):
        """
        The current assets section of a company's balance sheet that contains the investments that a company holds with the purpose for
        trading.
        """
        ...

    @property
    def ShortTermInvestmentsHeldToMaturity(self) -> QuantConnect.Data.Fundamental.ShortTermInvestmentsHeldToMaturityBalanceSheet:
        """
        The current assets section of a company's balance sheet that contains the investments that a company has made that will expire
        at a fixed date within one year.
        """
        ...

    @ShortTermInvestmentsHeldToMaturity.setter
    def ShortTermInvestmentsHeldToMaturity(self, value: QuantConnect.Data.Fundamental.ShortTermInvestmentsHeldToMaturityBalanceSheet):
        """
        The current assets section of a company's balance sheet that contains the investments that a company has made that will expire
        at a fixed date within one year.
        """
        ...

    @property
    def ShortTermInvestmentsTrading(self) -> QuantConnect.Data.Fundamental.ShortTermInvestmentsTradingBalanceSheet:
        """The current assets section of a company's balance sheet that contains the investments that a company can trade at any moment."""
        ...

    @ShortTermInvestmentsTrading.setter
    def ShortTermInvestmentsTrading(self, value: QuantConnect.Data.Fundamental.ShortTermInvestmentsTradingBalanceSheet):
        """The current assets section of a company's balance sheet that contains the investments that a company can trade at any moment."""
        ...

    @property
    def StockholdersEquity(self) -> QuantConnect.Data.Fundamental.StockholdersEquityBalanceSheet:
        """
        The residual interest in the assets of the enterprise that remains after deducting its liabilities. Equity is increased by owners'
        investments and by comprehensive income, and it is reduced by distributions to the owners.
        """
        ...

    @StockholdersEquity.setter
    def StockholdersEquity(self, value: QuantConnect.Data.Fundamental.StockholdersEquityBalanceSheet):
        """
        The residual interest in the assets of the enterprise that remains after deducting its liabilities. Equity is increased by owners'
        investments and by comprehensive income, and it is reduced by distributions to the owners.
        """
        ...

    @property
    def TotalTaxPayable(self) -> QuantConnect.Data.Fundamental.TotalTaxPayableBalanceSheet:
        """
        A liability that reflects the taxes owed to federal, state, and local tax authorities. It is the carrying value as of the balance sheet
        date of obligations incurred and payable for statutory income, sales, use, payroll, excise, real, property and other taxes.
        """
        ...

    @TotalTaxPayable.setter
    def TotalTaxPayable(self, value: QuantConnect.Data.Fundamental.TotalTaxPayableBalanceSheet):
        """
        A liability that reflects the taxes owed to federal, state, and local tax authorities. It is the carrying value as of the balance sheet
        date of obligations incurred and payable for statutory income, sales, use, payroll, excise, real, property and other taxes.
        """
        ...

    @property
    def TotalAssets(self) -> QuantConnect.Data.Fundamental.TotalAssetsBalanceSheet:
        """
        The aggregate amount of probable future economic benefits obtained or controlled by a particular enterprise as a result of past
        transactions or events.
        """
        ...

    @TotalAssets.setter
    def TotalAssets(self, value: QuantConnect.Data.Fundamental.TotalAssetsBalanceSheet):
        """
        The aggregate amount of probable future economic benefits obtained or controlled by a particular enterprise as a result of past
        transactions or events.
        """
        ...

    @property
    def TotalDeposits(self) -> QuantConnect.Data.Fundamental.TotalDepositsBalanceSheet:
        """A liability account which represents the total amount of funds deposited."""
        ...

    @TotalDeposits.setter
    def TotalDeposits(self, value: QuantConnect.Data.Fundamental.TotalDepositsBalanceSheet):
        """A liability account which represents the total amount of funds deposited."""
        ...

    @property
    def TotalInvestments(self) -> QuantConnect.Data.Fundamental.TotalInvestmentsBalanceSheet:
        """
        Asset that refers to the sum of all available for sale securities and other investments often reported on the balance sheet of
        insurance firms.
        """
        ...

    @TotalInvestments.setter
    def TotalInvestments(self, value: QuantConnect.Data.Fundamental.TotalInvestmentsBalanceSheet):
        """
        Asset that refers to the sum of all available for sale securities and other investments often reported on the balance sheet of
        insurance firms.
        """
        ...

    @property
    def TotalNonCurrentAssets(self) -> QuantConnect.Data.Fundamental.TotalNonCurrentAssetsBalanceSheet:
        """
        Sum of the carrying amounts as of the balance sheet date of all assets that are expected to be realized in cash, sold or consumed
        after one year or beyond the normal operating cycle, if longer.
        """
        ...

    @TotalNonCurrentAssets.setter
    def TotalNonCurrentAssets(self, value: QuantConnect.Data.Fundamental.TotalNonCurrentAssetsBalanceSheet):
        """
        Sum of the carrying amounts as of the balance sheet date of all assets that are expected to be realized in cash, sold or consumed
        after one year or beyond the normal operating cycle, if longer.
        """
        ...

    @property
    def TotalPartnershipCapital(self) -> QuantConnect.Data.Fundamental.TotalPartnershipCapitalBalanceSheet:
        """
        Ownership interest of different classes of partners in the publicly listed limited partnership or master limited partnership. Partners
        include general, limited and preferred partners.
        """
        ...

    @TotalPartnershipCapital.setter
    def TotalPartnershipCapital(self, value: QuantConnect.Data.Fundamental.TotalPartnershipCapitalBalanceSheet):
        """
        Ownership interest of different classes of partners in the publicly listed limited partnership or master limited partnership. Partners
        include general, limited and preferred partners.
        """
        ...

    @property
    def TradingAssets(self) -> QuantConnect.Data.Fundamental.TradingAssetsBalanceSheet:
        """
        Trading account assets are bought and held principally for the purpose of selling them in the near term (thus held for only a short
        period of time). Unrealized holding gains and losses for trading securities are included in earnings.
        """
        ...

    @TradingAssets.setter
    def TradingAssets(self, value: QuantConnect.Data.Fundamental.TradingAssetsBalanceSheet):
        """
        Trading account assets are bought and held principally for the purpose of selling them in the near term (thus held for only a short
        period of time). Unrealized holding gains and losses for trading securities are included in earnings.
        """
        ...

    @property
    def TradingLiabilities(self) -> QuantConnect.Data.Fundamental.TradingLiabilitiesBalanceSheet:
        """
        The carrying amount of liabilities as of the balance sheet date that pertain to principal and customer trading transactions, or which
        may be incurred with the objective of generating a profit from short-term fluctuations in price as part of an entity's market-making,
        hedging and proprietary trading. Examples include short positions in securities, derivatives and commodities, obligations under
        repurchase agreements, and securities borrowed arrangements.
        """
        ...

    @TradingLiabilities.setter
    def TradingLiabilities(self, value: QuantConnect.Data.Fundamental.TradingLiabilitiesBalanceSheet):
        """
        The carrying amount of liabilities as of the balance sheet date that pertain to principal and customer trading transactions, or which
        may be incurred with the objective of generating a profit from short-term fluctuations in price as part of an entity's market-making,
        hedging and proprietary trading. Examples include short positions in securities, derivatives and commodities, obligations under
        repurchase agreements, and securities borrowed arrangements.
        """
        ...

    @property
    def TradingSecurities(self) -> QuantConnect.Data.Fundamental.TradingSecuritiesBalanceSheet:
        """
        The total of financial instruments that are bought and held principally for the purpose of selling them in the near term (thus held for
        only a short period of time) or for debt and equity securities formerly categorized as available-for-sale or held-to-maturity which the
        company held as of the date it opted to account for such securities at fair value.
        """
        ...

    @TradingSecurities.setter
    def TradingSecurities(self, value: QuantConnect.Data.Fundamental.TradingSecuritiesBalanceSheet):
        """
        The total of financial instruments that are bought and held principally for the purpose of selling them in the near term (thus held for
        only a short period of time) or for debt and equity securities formerly categorized as available-for-sale or held-to-maturity which the
        company held as of the date it opted to account for such securities at fair value.
        """
        ...

    @property
    def TreasuryStock(self) -> QuantConnect.Data.Fundamental.TreasuryStockBalanceSheet:
        """
        The portion of shares that a company keeps in their own treasury. Treasury stock may have come from a repurchase or buyback
        from shareholders; or it may have never been issued to the public in the first place. These shares don't pay dividends, have no
        voting rights, and are not included in shares outstanding calculations.
        """
        ...

    @TreasuryStock.setter
    def TreasuryStock(self, value: QuantConnect.Data.Fundamental.TreasuryStockBalanceSheet):
        """
        The portion of shares that a company keeps in their own treasury. Treasury stock may have come from a repurchase or buyback
        from shareholders; or it may have never been issued to the public in the first place. These shares don't pay dividends, have no
        voting rights, and are not included in shares outstanding calculations.
        """
        ...

    @property
    def UnearnedIncome(self) -> QuantConnect.Data.Fundamental.UnearnedIncomeBalanceSheet:
        """Income received but not yet earned, it represents the unearned amount that is netted against the total loan."""
        ...

    @UnearnedIncome.setter
    def UnearnedIncome(self, value: QuantConnect.Data.Fundamental.UnearnedIncomeBalanceSheet):
        """Income received but not yet earned, it represents the unearned amount that is netted against the total loan."""
        ...

    @property
    def UnearnedPremiums(self) -> QuantConnect.Data.Fundamental.UnearnedPremiumsBalanceSheet:
        """Carrying amount of premiums written on insurance contracts that have not been earned as of the balance sheet date."""
        ...

    @UnearnedPremiums.setter
    def UnearnedPremiums(self, value: QuantConnect.Data.Fundamental.UnearnedPremiumsBalanceSheet):
        """Carrying amount of premiums written on insurance contracts that have not been earned as of the balance sheet date."""
        ...

    @property
    def UnpaidLossAndLossReserve(self) -> QuantConnect.Data.Fundamental.UnpaidLossAndLossReserveBalanceSheet:
        """
        Liability amount that reflects claims that are expected based upon statistical projections, but which have not been reported to the
        insurer.
        """
        ...

    @UnpaidLossAndLossReserve.setter
    def UnpaidLossAndLossReserve(self, value: QuantConnect.Data.Fundamental.UnpaidLossAndLossReserveBalanceSheet):
        """
        Liability amount that reflects claims that are expected based upon statistical projections, but which have not been reported to the
        insurer.
        """
        ...

    @property
    def InvestedCapital(self) -> QuantConnect.Data.Fundamental.InvestedCapitalBalanceSheet:
        """Invested capital = common shareholders' equity + long term debt + current debt"""
        ...

    @InvestedCapital.setter
    def InvestedCapital(self, value: QuantConnect.Data.Fundamental.InvestedCapitalBalanceSheet):
        """Invested capital = common shareholders' equity + long term debt + current debt"""
        ...

    @property
    def CurrentDeferredAssets(self) -> QuantConnect.Data.Fundamental.CurrentDeferredAssetsBalanceSheet:
        """
        Payments that will be assigned as expenses with one accounting period, but that are paid in advance and temporarily set up as
        current assets on the balance sheet.
        """
        ...

    @CurrentDeferredAssets.setter
    def CurrentDeferredAssets(self, value: QuantConnect.Data.Fundamental.CurrentDeferredAssetsBalanceSheet):
        """
        Payments that will be assigned as expenses with one accounting period, but that are paid in advance and temporarily set up as
        current assets on the balance sheet.
        """
        ...

    @property
    def NonCurrentDeferredAssets(self) -> QuantConnect.Data.Fundamental.NonCurrentDeferredAssetsBalanceSheet:
        """
        Payments that will be assigned as expenses longer than one accounting period, but that are paid in advance and temporarily set up
        as non-current assets on the balance sheet.
        """
        ...

    @NonCurrentDeferredAssets.setter
    def NonCurrentDeferredAssets(self, value: QuantConnect.Data.Fundamental.NonCurrentDeferredAssetsBalanceSheet):
        """
        Payments that will be assigned as expenses longer than one accounting period, but that are paid in advance and temporarily set up
        as non-current assets on the balance sheet.
        """
        ...

    @property
    def SecuritiesAndInvestments(self) -> QuantConnect.Data.Fundamental.SecuritiesAndInvestmentsBalanceSheet:
        """Asset, often applicable to Banks, which refers to the aggregate amount of all securities and investments."""
        ...

    @SecuritiesAndInvestments.setter
    def SecuritiesAndInvestments(self, value: QuantConnect.Data.Fundamental.SecuritiesAndInvestmentsBalanceSheet):
        """Asset, often applicable to Banks, which refers to the aggregate amount of all securities and investments."""
        ...

    @property
    def TotalLiabilitiesNetMinorityInterest(self) -> QuantConnect.Data.Fundamental.TotalLiabilitiesNetMinorityInterestBalanceSheet:
        """
        Probable future sacrifices of economic benefits arising from present obligations of an enterprise to transfer assets or provide
        services to others in the future as a result of past transactions or events, excluding minority interest.
        """
        ...

    @TotalLiabilitiesNetMinorityInterest.setter
    def TotalLiabilitiesNetMinorityInterest(self, value: QuantConnect.Data.Fundamental.TotalLiabilitiesNetMinorityInterestBalanceSheet):
        """
        Probable future sacrifices of economic benefits arising from present obligations of an enterprise to transfer assets or provide
        services to others in the future as a result of past transactions or events, excluding minority interest.
        """
        ...

    @property
    def TotalNonCurrentLiabilitiesNetMinorityInterest(self) -> QuantConnect.Data.Fundamental.TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet:
        """
        Total obligations, net minority interest, incurred as part of normal operations that is expected to be repaid beyond the following
        twelve months or one business cycle; excludes minority interest.
        """
        ...

    @TotalNonCurrentLiabilitiesNetMinorityInterest.setter
    def TotalNonCurrentLiabilitiesNetMinorityInterest(self, value: QuantConnect.Data.Fundamental.TotalNonCurrentLiabilitiesNetMinorityInterestBalanceSheet):
        """
        Total obligations, net minority interest, incurred as part of normal operations that is expected to be repaid beyond the following
        twelve months or one business cycle; excludes minority interest.
        """
        ...

    @property
    def TotalEquityGrossMinorityInterest(self) -> QuantConnect.Data.Fundamental.TotalEquityGrossMinorityInterestBalanceSheet:
        """
        Residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is
        increased by owners' investments and by comprehensive income, and it is reduced by distributions to the owners.
        """
        ...

    @TotalEquityGrossMinorityInterest.setter
    def TotalEquityGrossMinorityInterest(self, value: QuantConnect.Data.Fundamental.TotalEquityGrossMinorityInterestBalanceSheet):
        """
        Residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is
        increased by owners' investments and by comprehensive income, and it is reduced by distributions to the owners.
        """
        ...

    @property
    def GrossAccountsReceivable(self) -> QuantConnect.Data.Fundamental.GrossAccountsReceivableBalanceSheet:
        """Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit."""
        ...

    @GrossAccountsReceivable.setter
    def GrossAccountsReceivable(self, value: QuantConnect.Data.Fundamental.GrossAccountsReceivableBalanceSheet):
        """Accounts owed to a company by customers within a year as a result of exchanging goods or services on credit."""
        ...

    @property
    def NonCurrentAccountsReceivable(self) -> QuantConnect.Data.Fundamental.NonCurrentAccountsReceivableBalanceSheet:
        """
        Accounts receivable represents sums owed to the business that the business records as revenue. Gross accounts receivable is
        accounts receivable before the business deducts uncollectable accounts to calculate the true value of accounts receivable.
        """
        ...

    @NonCurrentAccountsReceivable.setter
    def NonCurrentAccountsReceivable(self, value: QuantConnect.Data.Fundamental.NonCurrentAccountsReceivableBalanceSheet):
        """
        Accounts receivable represents sums owed to the business that the business records as revenue. Gross accounts receivable is
        accounts receivable before the business deducts uncollectable accounts to calculate the true value of accounts receivable.
        """
        ...

    @property
    def AccruedInterestReceivable(self) -> QuantConnect.Data.Fundamental.AccruedInterestReceivableBalanceSheet:
        """
        This account shows the amount of unpaid interest accrued to the date of purchase and included in the purchase price of securities
        purchased between interest dates.
        """
        ...

    @AccruedInterestReceivable.setter
    def AccruedInterestReceivable(self, value: QuantConnect.Data.Fundamental.AccruedInterestReceivableBalanceSheet):
        """
        This account shows the amount of unpaid interest accrued to the date of purchase and included in the purchase price of securities
        purchased between interest dates.
        """
        ...

    @property
    def AdvanceFromFederalHomeLoanBanks(self) -> QuantConnect.Data.Fundamental.AdvanceFromFederalHomeLoanBanksBalanceSheet:
        """
        This item is typically available for bank industry. It's the amount of borrowings as of the balance sheet date from the Federal Home
        Loan Bank, which are primarily used to cover shortages in the required reserve balance and liquidity shortages.
        """
        ...

    @AdvanceFromFederalHomeLoanBanks.setter
    def AdvanceFromFederalHomeLoanBanks(self, value: QuantConnect.Data.Fundamental.AdvanceFromFederalHomeLoanBanksBalanceSheet):
        """
        This item is typically available for bank industry. It's the amount of borrowings as of the balance sheet date from the Federal Home
        Loan Bank, which are primarily used to cover shortages in the required reserve balance and liquidity shortages.
        """
        ...

    @property
    def AllowanceForDoubtfulAccountsReceivable(self) -> QuantConnect.Data.Fundamental.AllowanceForDoubtfulAccountsReceivableBalanceSheet:
        """An Allowance for Doubtful Accounts measures receivables recorded but not expected to be collected."""
        ...

    @AllowanceForDoubtfulAccountsReceivable.setter
    def AllowanceForDoubtfulAccountsReceivable(self, value: QuantConnect.Data.Fundamental.AllowanceForDoubtfulAccountsReceivableBalanceSheet):
        """An Allowance for Doubtful Accounts measures receivables recorded but not expected to be collected."""
        ...

    @property
    def AllowanceForNotesReceivable(self) -> QuantConnect.Data.Fundamental.AllowanceForNotesReceivableBalanceSheet:
        """
        This item is typically available for bank industry. It represents a provision relating to a written agreement to receive money  with the
        terms of the note (at a specified future date(s) within one year from the reporting date (or the normal operating cycle, whichever is
        longer), consisting of principal as well as any accrued interest) for the portion that is expected to be uncollectible.
        """
        ...

    @AllowanceForNotesReceivable.setter
    def AllowanceForNotesReceivable(self, value: QuantConnect.Data.Fundamental.AllowanceForNotesReceivableBalanceSheet):
        """
        This item is typically available for bank industry. It represents a provision relating to a written agreement to receive money  with the
        terms of the note (at a specified future date(s) within one year from the reporting date (or the normal operating cycle, whichever is
        longer), consisting of principal as well as any accrued interest) for the portion that is expected to be uncollectible.
        """
        ...

    @property
    def AssetsHeldForSale(self) -> QuantConnect.Data.Fundamental.AssetsHeldForSaleBalanceSheet:
        """This item is typically available for bank industry. It's a part of long-lived assets, which has been decided for sale in the future."""
        ...

    @AssetsHeldForSale.setter
    def AssetsHeldForSale(self, value: QuantConnect.Data.Fundamental.AssetsHeldForSaleBalanceSheet):
        """This item is typically available for bank industry. It's a part of long-lived assets, which has been decided for sale in the future."""
        ...

    @property
    def AssetsOfDiscontinuedOperations(self) -> QuantConnect.Data.Fundamental.AssetsOfDiscontinuedOperationsBalanceSheet:
        """A portion of a company's business that has been disposed of or sold."""
        ...

    @AssetsOfDiscontinuedOperations.setter
    def AssetsOfDiscontinuedOperations(self, value: QuantConnect.Data.Fundamental.AssetsOfDiscontinuedOperationsBalanceSheet):
        """A portion of a company's business that has been disposed of or sold."""
        ...

    @property
    def BankIndebtedness(self) -> QuantConnect.Data.Fundamental.BankIndebtednessBalanceSheet:
        """
        All indebtedness for borrowed money or the deferred purchase price of property or services, including without limitation
        reimbursement and other obligations with respect to surety bonds and letters of credit, all obligations evidenced by notes, bonds
        debentures or similar instruments, all capital lease obligations and all contingent obligations.
        """
        ...

    @BankIndebtedness.setter
    def BankIndebtedness(self, value: QuantConnect.Data.Fundamental.BankIndebtednessBalanceSheet):
        """
        All indebtedness for borrowed money or the deferred purchase price of property or services, including without limitation
        reimbursement and other obligations with respect to surety bonds and letters of credit, all obligations evidenced by notes, bonds
        debentures or similar instruments, all capital lease obligations and all contingent obligations.
        """
        ...

    @property
    def BankOwnedLifeInsurance(self) -> QuantConnect.Data.Fundamental.BankOwnedLifeInsuranceBalanceSheet:
        """
        The carrying amount of a life insurance policy on an officer, executive or employee for which the reporting entity (a bank) is entitled
        to proceeds from the policy upon death of the insured or surrender of the insurance policy.
        """
        ...

    @BankOwnedLifeInsurance.setter
    def BankOwnedLifeInsurance(self, value: QuantConnect.Data.Fundamental.BankOwnedLifeInsuranceBalanceSheet):
        """
        The carrying amount of a life insurance policy on an officer, executive or employee for which the reporting entity (a bank) is entitled
        to proceeds from the policy upon death of the insured or surrender of the insurance policy.
        """
        ...

    @property
    def SecurityBorrowed(self) -> QuantConnect.Data.Fundamental.SecurityBorrowedBalanceSheet:
        """
        The securities borrowed or on loan, which is the temporary loan of securities by a lender to a borrower in exchange for cash.  This
        item is usually only available for bank industry.
        """
        ...

    @SecurityBorrowed.setter
    def SecurityBorrowed(self, value: QuantConnect.Data.Fundamental.SecurityBorrowedBalanceSheet):
        """
        The securities borrowed or on loan, which is the temporary loan of securities by a lender to a borrower in exchange for cash.  This
        item is usually only available for bank industry.
        """
        ...

    @property
    def BuildingsAndImprovements(self) -> QuantConnect.Data.Fundamental.BuildingsAndImprovementsBalanceSheet:
        """Fixed assets that specifically deal with the facilities a company owns. Include the improvements associated with buildings."""
        ...

    @BuildingsAndImprovements.setter
    def BuildingsAndImprovements(self, value: QuantConnect.Data.Fundamental.BuildingsAndImprovementsBalanceSheet):
        """Fixed assets that specifically deal with the facilities a company owns. Include the improvements associated with buildings."""
        ...

    @property
    def CommercialLoan(self) -> QuantConnect.Data.Fundamental.CommercialLoanBalanceSheet:
        """Short-term loan, typically 90 days, used by a company to finance seasonal working capital needs."""
        ...

    @CommercialLoan.setter
    def CommercialLoan(self, value: QuantConnect.Data.Fundamental.CommercialLoanBalanceSheet):
        """Short-term loan, typically 90 days, used by a company to finance seasonal working capital needs."""
        ...

    @property
    def CommercialPaper(self) -> QuantConnect.Data.Fundamental.CommercialPaperBalanceSheet:
        """
        Commercial paper is a money-market security issued by large banks and corporations. It represents the current obligation for the
        company. There are four basic kinds of commercial paper: promissory notes, drafts, checks, and certificates of deposit. The
        maturities of these money market securities generally do not exceed 270 days.
        """
        ...

    @CommercialPaper.setter
    def CommercialPaper(self, value: QuantConnect.Data.Fundamental.CommercialPaperBalanceSheet):
        """
        Commercial paper is a money-market security issued by large banks and corporations. It represents the current obligation for the
        company. There are four basic kinds of commercial paper: promissory notes, drafts, checks, and certificates of deposit. The
        maturities of these money market securities generally do not exceed 270 days.
        """
        ...

    @property
    def CommonStockEquity(self) -> QuantConnect.Data.Fundamental.CommonStockEquityBalanceSheet:
        """The portion of the Stockholders' Equity that reflects the amount of common stock, which are units of ownership."""
        ...

    @CommonStockEquity.setter
    def CommonStockEquity(self, value: QuantConnect.Data.Fundamental.CommonStockEquityBalanceSheet):
        """The portion of the Stockholders' Equity that reflects the amount of common stock, which are units of ownership."""
        ...

    @property
    def ConstructionInProgress(self) -> QuantConnect.Data.Fundamental.ConstructionInProgressBalanceSheet:
        """
        It represents carrying amount of long-lived asset under construction that includes construction costs to date on capital projects.
        Assets constructed, but not completed.
        """
        ...

    @ConstructionInProgress.setter
    def ConstructionInProgress(self, value: QuantConnect.Data.Fundamental.ConstructionInProgressBalanceSheet):
        """
        It represents carrying amount of long-lived asset under construction that includes construction costs to date on capital projects.
        Assets constructed, but not completed.
        """
        ...

    @property
    def ConsumerLoan(self) -> QuantConnect.Data.Fundamental.ConsumerLoanBalanceSheet:
        """
        A loan that establishes consumer credit that is granted for personal use; usually unsecured and based on the borrower's integrity
        and ability to pay.
        """
        ...

    @ConsumerLoan.setter
    def ConsumerLoan(self, value: QuantConnect.Data.Fundamental.ConsumerLoanBalanceSheet):
        """
        A loan that establishes consumer credit that is granted for personal use; usually unsecured and based on the borrower's integrity
        and ability to pay.
        """
        ...

    @property
    def MinimumPensionLiabilities(self) -> QuantConnect.Data.Fundamental.MinimumPensionLiabilitiesBalanceSheet:
        """
        The company's minimum pension obligations to its former employees, paid into a defined pension plan to satisfy all pension
        entitlements that have been earned by employees to date.
        """
        ...

    @MinimumPensionLiabilities.setter
    def MinimumPensionLiabilities(self, value: QuantConnect.Data.Fundamental.MinimumPensionLiabilitiesBalanceSheet):
        """
        The company's minimum pension obligations to its former employees, paid into a defined pension plan to satisfy all pension
        entitlements that have been earned by employees to date.
        """
        ...

    @property
    def CustomerAcceptances(self) -> QuantConnect.Data.Fundamental.CustomerAcceptancesBalanceSheet:
        """
        Amounts receivable from customers on short-term negotiable time drafts drawn on and accepted by the institution (also known as
        banker's acceptance transactions) that are outstanding on the reporting date.
        """
        ...

    @CustomerAcceptances.setter
    def CustomerAcceptances(self, value: QuantConnect.Data.Fundamental.CustomerAcceptancesBalanceSheet):
        """
        Amounts receivable from customers on short-term negotiable time drafts drawn on and accepted by the institution (also known as
        banker's acceptance transactions) that are outstanding on the reporting date.
        """
        ...

    @property
    def DefinedPensionBenefit(self) -> QuantConnect.Data.Fundamental.DefinedPensionBenefitBalanceSheet:
        """The recognition of an asset where pension fund assets exceed promised benefits."""
        ...

    @DefinedPensionBenefit.setter
    def DefinedPensionBenefit(self, value: QuantConnect.Data.Fundamental.DefinedPensionBenefitBalanceSheet):
        """The recognition of an asset where pension fund assets exceed promised benefits."""
        ...

    @property
    def DerivativeProductLiabilities(self) -> QuantConnect.Data.Fundamental.DerivativeProductLiabilitiesBalanceSheet:
        """
        Fair values of all liabilities resulting from contracts that meet the criteria of being accounted for as derivative instruments; and
        which are expected to be extinguished or otherwise disposed of after one year or beyond the normal operating cycle.
        """
        ...

    @DerivativeProductLiabilities.setter
    def DerivativeProductLiabilities(self, value: QuantConnect.Data.Fundamental.DerivativeProductLiabilitiesBalanceSheet):
        """
        Fair values of all liabilities resulting from contracts that meet the criteria of being accounted for as derivative instruments; and
        which are expected to be extinguished or otherwise disposed of after one year or beyond the normal operating cycle.
        """
        ...

    @property
    def DerivativeAssets(self) -> QuantConnect.Data.Fundamental.DerivativeAssetsBalanceSheet:
        """
        Fair values of assets resulting from contracts that meet the criteria of being accounted for as derivative instruments, net of the
        effects of master netting arrangements.
        """
        ...

    @DerivativeAssets.setter
    def DerivativeAssets(self, value: QuantConnect.Data.Fundamental.DerivativeAssetsBalanceSheet):
        """
        Fair values of assets resulting from contracts that meet the criteria of being accounted for as derivative instruments, net of the
        effects of master netting arrangements.
        """
        ...

    @property
    def DividendsPayable(self) -> QuantConnect.Data.Fundamental.DividendsPayableBalanceSheet:
        """
        Sum of the carrying values of dividends declared but unpaid on equity securities issued and outstanding (also includes dividends
        collected on behalf of another owner of securities that are being held by entity) by the entity.
        """
        ...

    @DividendsPayable.setter
    def DividendsPayable(self, value: QuantConnect.Data.Fundamental.DividendsPayableBalanceSheet):
        """
        Sum of the carrying values of dividends declared but unpaid on equity securities issued and outstanding (also includes dividends
        collected on behalf of another owner of securities that are being held by entity) by the entity.
        """
        ...

    @property
    def EmployeeBenefits(self) -> QuantConnect.Data.Fundamental.EmployeeBenefitsBalanceSheet:
        """
        Carrying amount as of the balance sheet date of the portion of the obligations recognized for the various benefits provided to former
        or inactive employees, their beneficiaries, and covered dependents after employment but before retirement.
        """
        ...

    @EmployeeBenefits.setter
    def EmployeeBenefits(self, value: QuantConnect.Data.Fundamental.EmployeeBenefitsBalanceSheet):
        """
        Carrying amount as of the balance sheet date of the portion of the obligations recognized for the various benefits provided to former
        or inactive employees, their beneficiaries, and covered dependents after employment but before retirement.
        """
        ...

    @property
    def FederalFundsPurchased(self) -> QuantConnect.Data.Fundamental.FederalFundsPurchasedBalanceSheet:
        """
        The amount borrowed by a bank, at the federal funds rate, from another bank to meet its reserve requirements.  This item is
        typically available for the bank industry.
        """
        ...

    @FederalFundsPurchased.setter
    def FederalFundsPurchased(self, value: QuantConnect.Data.Fundamental.FederalFundsPurchasedBalanceSheet):
        """
        The amount borrowed by a bank, at the federal funds rate, from another bank to meet its reserve requirements.  This item is
        typically available for the bank industry.
        """
        ...

    @property
    def FederalFundsSold(self) -> QuantConnect.Data.Fundamental.FederalFundsSoldBalanceSheet:
        """
        Federal funds transactions involve lending (federal funds sold) or borrowing (federal funds purchased) of immediately available
        reserve balances.  This item is typically available for the bank industry.
        """
        ...

    @FederalFundsSold.setter
    def FederalFundsSold(self, value: QuantConnect.Data.Fundamental.FederalFundsSoldBalanceSheet):
        """
        Federal funds transactions involve lending (federal funds sold) or borrowing (federal funds purchased) of immediately available
        reserve balances.  This item is typically available for the bank industry.
        """
        ...

    @property
    def FederalHomeLoanBankStock(self) -> QuantConnect.Data.Fundamental.FederalHomeLoanBankStockBalanceSheet:
        """
        Federal Home Loan Bank stock represents an equity interest in a FHLB. It does not have a readily determinable fair value because
        its ownership is restricted and it lacks a market (liquidity).  This item is typically available for the bank industry.
        """
        ...

    @FederalHomeLoanBankStock.setter
    def FederalHomeLoanBankStock(self, value: QuantConnect.Data.Fundamental.FederalHomeLoanBankStockBalanceSheet):
        """
        Federal Home Loan Bank stock represents an equity interest in a FHLB. It does not have a readily determinable fair value because
        its ownership is restricted and it lacks a market (liquidity).  This item is typically available for the bank industry.
        """
        ...

    @property
    def FinancialAssets(self) -> QuantConnect.Data.Fundamental.FinancialAssetsBalanceSheet:
        """
        Fair values as of the balance sheet date of all assets resulting from contracts that meet the criteria of being accounted for as
        derivative instruments, net of the effects of master netting arrangements.
        """
        ...

    @FinancialAssets.setter
    def FinancialAssets(self, value: QuantConnect.Data.Fundamental.FinancialAssetsBalanceSheet):
        """
        Fair values as of the balance sheet date of all assets resulting from contracts that meet the criteria of being accounted for as
        derivative instruments, net of the effects of master netting arrangements.
        """
        ...

    @property
    def FinancialInstrumentsSoldUnderAgreementsToRepurchase(self) -> QuantConnect.Data.Fundamental.FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet:
        """
        The carrying value as of the balance sheet date of securities that an institution sells and agrees to repurchase (the identical or
        substantially the same securities) as a seller-borrower at a specified date for a specified price, also known as a repurchase
        agreement.  This item is typically available for bank industry.
        """
        ...

    @FinancialInstrumentsSoldUnderAgreementsToRepurchase.setter
    def FinancialInstrumentsSoldUnderAgreementsToRepurchase(self, value: QuantConnect.Data.Fundamental.FinancialInstrumentsSoldUnderAgreementsToRepurchaseBalanceSheet):
        """
        The carrying value as of the balance sheet date of securities that an institution sells and agrees to repurchase (the identical or
        substantially the same securities) as a seller-borrower at a specified date for a specified price, also known as a repurchase
        agreement.  This item is typically available for bank industry.
        """
        ...

    @property
    def FinishedGoods(self) -> QuantConnect.Data.Fundamental.FinishedGoodsBalanceSheet:
        """
        The carrying amount as of the balance sheet date of merchandise or goods held by the company that are readily available for sale.
        This item is typically available for mining and manufacturing industries.
        """
        ...

    @FinishedGoods.setter
    def FinishedGoods(self, value: QuantConnect.Data.Fundamental.FinishedGoodsBalanceSheet):
        """
        The carrying amount as of the balance sheet date of merchandise or goods held by the company that are readily available for sale.
        This item is typically available for mining and manufacturing industries.
        """
        ...

    @property
    def FlightFleetVehicleAndRelatedEquipments(self) -> QuantConnect.Data.Fundamental.FlightFleetVehicleAndRelatedEquipmentsBalanceSheet:
        """
        It is one of the important fixed assets for transportation industry, which includes bicycles, cars, motorcycles, trains, ships, boats,
        and aircraft.  This item is typically available for transportation industry.
        """
        ...

    @FlightFleetVehicleAndRelatedEquipments.setter
    def FlightFleetVehicleAndRelatedEquipments(self, value: QuantConnect.Data.Fundamental.FlightFleetVehicleAndRelatedEquipmentsBalanceSheet):
        """
        It is one of the important fixed assets for transportation industry, which includes bicycles, cars, motorcycles, trains, ships, boats,
        and aircraft.  This item is typically available for transportation industry.
        """
        ...

    @property
    def ForeclosedAssets(self) -> QuantConnect.Data.Fundamental.ForeclosedAssetsBalanceSheet:
        """
        The carrying amount as of the balance sheet date of all assets obtained in full or partial satisfaction of a debt arrangement through
        foreclosure proceedings or defeasance; includes real and personal property; equity interests in corporations, partnerships, and joint
        ventures; and beneficial interest in trusts.  This item is typically typically available for bank industry.
        """
        ...

    @ForeclosedAssets.setter
    def ForeclosedAssets(self, value: QuantConnect.Data.Fundamental.ForeclosedAssetsBalanceSheet):
        """
        The carrying amount as of the balance sheet date of all assets obtained in full or partial satisfaction of a debt arrangement through
        foreclosure proceedings or defeasance; includes real and personal property; equity interests in corporations, partnerships, and joint
        ventures; and beneficial interest in trusts.  This item is typically typically available for bank industry.
        """
        ...

    @property
    def ForeignCurrencyTranslationAdjustments(self) -> QuantConnect.Data.Fundamental.ForeignCurrencyTranslationAdjustmentsBalanceSheet:
        """
        Changes to accumulated comprehensive income that results from the process of translating subsidiary financial statements and
        foreign equity investments into functional currency of the reporting company.
        """
        ...

    @ForeignCurrencyTranslationAdjustments.setter
    def ForeignCurrencyTranslationAdjustments(self, value: QuantConnect.Data.Fundamental.ForeignCurrencyTranslationAdjustmentsBalanceSheet):
        """
        Changes to accumulated comprehensive income that results from the process of translating subsidiary financial statements and
        foreign equity investments into functional currency of the reporting company.
        """
        ...

    @property
    def InventoriesAdjustmentsAllowances(self) -> QuantConnect.Data.Fundamental.InventoriesAdjustmentsAllowancesBalanceSheet:
        """
        This item represents certain charges made in the current period in inventory resulting from such factors as breakage, spoilage,
        employee theft and shoplifting. This item is typically available for manufacturing, mining and utility industries.
        """
        ...

    @InventoriesAdjustmentsAllowances.setter
    def InventoriesAdjustmentsAllowances(self, value: QuantConnect.Data.Fundamental.InventoriesAdjustmentsAllowancesBalanceSheet):
        """
        This item represents certain charges made in the current period in inventory resulting from such factors as breakage, spoilage,
        employee theft and shoplifting. This item is typically available for manufacturing, mining and utility industries.
        """
        ...

    @property
    def InvestmentsInOtherVenturesUnderEquityMethod(self) -> QuantConnect.Data.Fundamental.InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet:
        """
        This item represents the carrying amount on the company's balance sheet of its investments in common stock of an equity method.
        This item is typically available for the insurance industry.
        """
        ...

    @InvestmentsInOtherVenturesUnderEquityMethod.setter
    def InvestmentsInOtherVenturesUnderEquityMethod(self, value: QuantConnect.Data.Fundamental.InvestmentsInOtherVenturesUnderEquityMethodBalanceSheet):
        """
        This item represents the carrying amount on the company's balance sheet of its investments in common stock of an equity method.
        This item is typically available for the insurance industry.
        """
        ...

    @property
    def LandAndImprovements(self) -> QuantConnect.Data.Fundamental.LandAndImprovementsBalanceSheet:
        """
        Fixed Assets that specifically deal with land a company owns. Includes the improvements associated with land. This excludes land
        held for sale.
        """
        ...

    @LandAndImprovements.setter
    def LandAndImprovements(self, value: QuantConnect.Data.Fundamental.LandAndImprovementsBalanceSheet):
        """
        Fixed Assets that specifically deal with land a company owns. Includes the improvements associated with land. This excludes land
        held for sale.
        """
        ...

    @property
    def Leases(self) -> QuantConnect.Data.Fundamental.LeasesBalanceSheet:
        """
        Carrying amount at the balance sheet date of a long-lived, depreciable asset that is an addition or improvement to assets held
        under lease arrangement. This item is usually not available for the insurance industry.
        """
        ...

    @Leases.setter
    def Leases(self, value: QuantConnect.Data.Fundamental.LeasesBalanceSheet):
        """
        Carrying amount at the balance sheet date of a long-lived, depreciable asset that is an addition or improvement to assets held
        under lease arrangement. This item is usually not available for the insurance industry.
        """
        ...

    @property
    def LiabilitiesOfDiscontinuedOperations(self) -> QuantConnect.Data.Fundamental.LiabilitiesOfDiscontinuedOperationsBalanceSheet:
        """
        The obligations arising from the sale, disposal, or planned sale in the near future (generally within one year) of a disposal group,
        including a component of the entity (discontinued operation). This item is typically available for bank industry.
        """
        ...

    @LiabilitiesOfDiscontinuedOperations.setter
    def LiabilitiesOfDiscontinuedOperations(self, value: QuantConnect.Data.Fundamental.LiabilitiesOfDiscontinuedOperationsBalanceSheet):
        """
        The obligations arising from the sale, disposal, or planned sale in the near future (generally within one year) of a disposal group,
        including a component of the entity (discontinued operation). This item is typically available for bank industry.
        """
        ...

    @property
    def LineOfCredit(self) -> QuantConnect.Data.Fundamental.LineOfCreditBalanceSheet:
        """
        The carrying value as of the balance sheet date of obligations drawn from a line of credit, which is a bank's commitment to make
        loans up to a specific amount.
        """
        ...

    @LineOfCredit.setter
    def LineOfCredit(self, value: QuantConnect.Data.Fundamental.LineOfCreditBalanceSheet):
        """
        The carrying value as of the balance sheet date of obligations drawn from a line of credit, which is a bank's commitment to make
        loans up to a specific amount.
        """
        ...

    @property
    def LoansHeldForSale(self) -> QuantConnect.Data.Fundamental.LoansHeldForSaleBalanceSheet:
        """
        It means the aggregate amount of loans receivable that will be sold to other entities.  This item is typically available for bank
        industry.
        """
        ...

    @LoansHeldForSale.setter
    def LoansHeldForSale(self, value: QuantConnect.Data.Fundamental.LoansHeldForSaleBalanceSheet):
        """
        It means the aggregate amount of loans receivable that will be sold to other entities.  This item is typically available for bank
        industry.
        """
        ...

    @property
    def LoansReceivable(self) -> QuantConnect.Data.Fundamental.LoansReceivableBalanceSheet:
        """Reflects the carrying amount of unpaid loans issued to other institutions for cash needs or an asset purchase."""
        ...

    @LoansReceivable.setter
    def LoansReceivable(self, value: QuantConnect.Data.Fundamental.LoansReceivableBalanceSheet):
        """Reflects the carrying amount of unpaid loans issued to other institutions for cash needs or an asset purchase."""
        ...

    @property
    def MachineryFurnitureEquipment(self) -> QuantConnect.Data.Fundamental.MachineryFurnitureEquipmentBalanceSheet:
        """
        Fixed assets specifically dealing with tools, equipment and office furniture. This item is usually not available for the insurance and
        utility industries.
        """
        ...

    @MachineryFurnitureEquipment.setter
    def MachineryFurnitureEquipment(self, value: QuantConnect.Data.Fundamental.MachineryFurnitureEquipmentBalanceSheet):
        """
        Fixed assets specifically dealing with tools, equipment and office furniture. This item is usually not available for the insurance and
        utility industries.
        """
        ...

    @property
    def MaterialsAndSupplies(self) -> QuantConnect.Data.Fundamental.MaterialsAndSuppliesBalanceSheet:
        """
        Aggregated amount of unprocessed materials to be used in manufacturing or production process and supplies that will be
        consumed. This item is typically available for the utility industry.
        """
        ...

    @MaterialsAndSupplies.setter
    def MaterialsAndSupplies(self, value: QuantConnect.Data.Fundamental.MaterialsAndSuppliesBalanceSheet):
        """
        Aggregated amount of unprocessed materials to be used in manufacturing or production process and supplies that will be
        consumed. This item is typically available for the utility industry.
        """
        ...

    @property
    def MineralProperties(self) -> QuantConnect.Data.Fundamental.MineralPropertiesBalanceSheet:
        """A fixed asset that represents strictly mineral type properties.  This item is typically available for mining industry."""
        ...

    @MineralProperties.setter
    def MineralProperties(self, value: QuantConnect.Data.Fundamental.MineralPropertiesBalanceSheet):
        """A fixed asset that represents strictly mineral type properties.  This item is typically available for mining industry."""
        ...

    @property
    def MortgageLoan(self) -> QuantConnect.Data.Fundamental.MortgageLoanBalanceSheet:
        """This is a lien on real estate to protect a lender.  This item is typically available for bank industry."""
        ...

    @MortgageLoan.setter
    def MortgageLoan(self, value: QuantConnect.Data.Fundamental.MortgageLoanBalanceSheet):
        """This is a lien on real estate to protect a lender.  This item is typically available for bank industry."""
        ...

    @property
    def MortgageAndConsumerloans(self) -> QuantConnect.Data.Fundamental.MortgageAndConsumerloansBalanceSheet:
        """It means the aggregate amount of mortgage and consumer loans.  This item is typically available for the insurance industry."""
        ...

    @MortgageAndConsumerloans.setter
    def MortgageAndConsumerloans(self, value: QuantConnect.Data.Fundamental.MortgageAndConsumerloansBalanceSheet):
        """It means the aggregate amount of mortgage and consumer loans.  This item is typically available for the insurance industry."""
        ...

    @property
    def GrossNotesReceivable(self) -> QuantConnect.Data.Fundamental.GrossNotesReceivableBalanceSheet:
        """
        An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money
        at a future date(s) within one year of the balance sheet date or the normal operating cycle. Such amount may include accrued
        interest receivable in accordance with the terms of the note. The note also may contain provisions including a discount or premium,
        payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among myriad other features and
        characteristics. This item is typically available for bank industry.
        """
        ...

    @GrossNotesReceivable.setter
    def GrossNotesReceivable(self, value: QuantConnect.Data.Fundamental.GrossNotesReceivableBalanceSheet):
        """
        An amount representing an agreement for an unconditional promise by the maker to pay the entity (holder) a definite sum of money
        at a future date(s) within one year of the balance sheet date or the normal operating cycle. Such amount may include accrued
        interest receivable in accordance with the terms of the note. The note also may contain provisions including a discount or premium,
        payable on demand, secured, or unsecured, interest bearing or non-interest bearing, among myriad other features and
        characteristics. This item is typically available for bank industry.
        """
        ...

    @property
    def OtherAssets(self) -> QuantConnect.Data.Fundamental.OtherAssetsBalanceSheet:
        """Other non-current assets that are not otherwise classified."""
        ...

    @OtherAssets.setter
    def OtherAssets(self, value: QuantConnect.Data.Fundamental.OtherAssetsBalanceSheet):
        """Other non-current assets that are not otherwise classified."""
        ...

    @property
    def OtherCapitalStock(self) -> QuantConnect.Data.Fundamental.OtherCapitalStockBalanceSheet:
        """Other Capital Stock that is not otherwise classified."""
        ...

    @OtherCapitalStock.setter
    def OtherCapitalStock(self, value: QuantConnect.Data.Fundamental.OtherCapitalStockBalanceSheet):
        """Other Capital Stock that is not otherwise classified."""
        ...

    @property
    def OtherCurrentAssets(self) -> QuantConnect.Data.Fundamental.OtherCurrentAssetsBalanceSheet:
        """Other current assets that are not otherwise classified."""
        ...

    @OtherCurrentAssets.setter
    def OtherCurrentAssets(self, value: QuantConnect.Data.Fundamental.OtherCurrentAssetsBalanceSheet):
        """Other current assets that are not otherwise classified."""
        ...

    @property
    def OtherCurrentBorrowings(self) -> QuantConnect.Data.Fundamental.OtherCurrentBorrowingsBalanceSheet:
        """Short Term Borrowings that are not otherwise classified."""
        ...

    @OtherCurrentBorrowings.setter
    def OtherCurrentBorrowings(self, value: QuantConnect.Data.Fundamental.OtherCurrentBorrowingsBalanceSheet):
        """Short Term Borrowings that are not otherwise classified."""
        ...

    @property
    def OtherEquityAdjustments(self) -> QuantConnect.Data.Fundamental.OtherEquityAdjustmentsBalanceSheet:
        """Other adjustments to stockholders' equity that is not otherwise classified, including other reserves."""
        ...

    @OtherEquityAdjustments.setter
    def OtherEquityAdjustments(self, value: QuantConnect.Data.Fundamental.OtherEquityAdjustmentsBalanceSheet):
        """Other adjustments to stockholders' equity that is not otherwise classified, including other reserves."""
        ...

    @property
    def OtherInventories(self) -> QuantConnect.Data.Fundamental.OtherInventoriesBalanceSheet:
        """Other non-current inventories not otherwise classified."""
        ...

    @OtherInventories.setter
    def OtherInventories(self, value: QuantConnect.Data.Fundamental.OtherInventoriesBalanceSheet):
        """Other non-current inventories not otherwise classified."""
        ...

    @property
    def OtherInvestedAssets(self) -> QuantConnect.Data.Fundamental.OtherInvestedAssetsBalanceSheet:
        """
        An item represents all the other investments or/and securities that cannot be defined into any category above. This item is typically
        available for the insurance industry.
        """
        ...

    @OtherInvestedAssets.setter
    def OtherInvestedAssets(self, value: QuantConnect.Data.Fundamental.OtherInvestedAssetsBalanceSheet):
        """
        An item represents all the other investments or/and securities that cannot be defined into any category above. This item is typically
        available for the insurance industry.
        """
        ...

    @property
    def OtherNonCurrentAssets(self) -> QuantConnect.Data.Fundamental.OtherNonCurrentAssetsBalanceSheet:
        """Other non-current assets that are not otherwise classified."""
        ...

    @OtherNonCurrentAssets.setter
    def OtherNonCurrentAssets(self, value: QuantConnect.Data.Fundamental.OtherNonCurrentAssetsBalanceSheet):
        """Other non-current assets that are not otherwise classified."""
        ...

    @property
    def OtherProperties(self) -> QuantConnect.Data.Fundamental.OtherPropertiesBalanceSheet:
        """Other fixed assets not otherwise classified."""
        ...

    @OtherProperties.setter
    def OtherProperties(self, value: QuantConnect.Data.Fundamental.OtherPropertiesBalanceSheet):
        """Other fixed assets not otherwise classified."""
        ...

    @property
    def OtherRealEstateOwned(self) -> QuantConnect.Data.Fundamental.OtherRealEstateOwnedBalanceSheet:
        """
        The Carrying amount as of the balance sheet date of other real estate, which may include real estate investments, real estate loans
        that qualify as investments in real estate, and premises that are no longer used in operations may also be included in real estate
        owned. This does not include real estate assets taken in settlement of troubled loans through surrender or foreclosure.  This item is
        typically available for bank industry.
        """
        ...

    @OtherRealEstateOwned.setter
    def OtherRealEstateOwned(self, value: QuantConnect.Data.Fundamental.OtherRealEstateOwnedBalanceSheet):
        """
        The Carrying amount as of the balance sheet date of other real estate, which may include real estate investments, real estate loans
        that qualify as investments in real estate, and premises that are no longer used in operations may also be included in real estate
        owned. This does not include real estate assets taken in settlement of troubled loans through surrender or foreclosure.  This item is
        typically available for bank industry.
        """
        ...

    @property
    def OtherReceivables(self) -> QuantConnect.Data.Fundamental.OtherReceivablesBalanceSheet:
        """Other non-current receivables not otherwise classified."""
        ...

    @OtherReceivables.setter
    def OtherReceivables(self, value: QuantConnect.Data.Fundamental.OtherReceivablesBalanceSheet):
        """Other non-current receivables not otherwise classified."""
        ...

    @property
    def NonCurrentPensionAndOtherPostretirementBenefitPlans(self) -> QuantConnect.Data.Fundamental.NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet:
        """
        A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral.  This item is usually
        only available in the insurance industry.
        """
        ...

    @NonCurrentPensionAndOtherPostretirementBenefitPlans.setter
    def NonCurrentPensionAndOtherPostretirementBenefitPlans(self, value: QuantConnect.Data.Fundamental.NonCurrentPensionAndOtherPostretirementBenefitPlansBalanceSheet):
        """
        A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral.  This item is usually
        only available in the insurance industry.
        """
        ...

    @property
    def PolicyLoans(self) -> QuantConnect.Data.Fundamental.PolicyLoansBalanceSheet:
        """
        A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral. This item is usually
        only available for insurance industry.
        """
        ...

    @PolicyLoans.setter
    def PolicyLoans(self, value: QuantConnect.Data.Fundamental.PolicyLoansBalanceSheet):
        """
        A loan issued by an insurance company that uses the cash value of a person's life insurance policy as collateral. This item is usually
        only available for insurance industry.
        """
        ...

    @property
    def PreferredStockEquity(self) -> QuantConnect.Data.Fundamental.PreferredStockEquityBalanceSheet:
        """
        A class of ownership in a company that has a higher claim on the assets and earnings than common stock. Preferred stock
        generally has a dividend that must be paid out before dividends to common stockholders and the shares usually do not have voting
        rights.
        """
        ...

    @PreferredStockEquity.setter
    def PreferredStockEquity(self, value: QuantConnect.Data.Fundamental.PreferredStockEquityBalanceSheet):
        """
        A class of ownership in a company that has a higher claim on the assets and earnings than common stock. Preferred stock
        generally has a dividend that must be paid out before dividends to common stockholders and the shares usually do not have voting
        rights.
        """
        ...

    @property
    def Properties(self) -> QuantConnect.Data.Fundamental.PropertiesBalanceSheet:
        """
        Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for
        administrative purposes and that are expected to provide economic benefit for more than one year. This item is available for
        manufacturing, bank and transportation industries.
        """
        ...

    @Properties.setter
    def Properties(self, value: QuantConnect.Data.Fundamental.PropertiesBalanceSheet):
        """
        Tangible assets that are held by an entity for use in the production or supply of goods and services, for rental to others, or for
        administrative purposes and that are expected to provide economic benefit for more than one year. This item is available for
        manufacturing, bank and transportation industries.
        """
        ...

    @property
    def CurrentProvisions(self) -> QuantConnect.Data.Fundamental.CurrentProvisionsBalanceSheet:
        """
        Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory
        action or measure. Current provision is expired within one accounting period.
        """
        ...

    @CurrentProvisions.setter
    def CurrentProvisions(self, value: QuantConnect.Data.Fundamental.CurrentProvisionsBalanceSheet):
        """
        Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory
        action or measure. Current provision is expired within one accounting period.
        """
        ...

    @property
    def LongTermProvisions(self) -> QuantConnect.Data.Fundamental.LongTermProvisionsBalanceSheet:
        """
        Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory
        action or measure. Long-term provision is expired beyond one accounting period.
        """
        ...

    @LongTermProvisions.setter
    def LongTermProvisions(self, value: QuantConnect.Data.Fundamental.LongTermProvisionsBalanceSheet):
        """
        Provisions are created to protect the interests of one or both parties named in a contract or legal document which is a preparatory
        action or measure. Long-term provision is expired beyond one accounting period.
        """
        ...

    @property
    def RawMaterials(self) -> QuantConnect.Data.Fundamental.RawMaterialsBalanceSheet:
        """
        Carrying amount as of the balance sheet data of unprocessed items to be consumed in the manufacturing or production process.
        This item is available for manufacturing and mining industries.
        """
        ...

    @RawMaterials.setter
    def RawMaterials(self, value: QuantConnect.Data.Fundamental.RawMaterialsBalanceSheet):
        """
        Carrying amount as of the balance sheet data of unprocessed items to be consumed in the manufacturing or production process.
        This item is available for manufacturing and mining industries.
        """
        ...

    @property
    def ReceivablesAdjustmentsAllowances(self) -> QuantConnect.Data.Fundamental.ReceivablesAdjustmentsAllowancesBalanceSheet:
        """
        A provision relating to a written agreement to receive money at a specified future date(s) (within one year from the reporting date
        or the normal operating cycle, whichever is longer), consisting of principal as well as any accrued interest).
        """
        ...

    @ReceivablesAdjustmentsAllowances.setter
    def ReceivablesAdjustmentsAllowances(self, value: QuantConnect.Data.Fundamental.ReceivablesAdjustmentsAllowancesBalanceSheet):
        """
        A provision relating to a written agreement to receive money at a specified future date(s) (within one year from the reporting date
        or the normal operating cycle, whichever is longer), consisting of principal as well as any accrued interest).
        """
        ...

    @property
    def RegulatoryAssets(self) -> QuantConnect.Data.Fundamental.RegulatoryAssetsBalanceSheet:
        """
        Carrying amount as of the balance sheet date of capitalized costs of regulated entities that are expected to be recovered through
        revenue sources over one year or beyond the normal operating cycle.
        """
        ...

    @RegulatoryAssets.setter
    def RegulatoryAssets(self, value: QuantConnect.Data.Fundamental.RegulatoryAssetsBalanceSheet):
        """
        Carrying amount as of the balance sheet date of capitalized costs of regulated entities that are expected to be recovered through
        revenue sources over one year or beyond the normal operating cycle.
        """
        ...

    @property
    def RegulatoryLiabilities(self) -> QuantConnect.Data.Fundamental.RegulatoryLiabilitiesBalanceSheet:
        """
        The amount for the individual regulatory noncurrent liability as itemized in a table of regulatory noncurrent liabilities as of the end of
        the period. Such things as the costs of energy efficiency programs and low-income energy assistances programs and deferred fuel.
        This item is usually only available for utility industry.
        """
        ...

    @RegulatoryLiabilities.setter
    def RegulatoryLiabilities(self, value: QuantConnect.Data.Fundamental.RegulatoryLiabilitiesBalanceSheet):
        """
        The amount for the individual regulatory noncurrent liability as itemized in a table of regulatory noncurrent liabilities as of the end of
        the period. Such things as the costs of energy efficiency programs and low-income energy assistances programs and deferred fuel.
        This item is usually only available for utility industry.
        """
        ...

    @property
    def ReinsuranceBalancesPayable(self) -> QuantConnect.Data.Fundamental.ReinsuranceBalancesPayableBalanceSheet:
        """
        The carrying amount as of the balance sheet date of the known and estimated amounts owed to insurers under reinsurance
        treaties or other arrangements. This item is usually only available for insurance industry.
        """
        ...

    @ReinsuranceBalancesPayable.setter
    def ReinsuranceBalancesPayable(self, value: QuantConnect.Data.Fundamental.ReinsuranceBalancesPayableBalanceSheet):
        """
        The carrying amount as of the balance sheet date of the known and estimated amounts owed to insurers under reinsurance
        treaties or other arrangements. This item is usually only available for insurance industry.
        """
        ...

    @property
    def RestrictedCash(self) -> QuantConnect.Data.Fundamental.RestrictedCashBalanceSheet:
        """
        The carrying amounts of cash and cash equivalent items, which are restricted as to withdrawal or usage. Restrictions may include
        legally restricted deposits held as compensating balances against short-term borrowing arrangements, contracts entered into with
        others, or entity statements of intention with regard to particular deposits; however, time deposits and short-term certificates of
        deposit are not generally included in legally restricted deposits. Excludes compensating balance arrangements that are not
        agreements, which legally restrict the use of cash amounts shown on the balance sheet. For a classified balance sheet, represents
        the current portion only (the non-current portion has a separate concept); for an unclassified balance sheet represents the entire
        amount. This item is usually not available for bank and insurance industries.
        """
        ...

    @RestrictedCash.setter
    def RestrictedCash(self, value: QuantConnect.Data.Fundamental.RestrictedCashBalanceSheet):
        """
        The carrying amounts of cash and cash equivalent items, which are restricted as to withdrawal or usage. Restrictions may include
        legally restricted deposits held as compensating balances against short-term borrowing arrangements, contracts entered into with
        others, or entity statements of intention with regard to particular deposits; however, time deposits and short-term certificates of
        deposit are not generally included in legally restricted deposits. Excludes compensating balance arrangements that are not
        agreements, which legally restrict the use of cash amounts shown on the balance sheet. For a classified balance sheet, represents
        the current portion only (the non-current portion has a separate concept); for an unclassified balance sheet represents the entire
        amount. This item is usually not available for bank and insurance industries.
        """
        ...

    @property
    def RestrictedCashAndCashEquivalents(self) -> QuantConnect.Data.Fundamental.RestrictedCashAndCashEquivalentsBalanceSheet:
        """
        The carrying amounts of cash and cash equivalent items which are restricted as to withdrawal or usage. This item is available for
        bank and insurance industries.
        """
        ...

    @RestrictedCashAndCashEquivalents.setter
    def RestrictedCashAndCashEquivalents(self, value: QuantConnect.Data.Fundamental.RestrictedCashAndCashEquivalentsBalanceSheet):
        """
        The carrying amounts of cash and cash equivalent items which are restricted as to withdrawal or usage. This item is available for
        bank and insurance industries.
        """
        ...

    @property
    def RestrictedCashAndInvestments(self) -> QuantConnect.Data.Fundamental.RestrictedCashAndInvestmentsBalanceSheet:
        """
        The cash and investments whose use in whole or in part is restricted for the long-term, generally by contractual agreements or
        regulatory requirements. This item is usually only available for bank industry.
        """
        ...

    @RestrictedCashAndInvestments.setter
    def RestrictedCashAndInvestments(self, value: QuantConnect.Data.Fundamental.RestrictedCashAndInvestmentsBalanceSheet):
        """
        The cash and investments whose use in whole or in part is restricted for the long-term, generally by contractual agreements or
        regulatory requirements. This item is usually only available for bank industry.
        """
        ...

    @property
    def RestrictedCommonStock(self) -> QuantConnect.Data.Fundamental.RestrictedCommonStockBalanceSheet:
        """
        Shares of stock for which sale is contractually or governmentally restricted for a given period of time. Stock that is acquired through
        an employee stock option plan or other private means may not be transferred. Restricted stock must be traded in compliance with
        special SEC regulations.
        """
        ...

    @RestrictedCommonStock.setter
    def RestrictedCommonStock(self, value: QuantConnect.Data.Fundamental.RestrictedCommonStockBalanceSheet):
        """
        Shares of stock for which sale is contractually or governmentally restricted for a given period of time. Stock that is acquired through
        an employee stock option plan or other private means may not be transferred. Restricted stock must be traded in compliance with
        special SEC regulations.
        """
        ...

    @property
    def RestrictedInvestments(self) -> QuantConnect.Data.Fundamental.RestrictedInvestmentsBalanceSheet:
        """
        Investments whose use is restricted in whole or in part, generally by contractual agreements or regulatory requirements. This item
        is usually only available for bank industry.
        """
        ...

    @RestrictedInvestments.setter
    def RestrictedInvestments(self, value: QuantConnect.Data.Fundamental.RestrictedInvestmentsBalanceSheet):
        """
        Investments whose use is restricted in whole or in part, generally by contractual agreements or regulatory requirements. This item
        is usually only available for bank industry.
        """
        ...

    @property
    def TaxesReceivable(self) -> QuantConnect.Data.Fundamental.TaxesReceivableBalanceSheet:
        """
        Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the
        balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes. This item is
        usually not available for bank industry.
        """
        ...

    @TaxesReceivable.setter
    def TaxesReceivable(self, value: QuantConnect.Data.Fundamental.TaxesReceivableBalanceSheet):
        """
        Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the
        balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes. This item is
        usually not available for bank industry.
        """
        ...

    @property
    def TotalCapitalization(self) -> QuantConnect.Data.Fundamental.TotalCapitalizationBalanceSheet:
        """Stockholder's Equity plus Long Term Debt."""
        ...

    @TotalCapitalization.setter
    def TotalCapitalization(self, value: QuantConnect.Data.Fundamental.TotalCapitalizationBalanceSheet):
        """Stockholder's Equity plus Long Term Debt."""
        ...

    @property
    def TotalDeferredCreditsAndOtherNonCurrentLiabilities(self) -> QuantConnect.Data.Fundamental.TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet:
        """Revenue received by a firm but not yet reported as income.  This item is usually only available for utility industry."""
        ...

    @TotalDeferredCreditsAndOtherNonCurrentLiabilities.setter
    def TotalDeferredCreditsAndOtherNonCurrentLiabilities(self, value: QuantConnect.Data.Fundamental.TotalDeferredCreditsAndOtherNonCurrentLiabilitiesBalanceSheet):
        """Revenue received by a firm but not yet reported as income.  This item is usually only available for utility industry."""
        ...

    @property
    def UnbilledReceivables(self) -> QuantConnect.Data.Fundamental.UnbilledReceivablesBalanceSheet:
        """
        Revenues that are not currently billed from the customer under the terms of the contract.  This item is usually only available for
        utility industry.
        """
        ...

    @UnbilledReceivables.setter
    def UnbilledReceivables(self, value: QuantConnect.Data.Fundamental.UnbilledReceivablesBalanceSheet):
        """
        Revenues that are not currently billed from the customer under the terms of the contract.  This item is usually only available for
        utility industry.
        """
        ...

    @property
    def UnrealizedGainLoss(self) -> QuantConnect.Data.Fundamental.UnrealizedGainLossBalanceSheet:
        """A profit or loss that results from holding onto an asset rather than cashing it in and officially taking the profit or loss."""
        ...

    @UnrealizedGainLoss.setter
    def UnrealizedGainLoss(self, value: QuantConnect.Data.Fundamental.UnrealizedGainLossBalanceSheet):
        """A profit or loss that results from holding onto an asset rather than cashing it in and officially taking the profit or loss."""
        ...

    @property
    def WorkInProcess(self) -> QuantConnect.Data.Fundamental.WorkInProcessBalanceSheet:
        """
        Work, or goods, in the process of being fabricated or manufactured but not yet completed as finished goods. This item is usually
        available for manufacturing and mining industries.
        """
        ...

    @WorkInProcess.setter
    def WorkInProcess(self, value: QuantConnect.Data.Fundamental.WorkInProcessBalanceSheet):
        """
        Work, or goods, in the process of being fabricated or manufactured but not yet completed as finished goods. This item is usually
        available for manufacturing and mining industries.
        """
        ...

    @property
    def OtherNonCurrentLiabilities(self) -> QuantConnect.Data.Fundamental.OtherNonCurrentLiabilitiesBalanceSheet:
        """This item is usually not available for bank and insurance industries."""
        ...

    @OtherNonCurrentLiabilities.setter
    def OtherNonCurrentLiabilities(self, value: QuantConnect.Data.Fundamental.OtherNonCurrentLiabilitiesBalanceSheet):
        """This item is usually not available for bank and insurance industries."""
        ...

    @property
    def CapitalLeaseObligations(self) -> QuantConnect.Data.Fundamental.CapitalLeaseObligationsBalanceSheet:
        """Current Portion of Capital Lease Obligation plus Long Term Portion of Capital Lease Obligation."""
        ...

    @CapitalLeaseObligations.setter
    def CapitalLeaseObligations(self, value: QuantConnect.Data.Fundamental.CapitalLeaseObligationsBalanceSheet):
        """Current Portion of Capital Lease Obligation plus Long Term Portion of Capital Lease Obligation."""
        ...

    @property
    def OtherLiabilities(self) -> QuantConnect.Data.Fundamental.OtherLiabilitiesBalanceSheet:
        """This item is available for bank and insurance industries."""
        ...

    @OtherLiabilities.setter
    def OtherLiabilities(self, value: QuantConnect.Data.Fundamental.OtherLiabilitiesBalanceSheet):
        """This item is available for bank and insurance industries."""
        ...

    @property
    def OtherPayable(self) -> QuantConnect.Data.Fundamental.OtherPayableBalanceSheet:
        """Payables and Accrued Expenses that are not defined as Trade, Tax or Dividends related."""
        ...

    @OtherPayable.setter
    def OtherPayable(self, value: QuantConnect.Data.Fundamental.OtherPayableBalanceSheet):
        """Payables and Accrued Expenses that are not defined as Trade, Tax or Dividends related."""
        ...

    @property
    def TangibleBookValue(self) -> QuantConnect.Data.Fundamental.TangibleBookValueBalanceSheet:
        """
        The company's total book value less the value of any intangible assets.
        Methodology: Common Stock Equity minus Goodwill and Other Intangible Assets
        """
        ...

    @TangibleBookValue.setter
    def TangibleBookValue(self, value: QuantConnect.Data.Fundamental.TangibleBookValueBalanceSheet):
        """
        The company's total book value less the value of any intangible assets.
        Methodology: Common Stock Equity minus Goodwill and Other Intangible Assets
        """
        ...

    @property
    def TotalEquity(self) -> QuantConnect.Data.Fundamental.TotalEquityBalanceSheet:
        """Total Equity equals Preferred Stock Equity + Common Stock Equity."""
        ...

    @TotalEquity.setter
    def TotalEquity(self, value: QuantConnect.Data.Fundamental.TotalEquityBalanceSheet):
        """Total Equity equals Preferred Stock Equity + Common Stock Equity."""
        ...

    @property
    def WorkingCapital(self) -> QuantConnect.Data.Fundamental.WorkingCapitalBalanceSheet:
        """Current Assets minus Current Liabilities.  This item is usually not available for bank and insurance industries."""
        ...

    @WorkingCapital.setter
    def WorkingCapital(self, value: QuantConnect.Data.Fundamental.WorkingCapitalBalanceSheet):
        """Current Assets minus Current Liabilities.  This item is usually not available for bank and insurance industries."""
        ...

    @property
    def TotalDebt(self) -> QuantConnect.Data.Fundamental.TotalDebtBalanceSheet:
        """All borrowings incurred by the company including debt and capital lease obligations."""
        ...

    @TotalDebt.setter
    def TotalDebt(self, value: QuantConnect.Data.Fundamental.TotalDebtBalanceSheet):
        """All borrowings incurred by the company including debt and capital lease obligations."""
        ...

    @property
    def CommonUtilityPlant(self) -> QuantConnect.Data.Fundamental.CommonUtilityPlantBalanceSheet:
        """The amount for the other plant related to the utility industry fix assets."""
        ...

    @CommonUtilityPlant.setter
    def CommonUtilityPlant(self, value: QuantConnect.Data.Fundamental.CommonUtilityPlantBalanceSheet):
        """The amount for the other plant related to the utility industry fix assets."""
        ...

    @property
    def ElectricUtilityPlant(self) -> QuantConnect.Data.Fundamental.ElectricUtilityPlantBalanceSheet:
        """The amount for the electric plant related to the utility industry."""
        ...

    @ElectricUtilityPlant.setter
    def ElectricUtilityPlant(self, value: QuantConnect.Data.Fundamental.ElectricUtilityPlantBalanceSheet):
        """The amount for the electric plant related to the utility industry."""
        ...

    @property
    def NaturalGasFuelAndOther(self) -> QuantConnect.Data.Fundamental.NaturalGasFuelAndOtherBalanceSheet:
        """
        The amount for the natural gas, fuel and other items related to the utility industry, which might include oil and gas wells, the
        properties to exploit oil and gas or liquefied natural gas sites.
        """
        ...

    @NaturalGasFuelAndOther.setter
    def NaturalGasFuelAndOther(self, value: QuantConnect.Data.Fundamental.NaturalGasFuelAndOtherBalanceSheet):
        """
        The amount for the natural gas, fuel and other items related to the utility industry, which might include oil and gas wells, the
        properties to exploit oil and gas or liquefied natural gas sites.
        """
        ...

    @property
    def NetUtilityPlant(self) -> QuantConnect.Data.Fundamental.NetUtilityPlantBalanceSheet:
        """
        Net utility plant might include water production, electric utility plan, natural gas, fuel and other, common utility plant and
        accumulated depreciation. This item is usually only available for utility industry.
        """
        ...

    @NetUtilityPlant.setter
    def NetUtilityPlant(self, value: QuantConnect.Data.Fundamental.NetUtilityPlantBalanceSheet):
        """
        Net utility plant might include water production, electric utility plan, natural gas, fuel and other, common utility plant and
        accumulated depreciation. This item is usually only available for utility industry.
        """
        ...

    @property
    def WaterProduction(self) -> QuantConnect.Data.Fundamental.WaterProductionBalanceSheet:
        """
        The amount for a facility and plant that provides water which might include wells, reservoirs, pumping stations, and control
        facilities; and waste water systems which includes the waste treatment and disposal facility and equipment. This item is usually
        only available for utility industry.
        """
        ...

    @WaterProduction.setter
    def WaterProduction(self, value: QuantConnect.Data.Fundamental.WaterProductionBalanceSheet):
        """
        The amount for a facility and plant that provides water which might include wells, reservoirs, pumping stations, and control
        facilities; and waste water systems which includes the waste treatment and disposal facility and equipment. This item is usually
        only available for utility industry.
        """
        ...

    @property
    def OrdinarySharesNumber(self) -> QuantConnect.Data.Fundamental.OrdinarySharesNumberBalanceSheet:
        """Number of Common or Ordinary Shares."""
        ...

    @OrdinarySharesNumber.setter
    def OrdinarySharesNumber(self, value: QuantConnect.Data.Fundamental.OrdinarySharesNumberBalanceSheet):
        """Number of Common or Ordinary Shares."""
        ...

    @property
    def PreferredSharesNumber(self) -> QuantConnect.Data.Fundamental.PreferredSharesNumberBalanceSheet:
        """Number of Preferred Shares."""
        ...

    @PreferredSharesNumber.setter
    def PreferredSharesNumber(self, value: QuantConnect.Data.Fundamental.PreferredSharesNumberBalanceSheet):
        """Number of Preferred Shares."""
        ...

    @property
    def TreasurySharesNumber(self) -> QuantConnect.Data.Fundamental.TreasurySharesNumberBalanceSheet:
        """Number of Treasury Shares."""
        ...

    @TreasurySharesNumber.setter
    def TreasurySharesNumber(self, value: QuantConnect.Data.Fundamental.TreasurySharesNumberBalanceSheet):
        """Number of Treasury Shares."""
        ...

    @property
    def TradingAndOtherReceivable(self) -> QuantConnect.Data.Fundamental.TradingAndOtherReceivableBalanceSheet:
        """
        This will serve as the "parent" value to AccountsReceivable (DataId 23001) and OtherReceivables (DataId 23342) for all company
        financials reported in the IFRS GAAP.
        """
        ...

    @TradingAndOtherReceivable.setter
    def TradingAndOtherReceivable(self, value: QuantConnect.Data.Fundamental.TradingAndOtherReceivableBalanceSheet):
        """
        This will serve as the "parent" value to AccountsReceivable (DataId 23001) and OtherReceivables (DataId 23342) for all company
        financials reported in the IFRS GAAP.
        """
        ...

    @property
    def EquityAttributableToOwnersOfParent(self) -> QuantConnect.Data.Fundamental.EquityAttributableToOwnersOfParentBalanceSheet:
        """"""
        ...

    @EquityAttributableToOwnersOfParent.setter
    def EquityAttributableToOwnersOfParent(self, value: QuantConnect.Data.Fundamental.EquityAttributableToOwnersOfParentBalanceSheet):
        """"""
        ...

    @property
    def SecuritiesLoaned(self) -> QuantConnect.Data.Fundamental.SecuritiesLoanedBalanceSheet:
        """
        The carrying value as of the balance sheet date of securities loaned to other broker dealers, typically used by such parties to cover
        short sales, secured by cash or other securities furnished by such parties until the borrowing is closed.
        """
        ...

    @SecuritiesLoaned.setter
    def SecuritiesLoaned(self, value: QuantConnect.Data.Fundamental.SecuritiesLoanedBalanceSheet):
        """
        The carrying value as of the balance sheet date of securities loaned to other broker dealers, typically used by such parties to cover
        short sales, secured by cash or other securities furnished by such parties until the borrowing is closed.
        """
        ...

    @property
    def NetTangibleAssets(self) -> QuantConnect.Data.Fundamental.NetTangibleAssetsBalanceSheet:
        """Net assets in physical form. This is calculated using Stockholders' Equity less Intangible Assets (including Goodwill)."""
        ...

    @NetTangibleAssets.setter
    def NetTangibleAssets(self, value: QuantConnect.Data.Fundamental.NetTangibleAssetsBalanceSheet):
        """Net assets in physical form. This is calculated using Stockholders' Equity less Intangible Assets (including Goodwill)."""
        ...

    @property
    def DuefromRelatedPartiesCurrent(self) -> QuantConnect.Data.Fundamental.DuefromRelatedPartiesCurrentBalanceSheet:
        """Amounts owed to the company from a non-arm's length entity, due within the company's current operating cycle."""
        ...

    @DuefromRelatedPartiesCurrent.setter
    def DuefromRelatedPartiesCurrent(self, value: QuantConnect.Data.Fundamental.DuefromRelatedPartiesCurrentBalanceSheet):
        """Amounts owed to the company from a non-arm's length entity, due within the company's current operating cycle."""
        ...

    @property
    def DuefromRelatedPartiesNonCurrent(self) -> QuantConnect.Data.Fundamental.DuefromRelatedPartiesNonCurrentBalanceSheet:
        """Amounts owed to the company from a non-arm's length entity, due after the company's current operating cycle."""
        ...

    @DuefromRelatedPartiesNonCurrent.setter
    def DuefromRelatedPartiesNonCurrent(self, value: QuantConnect.Data.Fundamental.DuefromRelatedPartiesNonCurrentBalanceSheet):
        """Amounts owed to the company from a non-arm's length entity, due after the company's current operating cycle."""
        ...

    @property
    def DuetoRelatedParties(self) -> QuantConnect.Data.Fundamental.DuetoRelatedPartiesBalanceSheet:
        """Amounts owed by the company to a non-arm's length entity."""
        ...

    @DuetoRelatedParties.setter
    def DuetoRelatedParties(self, value: QuantConnect.Data.Fundamental.DuetoRelatedPartiesBalanceSheet):
        """Amounts owed by the company to a non-arm's length entity."""
        ...

    @property
    def DuetoRelatedPartiesCurrent(self) -> QuantConnect.Data.Fundamental.DuetoRelatedPartiesCurrentBalanceSheet:
        """Amounts owed by the company to a non-arm's length entity that has to be repaid within the company's current operating cycle."""
        ...

    @DuetoRelatedPartiesCurrent.setter
    def DuetoRelatedPartiesCurrent(self, value: QuantConnect.Data.Fundamental.DuetoRelatedPartiesCurrentBalanceSheet):
        """Amounts owed by the company to a non-arm's length entity that has to be repaid within the company's current operating cycle."""
        ...

    @property
    def DuetoRelatedPartiesNonCurrent(self) -> QuantConnect.Data.Fundamental.DuetoRelatedPartiesNonCurrentBalanceSheet:
        """Amounts owed by the company to a non-arm's length entity that has to be repaid after the company's current operating cycle."""
        ...

    @DuetoRelatedPartiesNonCurrent.setter
    def DuetoRelatedPartiesNonCurrent(self, value: QuantConnect.Data.Fundamental.DuetoRelatedPartiesNonCurrentBalanceSheet):
        """Amounts owed by the company to a non-arm's length entity that has to be repaid after the company's current operating cycle."""
        ...

    @property
    def InvestmentProperties(self) -> QuantConnect.Data.Fundamental.InvestmentPropertiesBalanceSheet:
        """Company's investments in properties net of accumulated depreciation, which generate a return."""
        ...

    @InvestmentProperties.setter
    def InvestmentProperties(self, value: QuantConnect.Data.Fundamental.InvestmentPropertiesBalanceSheet):
        """Company's investments in properties net of accumulated depreciation, which generate a return."""
        ...

    @property
    def InvestmentsinSubsidiariesatCost(self) -> QuantConnect.Data.Fundamental.InvestmentsinSubsidiariesatCostBalanceSheet:
        """A stake in any company which is more than 51%."""
        ...

    @InvestmentsinSubsidiariesatCost.setter
    def InvestmentsinSubsidiariesatCost(self, value: QuantConnect.Data.Fundamental.InvestmentsinSubsidiariesatCostBalanceSheet):
        """A stake in any company which is more than 51%."""
        ...

    @property
    def InvestmentsinAssociatesatCost(self) -> QuantConnect.Data.Fundamental.InvestmentsinAssociatesatCostBalanceSheet:
        """A stake in any company which is more than 20% but less than 50%."""
        ...

    @InvestmentsinAssociatesatCost.setter
    def InvestmentsinAssociatesatCost(self, value: QuantConnect.Data.Fundamental.InvestmentsinAssociatesatCostBalanceSheet):
        """A stake in any company which is more than 20% but less than 50%."""
        ...

    @property
    def InvestmentsinJointVenturesatCost(self) -> QuantConnect.Data.Fundamental.InvestmentsinJointVenturesatCostBalanceSheet:
        """A 50% stake in any company in which remaining 50% belongs to other company."""
        ...

    @InvestmentsinJointVenturesatCost.setter
    def InvestmentsinJointVenturesatCost(self, value: QuantConnect.Data.Fundamental.InvestmentsinJointVenturesatCostBalanceSheet):
        """A 50% stake in any company in which remaining 50% belongs to other company."""
        ...

    @property
    def InvestmentinFinancialAssets(self) -> QuantConnect.Data.Fundamental.InvestmentinFinancialAssetsBalanceSheet:
        """Represents the sum of all financial investments (trading securities, available-for-sale securities, held-to-maturity securities, etc.)"""
        ...

    @InvestmentinFinancialAssets.setter
    def InvestmentinFinancialAssets(self, value: QuantConnect.Data.Fundamental.InvestmentinFinancialAssetsBalanceSheet):
        """Represents the sum of all financial investments (trading securities, available-for-sale securities, held-to-maturity securities, etc.)"""
        ...

    @property
    def FinanceLeaseReceivables(self) -> QuantConnect.Data.Fundamental.FinanceLeaseReceivablesBalanceSheet:
        """
        Accounts owed to the bank in relation to capital leases. Capital/ finance lease obligation are contractual obligations that arise from
        obtaining the use of property or equipment via a capital lease contract.
        """
        ...

    @FinanceLeaseReceivables.setter
    def FinanceLeaseReceivables(self, value: QuantConnect.Data.Fundamental.FinanceLeaseReceivablesBalanceSheet):
        """
        Accounts owed to the bank in relation to capital leases. Capital/ finance lease obligation are contractual obligations that arise from
        obtaining the use of property or equipment via a capital lease contract.
        """
        ...

    @property
    def ConvertibleLoansCurrent(self) -> QuantConnect.Data.Fundamental.ConvertibleLoansCurrentBalanceSheet:
        """
        This represents loans that entitle the lender (or the holder of loan debenture) to convert the loan to common or preferred stock
        (ordinary or preference shares) within the next 12 months or operating cycle.
        """
        ...

    @ConvertibleLoansCurrent.setter
    def ConvertibleLoansCurrent(self, value: QuantConnect.Data.Fundamental.ConvertibleLoansCurrentBalanceSheet):
        """
        This represents loans that entitle the lender (or the holder of loan debenture) to convert the loan to common or preferred stock
        (ordinary or preference shares) within the next 12 months or operating cycle.
        """
        ...

    @property
    def BankLoansCurrent(self) -> QuantConnect.Data.Fundamental.BankLoansCurrentBalanceSheet:
        """
        A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the
        instrument to interest payments and the repayment of principal at a specified time within the next 12 months or operating cycle.
        """
        ...

    @BankLoansCurrent.setter
    def BankLoansCurrent(self, value: QuantConnect.Data.Fundamental.BankLoansCurrentBalanceSheet):
        """
        A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the
        instrument to interest payments and the repayment of principal at a specified time within the next 12 months or operating cycle.
        """
        ...

    @property
    def OtherLoansCurrent(self) -> QuantConnect.Data.Fundamental.OtherLoansCurrentBalanceSheet:
        """
        Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due within the
        next 12 months or operating cycle.
        """
        ...

    @OtherLoansCurrent.setter
    def OtherLoansCurrent(self, value: QuantConnect.Data.Fundamental.OtherLoansCurrentBalanceSheet):
        """
        Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due within the
        next 12 months or operating cycle.
        """
        ...

    @property
    def AccruedandDeferredIncome(self) -> QuantConnect.Data.Fundamental.AccruedandDeferredIncomeBalanceSheet:
        """
        Sum of accrued liabilities and deferred income (amount received in advance but the services are not provided in respect of
        amount).
        """
        ...

    @AccruedandDeferredIncome.setter
    def AccruedandDeferredIncome(self, value: QuantConnect.Data.Fundamental.AccruedandDeferredIncomeBalanceSheet):
        """
        Sum of accrued liabilities and deferred income (amount received in advance but the services are not provided in respect of
        amount).
        """
        ...

    @property
    def BankLoansNonCurrent(self) -> QuantConnect.Data.Fundamental.BankLoansNonCurrentBalanceSheet:
        """
        A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the
        instrument to interest payments and the repayment of principal at a specified time beyond the current accounting period.
        """
        ...

    @BankLoansNonCurrent.setter
    def BankLoansNonCurrent(self, value: QuantConnect.Data.Fundamental.BankLoansNonCurrentBalanceSheet):
        """
        A debt financing obligation issued by a bank or similar financial institution to a company, that entitles the lender or holder of the
        instrument to interest payments and the repayment of principal at a specified time beyond the current accounting period.
        """
        ...

    @property
    def OtherLoansNonCurrent(self) -> QuantConnect.Data.Fundamental.OtherLoansNonCurrentBalanceSheet:
        """
        Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due beyond the
        current operating cycle.
        """
        ...

    @OtherLoansNonCurrent.setter
    def OtherLoansNonCurrent(self, value: QuantConnect.Data.Fundamental.OtherLoansNonCurrentBalanceSheet):
        """
        Other loans between the customer and bank which cannot be identified by other specific items in the Debt section, due beyond the
        current operating cycle.
        """
        ...

    @property
    def OtherReserves(self) -> QuantConnect.Data.Fundamental.OtherReservesBalanceSheet:
        """Other reserves owned by the company that cannot be identified by other specific items in the Reserves section."""
        ...

    @OtherReserves.setter
    def OtherReserves(self, value: QuantConnect.Data.Fundamental.OtherReservesBalanceSheet):
        """Other reserves owned by the company that cannot be identified by other specific items in the Reserves section."""
        ...

    @property
    def LoansandAdvancestoBank(self) -> QuantConnect.Data.Fundamental.LoansandAdvancestoBankBalanceSheet:
        """The aggregate amount of loans and advances made to a bank or financial institution."""
        ...

    @LoansandAdvancestoBank.setter
    def LoansandAdvancestoBank(self, value: QuantConnect.Data.Fundamental.LoansandAdvancestoBankBalanceSheet):
        """The aggregate amount of loans and advances made to a bank or financial institution."""
        ...

    @property
    def LoansandAdvancestoCustomer(self) -> QuantConnect.Data.Fundamental.LoansandAdvancestoCustomerBalanceSheet:
        """The aggregate amount of loans and advances made to customers."""
        ...

    @LoansandAdvancestoCustomer.setter
    def LoansandAdvancestoCustomer(self, value: QuantConnect.Data.Fundamental.LoansandAdvancestoCustomerBalanceSheet):
        """The aggregate amount of loans and advances made to customers."""
        ...

    @property
    def TreasuryBillsandOtherEligibleBills(self) -> QuantConnect.Data.Fundamental.TreasuryBillsandOtherEligibleBillsBalanceSheet:
        """Investments backed by the central government, it usually carries less risk than other investments."""
        ...

    @TreasuryBillsandOtherEligibleBills.setter
    def TreasuryBillsandOtherEligibleBills(self, value: QuantConnect.Data.Fundamental.TreasuryBillsandOtherEligibleBillsBalanceSheet):
        """Investments backed by the central government, it usually carries less risk than other investments."""
        ...

    @property
    def EquitySharesInvestments(self) -> QuantConnect.Data.Fundamental.EquitySharesInvestmentsBalanceSheet:
        """Investments in shares of a company representing ownership in that company."""
        ...

    @EquitySharesInvestments.setter
    def EquitySharesInvestments(self, value: QuantConnect.Data.Fundamental.EquitySharesInvestmentsBalanceSheet):
        """Investments in shares of a company representing ownership in that company."""
        ...

    @property
    def DepositsbyBank(self) -> QuantConnect.Data.Fundamental.DepositsbyBankBalanceSheet:
        """Banks investment in the ongoing entity."""
        ...

    @DepositsbyBank.setter
    def DepositsbyBank(self, value: QuantConnect.Data.Fundamental.DepositsbyBankBalanceSheet):
        """Banks investment in the ongoing entity."""
        ...

    @property
    def CustomerAccounts(self) -> QuantConnect.Data.Fundamental.CustomerAccountsBalanceSheet:
        """
        Carrying value of amounts transferred by customers to third parties for security purposes that are expected to be returned or
        applied towards payment after one year or beyond the operating cycle, if longer.
        """
        ...

    @CustomerAccounts.setter
    def CustomerAccounts(self, value: QuantConnect.Data.Fundamental.CustomerAccountsBalanceSheet):
        """
        Carrying value of amounts transferred by customers to third parties for security purposes that are expected to be returned or
        applied towards payment after one year or beyond the operating cycle, if longer.
        """
        ...

    @property
    def ItemsinTheCourseofTransmissiontoOtherBanks(self) -> QuantConnect.Data.Fundamental.ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet:
        """
        Carrying amount as of the balance sheet date of drafts and bills of exchange that have been accepted by the reporting bank or by
        others for its own account, as its liability to holders of the drafts.
        """
        ...

    @ItemsinTheCourseofTransmissiontoOtherBanks.setter
    def ItemsinTheCourseofTransmissiontoOtherBanks(self, value: QuantConnect.Data.Fundamental.ItemsinTheCourseofTransmissiontoOtherBanksBalanceSheet):
        """
        Carrying amount as of the balance sheet date of drafts and bills of exchange that have been accepted by the reporting bank or by
        others for its own account, as its liability to holders of the drafts.
        """
        ...

    @property
    def TradingandFinancialLiabilities(self) -> QuantConnect.Data.Fundamental.TradingandFinancialLiabilitiesBalanceSheet:
        """Total carrying amount of total trading, financial liabilities and debt in a non-differentiated balance sheet."""
        ...

    @TradingandFinancialLiabilities.setter
    def TradingandFinancialLiabilities(self, value: QuantConnect.Data.Fundamental.TradingandFinancialLiabilitiesBalanceSheet):
        """Total carrying amount of total trading, financial liabilities and debt in a non-differentiated balance sheet."""
        ...

    @property
    def DebtSecuritiesinIssue(self) -> QuantConnect.Data.Fundamental.DebtSecuritiesinIssueBalanceSheet:
        """Any debt financial instrument issued instead of cash loan."""
        ...

    @DebtSecuritiesinIssue.setter
    def DebtSecuritiesinIssue(self, value: QuantConnect.Data.Fundamental.DebtSecuritiesinIssueBalanceSheet):
        """Any debt financial instrument issued instead of cash loan."""
        ...

    @property
    def SubordinatedLiabilities(self) -> QuantConnect.Data.Fundamental.SubordinatedLiabilitiesBalanceSheet:
        """
        The total carrying value of securities loaned to other broker dealers, typically used by such parties to cover short sales, secured by
        cash or other securities furnished by such parties until the borrowing is closed; in a Non-Differentiated Balance Sheet.
        """
        ...

    @SubordinatedLiabilities.setter
    def SubordinatedLiabilities(self, value: QuantConnect.Data.Fundamental.SubordinatedLiabilitiesBalanceSheet):
        """
        The total carrying value of securities loaned to other broker dealers, typically used by such parties to cover short sales, secured by
        cash or other securities furnished by such parties until the borrowing is closed; in a Non-Differentiated Balance Sheet.
        """
        ...

    @property
    def ProvisionsTotal(self) -> QuantConnect.Data.Fundamental.ProvisionsTotalBalanceSheet:
        """
        Provisions are created to protect the interests of one or both parties named in a contract or legal document, which is a preparatory
        action or measure. Current provision is expired within one accounting period.
        """
        ...

    @ProvisionsTotal.setter
    def ProvisionsTotal(self, value: QuantConnect.Data.Fundamental.ProvisionsTotalBalanceSheet):
        """
        Provisions are created to protect the interests of one or both parties named in a contract or legal document, which is a preparatory
        action or measure. Current provision is expired within one accounting period.
        """
        ...

    @property
    def OperatingLeaseAssets(self) -> QuantConnect.Data.Fundamental.OperatingLeaseAssetsBalanceSheet:
        """
        A contract that allows for the use of an asset, but does not convey rights of ownership of the asset. An operating lease is not
        capitalized; it is accounted for as a rental expense in what is known as "off balance sheet financing." For the lessor, the asset being
        leased is accounted for as an asset and is depreciated as such.
        """
        ...

    @OperatingLeaseAssets.setter
    def OperatingLeaseAssets(self, value: QuantConnect.Data.Fundamental.OperatingLeaseAssetsBalanceSheet):
        """
        A contract that allows for the use of an asset, but does not convey rights of ownership of the asset. An operating lease is not
        capitalized; it is accounted for as a rental expense in what is known as "off balance sheet financing." For the lessor, the asset being
        leased is accounted for as an asset and is depreciated as such.
        """
        ...

    @property
    def ClaimsOutstanding(self) -> QuantConnect.Data.Fundamental.ClaimsOutstandingBalanceSheet:
        """Amounts owing to policy holders who have filed claims but have not yet been settled or paid."""
        ...

    @ClaimsOutstanding.setter
    def ClaimsOutstanding(self, value: QuantConnect.Data.Fundamental.ClaimsOutstandingBalanceSheet):
        """Amounts owing to policy holders who have filed claims but have not yet been settled or paid."""
        ...

    @property
    def LiabilitiesHeldforSaleCurrent(self) -> QuantConnect.Data.Fundamental.LiabilitiesHeldforSaleCurrentBalanceSheet:
        """Liabilities due within the next 12 months related from an asset classified as Held for Sale."""
        ...

    @LiabilitiesHeldforSaleCurrent.setter
    def LiabilitiesHeldforSaleCurrent(self, value: QuantConnect.Data.Fundamental.LiabilitiesHeldforSaleCurrentBalanceSheet):
        """Liabilities due within the next 12 months related from an asset classified as Held for Sale."""
        ...

    @property
    def LiabilitiesHeldforSaleNonCurrent(self) -> QuantConnect.Data.Fundamental.LiabilitiesHeldforSaleNonCurrentBalanceSheet:
        """Liabilities related to an asset classified as held for sale excluding the portion due the next 12 months or operating cycle."""
        ...

    @LiabilitiesHeldforSaleNonCurrent.setter
    def LiabilitiesHeldforSaleNonCurrent(self, value: QuantConnect.Data.Fundamental.LiabilitiesHeldforSaleNonCurrentBalanceSheet):
        """Liabilities related to an asset classified as held for sale excluding the portion due the next 12 months or operating cycle."""
        ...

    @property
    def DebtSecurities(self) -> QuantConnect.Data.Fundamental.DebtSecuritiesBalanceSheet:
        """Debt securities held as investments."""
        ...

    @DebtSecurities.setter
    def DebtSecurities(self, value: QuantConnect.Data.Fundamental.DebtSecuritiesBalanceSheet):
        """Debt securities held as investments."""
        ...

    @property
    def TotalFinancialLeaseObligations(self) -> QuantConnect.Data.Fundamental.TotalFinancialLeaseObligationsBalanceSheet:
        """
        Represents the total amount of long-term capital leases that must be paid within the next accounting period for a Non-
        Differentiated Balance Sheet. Capital lease obligations are contractual obligations that arise from obtaining the use of property or
        equipment via a capital lease contract.
        """
        ...

    @TotalFinancialLeaseObligations.setter
    def TotalFinancialLeaseObligations(self, value: QuantConnect.Data.Fundamental.TotalFinancialLeaseObligationsBalanceSheet):
        """
        Represents the total amount of long-term capital leases that must be paid within the next accounting period for a Non-
        Differentiated Balance Sheet. Capital lease obligations are contractual obligations that arise from obtaining the use of property or
        equipment via a capital lease contract.
        """
        ...

    @property
    def AccruedandDeferredIncomeCurrent(self) -> QuantConnect.Data.Fundamental.AccruedandDeferredIncomeCurrentBalanceSheet:
        """
        Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of
        amount) due within 1 year.
        """
        ...

    @AccruedandDeferredIncomeCurrent.setter
    def AccruedandDeferredIncomeCurrent(self, value: QuantConnect.Data.Fundamental.AccruedandDeferredIncomeCurrentBalanceSheet):
        """
        Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of
        amount) due within 1 year.
        """
        ...

    @property
    def AccruedandDeferredIncomeNonCurrent(self) -> QuantConnect.Data.Fundamental.AccruedandDeferredIncomeNonCurrentBalanceSheet:
        """
        Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of
        amount) due after 1 year.
        """
        ...

    @AccruedandDeferredIncomeNonCurrent.setter
    def AccruedandDeferredIncomeNonCurrent(self, value: QuantConnect.Data.Fundamental.AccruedandDeferredIncomeNonCurrentBalanceSheet):
        """
        Sum of Accrued Liabilities and Deferred Income (amount received in advance but the services are not provided in respect of
        amount) due after 1 year.
        """
        ...

    @property
    def FinanceLeaseReceivablesCurrent(self) -> QuantConnect.Data.Fundamental.FinanceLeaseReceivablesCurrentBalanceSheet:
        """
        Accounts owed to the bank in relation to capital leases to be received within the next accounting period. Capital/ finance lease
        obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.
        """
        ...

    @FinanceLeaseReceivablesCurrent.setter
    def FinanceLeaseReceivablesCurrent(self, value: QuantConnect.Data.Fundamental.FinanceLeaseReceivablesCurrentBalanceSheet):
        """
        Accounts owed to the bank in relation to capital leases to be received within the next accounting period. Capital/ finance lease
        obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.
        """
        ...

    @property
    def FinanceLeaseReceivablesNonCurrent(self) -> QuantConnect.Data.Fundamental.FinanceLeaseReceivablesNonCurrentBalanceSheet:
        """
        Accounts owed to the bank in relation to capital leases to be received beyond the next accounting period. Capital/ finance lease
        obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.
        """
        ...

    @FinanceLeaseReceivablesNonCurrent.setter
    def FinanceLeaseReceivablesNonCurrent(self, value: QuantConnect.Data.Fundamental.FinanceLeaseReceivablesNonCurrentBalanceSheet):
        """
        Accounts owed to the bank in relation to capital leases to be received beyond the next accounting period. Capital/ finance lease
        obligations are contractual obligations that arise from obtaining the use of property or equipment via a capital lease contract.
        """
        ...

    @property
    def FinancialLiabilitiesCurrent(self) -> QuantConnect.Data.Fundamental.FinancialLiabilitiesCurrentBalanceSheet:
        """
        Financial related liabilities due within one year, including short term and current portions of long-term debt, capital leases and
        derivative liabilities.
        """
        ...

    @FinancialLiabilitiesCurrent.setter
    def FinancialLiabilitiesCurrent(self, value: QuantConnect.Data.Fundamental.FinancialLiabilitiesCurrentBalanceSheet):
        """
        Financial related liabilities due within one year, including short term and current portions of long-term debt, capital leases and
        derivative liabilities.
        """
        ...

    @property
    def FinancialLiabilitiesNonCurrent(self) -> QuantConnect.Data.Fundamental.FinancialLiabilitiesNonCurrentBalanceSheet:
        """Financial related liabilities due beyond one year, including long term debt, capital leases and derivative liabilities."""
        ...

    @FinancialLiabilitiesNonCurrent.setter
    def FinancialLiabilitiesNonCurrent(self, value: QuantConnect.Data.Fundamental.FinancialLiabilitiesNonCurrentBalanceSheet):
        """Financial related liabilities due beyond one year, including long term debt, capital leases and derivative liabilities."""
        ...

    @property
    def FinancialAssetsDesignatedasFairValueThroughProfitorLossTotal(self) -> QuantConnect.Data.Fundamental.FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet:
        """
        Financial assets that are held at fair value through profit or loss comprise assets held for trading and those financial assets
        designated as being held at fair value through profit or loss.
        """
        ...

    @FinancialAssetsDesignatedasFairValueThroughProfitorLossTotal.setter
    def FinancialAssetsDesignatedasFairValueThroughProfitorLossTotal(self, value: QuantConnect.Data.Fundamental.FinancialAssetsDesignatedasFairValueThroughProfitorLossTotalBalanceSheet):
        """
        Financial assets that are held at fair value through profit or loss comprise assets held for trading and those financial assets
        designated as being held at fair value through profit or loss.
        """
        ...

    @property
    def TaxesAssetsCurrent(self) -> QuantConnect.Data.Fundamental.TaxesAssetsCurrentBalanceSheet:
        """
        Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the
        balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes, and current
        deferred tax assets.
        """
        ...

    @TaxesAssetsCurrent.setter
    def TaxesAssetsCurrent(self, value: QuantConnect.Data.Fundamental.TaxesAssetsCurrentBalanceSheet):
        """
        Carrying amount due within one year of the balance sheet date (or one operating cycle, if longer) from tax authorities as of the
        balance sheet date representing refunds of overpayments or recoveries based on agreed-upon resolutions of disputes, and current
        deferred tax assets.
        """
        ...

    @property
    def OtherEquityInterest(self) -> QuantConnect.Data.Fundamental.OtherEquityInterestBalanceSheet:
        """Other equity instruments issued by the company that cannot be identified by other specific items in the Equity section."""
        ...

    @OtherEquityInterest.setter
    def OtherEquityInterest(self, value: QuantConnect.Data.Fundamental.OtherEquityInterestBalanceSheet):
        """Other equity instruments issued by the company that cannot be identified by other specific items in the Equity section."""
        ...

    @property
    def InterestBearingBorrowingsNonCurrent(self) -> QuantConnect.Data.Fundamental.InterestBearingBorrowingsNonCurrentBalanceSheet:
        """Carrying amount of any interest-bearing loan which is due after one year."""
        ...

    @InterestBearingBorrowingsNonCurrent.setter
    def InterestBearingBorrowingsNonCurrent(self, value: QuantConnect.Data.Fundamental.InterestBearingBorrowingsNonCurrentBalanceSheet):
        """Carrying amount of any interest-bearing loan which is due after one year."""
        ...

    @property
    def NonInterestBearingBorrowingsNonCurrent(self) -> QuantConnect.Data.Fundamental.NonInterestBearingBorrowingsNonCurrentBalanceSheet:
        """Non-interest bearing borrowings due after a year."""
        ...

    @NonInterestBearingBorrowingsNonCurrent.setter
    def NonInterestBearingBorrowingsNonCurrent(self, value: QuantConnect.Data.Fundamental.NonInterestBearingBorrowingsNonCurrentBalanceSheet):
        """Non-interest bearing borrowings due after a year."""
        ...

    @property
    def TradeandOtherPayablesNonCurrent(self) -> QuantConnect.Data.Fundamental.TradeandOtherPayablesNonCurrentBalanceSheet:
        """Sum of all non-current payables and accrued expenses."""
        ...

    @TradeandOtherPayablesNonCurrent.setter
    def TradeandOtherPayablesNonCurrent(self, value: QuantConnect.Data.Fundamental.TradeandOtherPayablesNonCurrentBalanceSheet):
        """Sum of all non-current payables and accrued expenses."""
        ...

    @property
    def NonInterestBearingBorrowingsCurrent(self) -> QuantConnect.Data.Fundamental.NonInterestBearingBorrowingsCurrentBalanceSheet:
        """Non-interest bearing deposits in other financial institutions for short periods of time, usually less than 12 months."""
        ...

    @NonInterestBearingBorrowingsCurrent.setter
    def NonInterestBearingBorrowingsCurrent(self, value: QuantConnect.Data.Fundamental.NonInterestBearingBorrowingsCurrentBalanceSheet):
        """Non-interest bearing deposits in other financial institutions for short periods of time, usually less than 12 months."""
        ...

    @property
    def PensionandOtherPostRetirementBenefitPlansCurrent(self) -> QuantConnect.Data.Fundamental.PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet:
        """
        Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related
        to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits.
        """
        ...

    @PensionandOtherPostRetirementBenefitPlansCurrent.setter
    def PensionandOtherPostRetirementBenefitPlansCurrent(self, value: QuantConnect.Data.Fundamental.PensionandOtherPostRetirementBenefitPlansCurrentBalanceSheet):
        """
        Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related
        to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits.
        """
        ...

    @property
    def OtherLoanAssets(self) -> QuantConnect.Data.Fundamental.OtherLoanAssetsBalanceSheet:
        """Reflects the carrying amount of any other unpaid loans, an asset of the bank."""
        ...

    @OtherLoanAssets.setter
    def OtherLoanAssets(self, value: QuantConnect.Data.Fundamental.OtherLoanAssetsBalanceSheet):
        """Reflects the carrying amount of any other unpaid loans, an asset of the bank."""
        ...

    @property
    def AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotal(self) -> QuantConnect.Data.Fundamental.AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet:
        """Total value collateral assets pledged to the bank that can be sold or used as collateral for other loans."""
        ...

    @AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotal.setter
    def AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotal(self, value: QuantConnect.Data.Fundamental.AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotalBalanceSheet):
        """Total value collateral assets pledged to the bank that can be sold or used as collateral for other loans."""
        ...

    @property
    def TaxAssetsTotal(self) -> QuantConnect.Data.Fundamental.TaxAssetsTotalBalanceSheet:
        """Sum of total tax assets in a Non-Differentiated Balance Sheet, includes Tax Receivables and Deferred Tax Assets."""
        ...

    @TaxAssetsTotal.setter
    def TaxAssetsTotal(self, value: QuantConnect.Data.Fundamental.TaxAssetsTotalBalanceSheet):
        """Sum of total tax assets in a Non-Differentiated Balance Sheet, includes Tax Receivables and Deferred Tax Assets."""
        ...

    @property
    def AdvancesfromCentralBanks(self) -> QuantConnect.Data.Fundamental.AdvancesfromCentralBanksBalanceSheet:
        """
        Borrowings from the central bank, which are primarily used to cover shortages in the required reserve balance and liquidity
        shortages.
        """
        ...

    @AdvancesfromCentralBanks.setter
    def AdvancesfromCentralBanks(self, value: QuantConnect.Data.Fundamental.AdvancesfromCentralBanksBalanceSheet):
        """
        Borrowings from the central bank, which are primarily used to cover shortages in the required reserve balance and liquidity
        shortages.
        """
        ...

    @property
    def DepositCertificates(self) -> QuantConnect.Data.Fundamental.DepositCertificatesBalanceSheet:
        """
        A savings certificate entitling the bearer to receive interest. A CD bears a maturity date, a specified fixed interest rate and can be
        issued in any denomination.
        """
        ...

    @DepositCertificates.setter
    def DepositCertificates(self, value: QuantConnect.Data.Fundamental.DepositCertificatesBalanceSheet):
        """
        A savings certificate entitling the bearer to receive interest. A CD bears a maturity date, a specified fixed interest rate and can be
        issued in any denomination.
        """
        ...

    @property
    def NonInterestBearingBorrowingsTotal(self) -> QuantConnect.Data.Fundamental.NonInterestBearingBorrowingsTotalBalanceSheet:
        """
        Non-interest bearing deposits in other financial institutions for relatively short periods of time; on a Non-Differentiated Balance
        Sheet.
        """
        ...

    @NonInterestBearingBorrowingsTotal.setter
    def NonInterestBearingBorrowingsTotal(self, value: QuantConnect.Data.Fundamental.NonInterestBearingBorrowingsTotalBalanceSheet):
        """
        Non-interest bearing deposits in other financial institutions for relatively short periods of time; on a Non-Differentiated Balance
        Sheet.
        """
        ...

    @property
    def OtherBorrowedFunds(self) -> QuantConnect.Data.Fundamental.OtherBorrowedFundsBalanceSheet:
        """Other borrowings by the bank to fund its activities that cannot be identified by other specific items in the Liabilities section."""
        ...

    @OtherBorrowedFunds.setter
    def OtherBorrowedFunds(self, value: QuantConnect.Data.Fundamental.OtherBorrowedFundsBalanceSheet):
        """Other borrowings by the bank to fund its activities that cannot be identified by other specific items in the Liabilities section."""
        ...

    @property
    def FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotal(self) -> QuantConnect.Data.Fundamental.FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet:
        """Financial liabilities that are held at fair value through profit or loss."""
        ...

    @FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotal.setter
    def FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotal(self, value: QuantConnect.Data.Fundamental.FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotalBalanceSheet):
        """Financial liabilities that are held at fair value through profit or loss."""
        ...

    @property
    def FinancialLiabilitiesMeasuredatAmortizedCostTotal(self) -> QuantConnect.Data.Fundamental.FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet:
        """Financial liabilities carried at amortized cost."""
        ...

    @FinancialLiabilitiesMeasuredatAmortizedCostTotal.setter
    def FinancialLiabilitiesMeasuredatAmortizedCostTotal(self, value: QuantConnect.Data.Fundamental.FinancialLiabilitiesMeasuredatAmortizedCostTotalBalanceSheet):
        """Financial liabilities carried at amortized cost."""
        ...

    @property
    def AccruedLiabilitiesTotal(self) -> QuantConnect.Data.Fundamental.AccruedLiabilitiesTotalBalanceSheet:
        """
        Liabilities which have occurred, but have not been paid or logged under accounts payable during an accounting period. In other
        words, obligations for goods and services provided to a company for which invoices have not yet been received; on a Non-
        Differentiated Balance Sheet.
        """
        ...

    @AccruedLiabilitiesTotal.setter
    def AccruedLiabilitiesTotal(self, value: QuantConnect.Data.Fundamental.AccruedLiabilitiesTotalBalanceSheet):
        """
        Liabilities which have occurred, but have not been paid or logged under accounts payable during an accounting period. In other
        words, obligations for goods and services provided to a company for which invoices have not yet been received; on a Non-
        Differentiated Balance Sheet.
        """
        ...

    @property
    def DeferredIncomeTotal(self) -> QuantConnect.Data.Fundamental.DeferredIncomeTotalBalanceSheet:
        """
        Collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized on a Non-
        Differentiated Balance Sheet.
        """
        ...

    @DeferredIncomeTotal.setter
    def DeferredIncomeTotal(self, value: QuantConnect.Data.Fundamental.DeferredIncomeTotalBalanceSheet):
        """
        Collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized on a Non-
        Differentiated Balance Sheet.
        """
        ...

    @property
    def DeferredTaxLiabilitiesTotal(self) -> QuantConnect.Data.Fundamental.DeferredTaxLiabilitiesTotalBalanceSheet:
        """
        A future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax
        value or timing differences between the recognition of gains and losses in financial statements, on a Non-Differentiated Balance
        Sheet.
        """
        ...

    @DeferredTaxLiabilitiesTotal.setter
    def DeferredTaxLiabilitiesTotal(self, value: QuantConnect.Data.Fundamental.DeferredTaxLiabilitiesTotalBalanceSheet):
        """
        A future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax
        value or timing differences between the recognition of gains and losses in financial statements, on a Non-Differentiated Balance
        Sheet.
        """
        ...

    @property
    def ReinsuranceAssets(self) -> QuantConnect.Data.Fundamental.ReinsuranceAssetsBalanceSheet:
        """Reinsurance asset is insurance that is purchased by an insurance company from another insurance company."""
        ...

    @ReinsuranceAssets.setter
    def ReinsuranceAssets(self, value: QuantConnect.Data.Fundamental.ReinsuranceAssetsBalanceSheet):
        """Reinsurance asset is insurance that is purchased by an insurance company from another insurance company."""
        ...

    @property
    def DepositsMadeunderAssumedReinsuranceContract(self) -> QuantConnect.Data.Fundamental.DepositsMadeunderAssumedReinsuranceContractBalanceSheet:
        """Deposits made under reinsurance."""
        ...

    @DepositsMadeunderAssumedReinsuranceContract.setter
    def DepositsMadeunderAssumedReinsuranceContract(self, value: QuantConnect.Data.Fundamental.DepositsMadeunderAssumedReinsuranceContractBalanceSheet):
        """Deposits made under reinsurance."""
        ...

    @property
    def InsuranceContractAssets(self) -> QuantConnect.Data.Fundamental.InsuranceContractAssetsBalanceSheet:
        """
        A contract under which one party (the insurer) accepts significant insurance risk from another party (the policyholder) by agreeing
        to compensate the policyholder if a specified uncertain future event (the insured event) adversely affects the policyholder. This
        includes Insurance Receivables and Premiums Receivables.
        """
        ...

    @InsuranceContractAssets.setter
    def InsuranceContractAssets(self, value: QuantConnect.Data.Fundamental.InsuranceContractAssetsBalanceSheet):
        """
        A contract under which one party (the insurer) accepts significant insurance risk from another party (the policyholder) by agreeing
        to compensate the policyholder if a specified uncertain future event (the insured event) adversely affects the policyholder. This
        includes Insurance Receivables and Premiums Receivables.
        """
        ...

    @property
    def InsuranceContractLiabilities(self) -> QuantConnect.Data.Fundamental.InsuranceContractLiabilitiesBalanceSheet:
        """
        Any type of insurance policy that protects an individual or business from the risk that they may be sued and held legally liable for
        something such as malpractice, injury or negligence. Liability insurance policies cover both legal costs and any legal payouts for
        which the insured would be responsible if found legally liable. Intentional damage and contractual liabilities are typically not covered
        in these types of policies.
        """
        ...

    @InsuranceContractLiabilities.setter
    def InsuranceContractLiabilities(self, value: QuantConnect.Data.Fundamental.InsuranceContractLiabilitiesBalanceSheet):
        """
        Any type of insurance policy that protects an individual or business from the risk that they may be sued and held legally liable for
        something such as malpractice, injury or negligence. Liability insurance policies cover both legal costs and any legal payouts for
        which the insured would be responsible if found legally liable. Intentional damage and contractual liabilities are typically not covered
        in these types of policies.
        """
        ...

    @property
    def DepositsReceivedunderCededInsuranceContract(self) -> QuantConnect.Data.Fundamental.DepositsReceivedunderCededInsuranceContractBalanceSheet:
        """Deposit received through ceded insurance contract."""
        ...

    @DepositsReceivedunderCededInsuranceContract.setter
    def DepositsReceivedunderCededInsuranceContract(self, value: QuantConnect.Data.Fundamental.DepositsReceivedunderCededInsuranceContractBalanceSheet):
        """Deposit received through ceded insurance contract."""
        ...

    @property
    def InvestmentContractLiabilities(self) -> QuantConnect.Data.Fundamental.InvestmentContractLiabilitiesBalanceSheet:
        """Liabilities due on the insurance investment contract."""
        ...

    @InvestmentContractLiabilities.setter
    def InvestmentContractLiabilities(self, value: QuantConnect.Data.Fundamental.InvestmentContractLiabilitiesBalanceSheet):
        """Liabilities due on the insurance investment contract."""
        ...

    @property
    def PensionAndOtherPostretirementBenefitPlansTotal(self) -> QuantConnect.Data.Fundamental.PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet:
        """
        Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related
        to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits. Used to reflect the
        current portion of the liabilities (due within one year or within the normal operating cycle if longer).
        """
        ...

    @PensionAndOtherPostretirementBenefitPlansTotal.setter
    def PensionAndOtherPostretirementBenefitPlansTotal(self, value: QuantConnect.Data.Fundamental.PensionAndOtherPostretirementBenefitPlansTotalBalanceSheet):
        """
        Total of the carrying values as of the balance sheet date of obligations incurred through that date and payable for obligations related
        to services received from employees, such as accrued salaries and bonuses, payroll taxes and fringe benefits. Used to reflect the
        current portion of the liabilities (due within one year or within the normal operating cycle if longer).
        """
        ...

    @property
    def LiabilitiesHeldforSaleTotal(self) -> QuantConnect.Data.Fundamental.LiabilitiesHeldforSaleTotalBalanceSheet:
        """Liabilities related to an asset classified as held for sale."""
        ...

    @LiabilitiesHeldforSaleTotal.setter
    def LiabilitiesHeldforSaleTotal(self, value: QuantConnect.Data.Fundamental.LiabilitiesHeldforSaleTotalBalanceSheet):
        """Liabilities related to an asset classified as held for sale."""
        ...

    @property
    def HedgingAssetsCurrent(self) -> QuantConnect.Data.Fundamental.HedgingAssetsCurrentBalanceSheet:
        """A security transaction which expires within a 12 month period that reduces the risk on an existing investment position."""
        ...

    @HedgingAssetsCurrent.setter
    def HedgingAssetsCurrent(self, value: QuantConnect.Data.Fundamental.HedgingAssetsCurrentBalanceSheet):
        """A security transaction which expires within a 12 month period that reduces the risk on an existing investment position."""
        ...

    @property
    def ConvertibleLoansTotal(self) -> QuantConnect.Data.Fundamental.ConvertibleLoansTotalBalanceSheet:
        """
        Loans that entitles the lender (or the holder of loan debenture) to convert the loan to common or preferred stock (ordinary or
        preference shares) at a specified rate conversion rate and a specified time frame; in a Non-Differentiated Balance Sheet.
        """
        ...

    @ConvertibleLoansTotal.setter
    def ConvertibleLoansTotal(self, value: QuantConnect.Data.Fundamental.ConvertibleLoansTotalBalanceSheet):
        """
        Loans that entitles the lender (or the holder of loan debenture) to convert the loan to common or preferred stock (ordinary or
        preference shares) at a specified rate conversion rate and a specified time frame; in a Non-Differentiated Balance Sheet.
        """
        ...

    @property
    def BankLoansTotal(self) -> QuantConnect.Data.Fundamental.BankLoansTotalBalanceSheet:
        """
        Total debt financing obligation issued by a bank or similar financial institution to a company that entitles the lender or holder of the
        instrument to interest payments and the repayment of principal at a specified time; in a Non-Differentiated Balance Sheet.
        """
        ...

    @BankLoansTotal.setter
    def BankLoansTotal(self, value: QuantConnect.Data.Fundamental.BankLoansTotalBalanceSheet):
        """
        Total debt financing obligation issued by a bank or similar financial institution to a company that entitles the lender or holder of the
        instrument to interest payments and the repayment of principal at a specified time; in a Non-Differentiated Balance Sheet.
        """
        ...

    @property
    def OtherLoansTotal(self) -> QuantConnect.Data.Fundamental.OtherLoansTotalBalanceSheet:
        """
        Total other loans between the customer and bank which cannot be identified by other specific items in the Debt section; in a Non-
        Differentiated Balance Sheet.
        """
        ...

    @OtherLoansTotal.setter
    def OtherLoansTotal(self, value: QuantConnect.Data.Fundamental.OtherLoansTotalBalanceSheet):
        """
        Total other loans between the customer and bank which cannot be identified by other specific items in the Debt section; in a Non-
        Differentiated Balance Sheet.
        """
        ...

    @property
    def InsuranceFundsNonCurrent(self) -> QuantConnect.Data.Fundamental.InsuranceFundsNonCurrentBalanceSheet:
        """Liabilities related to insurance funds that are dissolved after one year."""
        ...

    @InsuranceFundsNonCurrent.setter
    def InsuranceFundsNonCurrent(self, value: QuantConnect.Data.Fundamental.InsuranceFundsNonCurrentBalanceSheet):
        """Liabilities related to insurance funds that are dissolved after one year."""
        ...

    @property
    def DebtTotal(self) -> QuantConnect.Data.Fundamental.DebtTotalBalanceSheet:
        """
        The total aggregate of all written promises and/or agreements to repay a stated amount of borrowed funds at a specified date in
        the future; in a Non-Differentiated Balance Sheet.
        """
        ...

    @DebtTotal.setter
    def DebtTotal(self, value: QuantConnect.Data.Fundamental.DebtTotalBalanceSheet):
        """
        The total aggregate of all written promises and/or agreements to repay a stated amount of borrowed funds at a specified date in
        the future; in a Non-Differentiated Balance Sheet.
        """
        ...

    @property
    def ComTreShaNum(self) -> QuantConnect.Data.Fundamental.ComTreShaNumBalanceSheet:
        """
        The treasury stock number of common shares. This represents the number of common shares owned by the company as a result of
        share repurchase programs or donations.
        """
        ...

    @ComTreShaNum.setter
    def ComTreShaNum(self, value: QuantConnect.Data.Fundamental.ComTreShaNumBalanceSheet):
        """
        The treasury stock number of common shares. This represents the number of common shares owned by the company as a result of
        share repurchase programs or donations.
        """
        ...

    @property
    def PreTreShaNum(self) -> QuantConnect.Data.Fundamental.PreTreShaNumBalanceSheet:
        """
        The treasury stock number of preferred shares. This represents the number of preferred shares owned by the company as a result
        of share repurchase programs or donations.
        """
        ...

    @PreTreShaNum.setter
    def PreTreShaNum(self, value: QuantConnect.Data.Fundamental.PreTreShaNumBalanceSheet):
        """
        The treasury stock number of preferred shares. This represents the number of preferred shares owned by the company as a result
        of share repurchase programs or donations.
        """
        ...

    @property
    def NetDebt(self) -> QuantConnect.Data.Fundamental.NetDebtBalanceSheet:
        """
        This is a metric that shows a company's overall debt situation by netting the value of a company's liabilities and
        debts with its cash and other similar liquid assets. It is calculated using [Current Debt] + [Long Term Debt] - [Cash and Cash
        Equivalents].
        """
        ...

    @NetDebt.setter
    def NetDebt(self, value: QuantConnect.Data.Fundamental.NetDebtBalanceSheet):
        """
        This is a metric that shows a company's overall debt situation by netting the value of a company's liabilities and
        debts with its cash and other similar liquid assets. It is calculated using [Current Debt] + [Long Term Debt] - [Cash and Cash
        Equivalents].
        """
        ...

    @property
    def ShareIssued(self) -> QuantConnect.Data.Fundamental.ShareIssuedBalanceSheet:
        """
        The number of authorized shares that is sold to and held by the shareholders of a company, regardless of whether they are insiders,
        institutional investors or the general public. Unlike shares that are held as treasury stock, shares that have been retired are not
        included in this figure. The amount of issued shares can be all or part of the total amount of authorized shares of a corporation.
        """
        ...

    @ShareIssued.setter
    def ShareIssued(self, value: QuantConnect.Data.Fundamental.ShareIssuedBalanceSheet):
        """
        The number of authorized shares that is sold to and held by the shareholders of a company, regardless of whether they are insiders,
        institutional investors or the general public. Unlike shares that are held as treasury stock, shares that have been retired are not
        included in this figure. The amount of issued shares can be all or part of the total amount of authorized shares of a corporation.
        """
        ...

    @property
    def AssetsHeldForSaleCurrent(self) -> QuantConnect.Data.Fundamental.AssetsHeldForSaleCurrentBalanceSheet:
        """
        Short term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less
        costs to sell.
        """
        ...

    @AssetsHeldForSaleCurrent.setter
    def AssetsHeldForSaleCurrent(self, value: QuantConnect.Data.Fundamental.AssetsHeldForSaleCurrentBalanceSheet):
        """
        Short term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less
        costs to sell.
        """
        ...

    @property
    def AssetsHeldForSaleNonCurrent(self) -> QuantConnect.Data.Fundamental.AssetsHeldForSaleNonCurrentBalanceSheet:
        """
        Long term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less
        costs to sell.
        """
        ...

    @AssetsHeldForSaleNonCurrent.setter
    def AssetsHeldForSaleNonCurrent(self, value: QuantConnect.Data.Fundamental.AssetsHeldForSaleNonCurrentBalanceSheet):
        """
        Long term assets set apart for sale to liquidate in the future and are measured at the lower of carrying amount and fair value less
        costs to sell.
        """
        ...

    @property
    def BiologicalAssets(self) -> QuantConnect.Data.Fundamental.BiologicalAssetsBalanceSheet:
        """Biological assets include plants and animals."""
        ...

    @BiologicalAssets.setter
    def BiologicalAssets(self, value: QuantConnect.Data.Fundamental.BiologicalAssetsBalanceSheet):
        """Biological assets include plants and animals."""
        ...

    @property
    def CashRestrictedOrPledged(self) -> QuantConnect.Data.Fundamental.CashRestrictedOrPledgedBalanceSheet:
        """
        Cash that the company can use only for specific purposes or cash deposit or placing of owned property by a debtor (the pledger) to
        a creditor (the pledgee) as a security for a loan or obligation.
        """
        ...

    @CashRestrictedOrPledged.setter
    def CashRestrictedOrPledged(self, value: QuantConnect.Data.Fundamental.CashRestrictedOrPledgedBalanceSheet):
        """
        Cash that the company can use only for specific purposes or cash deposit or placing of owned property by a debtor (the pledger) to
        a creditor (the pledgee) as a security for a loan or obligation.
        """
        ...

    @property
    def ConvertibleLoansNonCurrent(self) -> QuantConnect.Data.Fundamental.ConvertibleLoansNonCurrentBalanceSheet:
        """
        A long term loan with a warrant attached that gives the debt holder the option to exchange all or a portion of the loan principal for
        an equity position in the company at a predetermined rate of conversion within a specified period of time.
        """
        ...

    @ConvertibleLoansNonCurrent.setter
    def ConvertibleLoansNonCurrent(self, value: QuantConnect.Data.Fundamental.ConvertibleLoansNonCurrentBalanceSheet):
        """
        A long term loan with a warrant attached that gives the debt holder the option to exchange all or a portion of the loan principal for
        an equity position in the company at a predetermined rate of conversion within a specified period of time.
        """
        ...

    @property
    def FinancialOrDerivativeInvestmentCurrentLiabilities(self) -> QuantConnect.Data.Fundamental.FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet:
        """
        Financial instruments that are linked to a specific financial instrument or indicator or commodity, and through which specific
        financial risks can be traded in financial markets in their own right, such as financial options, futures, forwards, etc.
        """
        ...

    @FinancialOrDerivativeInvestmentCurrentLiabilities.setter
    def FinancialOrDerivativeInvestmentCurrentLiabilities(self, value: QuantConnect.Data.Fundamental.FinancialOrDerivativeInvestmentCurrentLiabilitiesBalanceSheet):
        """
        Financial instruments that are linked to a specific financial instrument or indicator or commodity, and through which specific
        financial risks can be traded in financial markets in their own right, such as financial options, futures, forwards, etc.
        """
        ...

    @property
    def OtherInvestments(self) -> QuantConnect.Data.Fundamental.OtherInvestmentsBalanceSheet:
        """
        Investments that are neither Investment in Financial Assets nor Long term equity investment, not expected to be cashed within a
        year.
        """
        ...

    @OtherInvestments.setter
    def OtherInvestments(self, value: QuantConnect.Data.Fundamental.OtherInvestmentsBalanceSheet):
        """
        Investments that are neither Investment in Financial Assets nor Long term equity investment, not expected to be cashed within a
        year.
        """
        ...

    @property
    def TradeAndOtherReceivablesNonCurrent(self) -> QuantConnect.Data.Fundamental.TradeAndOtherReceivablesNonCurrentBalanceSheet:
        """
        Amounts due from customers or clients, more than one year from the balance sheet date, for goods or services that have been
        delivered or sold in the normal course of business, or other receivables.
        """
        ...

    @TradeAndOtherReceivablesNonCurrent.setter
    def TradeAndOtherReceivablesNonCurrent(self, value: QuantConnect.Data.Fundamental.TradeAndOtherReceivablesNonCurrentBalanceSheet):
        """
        Amounts due from customers or clients, more than one year from the balance sheet date, for goods or services that have been
        delivered or sold in the normal course of business, or other receivables.
        """
        ...

    @property
    def BSFileDate(self) -> datetime.datetime:
        """Filing date of the Balance Sheet"""
        ...

    @BSFileDate.setter
    def BSFileDate(self, value: datetime.datetime):
        """Filing date of the Balance Sheet"""
        ...

    @property
    def DueFromRelatedParties(self) -> QuantConnect.Data.Fundamental.DueFromRelatedPartiesBalanceSheet:
        """For an unclassified balance sheet, carrying amount as of the balance sheet date of obligations due all related parties."""
        ...

    @DueFromRelatedParties.setter
    def DueFromRelatedParties(self, value: QuantConnect.Data.Fundamental.DueFromRelatedPartiesBalanceSheet):
        """For an unclassified balance sheet, carrying amount as of the balance sheet date of obligations due all related parties."""
        ...

    @property
    def UnallocatedSurplus(self) -> QuantConnect.Data.Fundamental.UnallocatedSurplusBalanceSheet:
        """
        The amount of surplus from insurance contracts which has not been allocated at the balance sheet date. This is represented as a
        liability to policyholders, as it pertains to cumulative income arising from the with-profits business.
        """
        ...

    @UnallocatedSurplus.setter
    def UnallocatedSurplus(self, value: QuantConnect.Data.Fundamental.UnallocatedSurplusBalanceSheet):
        """
        The amount of surplus from insurance contracts which has not been allocated at the balance sheet date. This is represented as a
        liability to policyholders, as it pertains to cumulative income arising from the with-profits business.
        """
        ...

    @property
    def DebtDueInYear1(self) -> QuantConnect.Data.Fundamental.DebtDueInYear1BalanceSheet:
        """Debt due under 1 year according to the debt maturity schedule reported by the company."""
        ...

    @DebtDueInYear1.setter
    def DebtDueInYear1(self, value: QuantConnect.Data.Fundamental.DebtDueInYear1BalanceSheet):
        """Debt due under 1 year according to the debt maturity schedule reported by the company."""
        ...

    @property
    def DebtDueInYear2(self) -> QuantConnect.Data.Fundamental.DebtDueInYear2BalanceSheet:
        """Debt due under 2 years according to the debt maturity schedule reported by the company."""
        ...

    @DebtDueInYear2.setter
    def DebtDueInYear2(self, value: QuantConnect.Data.Fundamental.DebtDueInYear2BalanceSheet):
        """Debt due under 2 years according to the debt maturity schedule reported by the company."""
        ...

    @property
    def DebtDueInYear5(self) -> QuantConnect.Data.Fundamental.DebtDueInYear5BalanceSheet:
        """
        Debt due within 5 year if the company provide maturity schedule in range e.g. 1-5 years, 2-5 years. Debt due under 5 years
        according to the debt maturity schedule reported by the company. If a range is reported by the company, the value will be collected
        under the maximum number of years (eg. 1-5 years, 3-5 years or 5 years will all be collected under this data point.)
        """
        ...

    @DebtDueInYear5.setter
    def DebtDueInYear5(self, value: QuantConnect.Data.Fundamental.DebtDueInYear5BalanceSheet):
        """
        Debt due within 5 year if the company provide maturity schedule in range e.g. 1-5 years, 2-5 years. Debt due under 5 years
        according to the debt maturity schedule reported by the company. If a range is reported by the company, the value will be collected
        under the maximum number of years (eg. 1-5 years, 3-5 years or 5 years will all be collected under this data point.)
        """
        ...

    @property
    def DebtDueBeyond(self) -> QuantConnect.Data.Fundamental.DebtDueBeyondBalanceSheet:
        """
        Debt maturing beyond 5 years (eg. 5-10 years) or with no specified maturity, according to the debt maturity schedule reported by
        the company.
        """
        ...

    @DebtDueBeyond.setter
    def DebtDueBeyond(self, value: QuantConnect.Data.Fundamental.DebtDueBeyondBalanceSheet):
        """
        Debt maturing beyond 5 years (eg. 5-10 years) or with no specified maturity, according to the debt maturity schedule reported by
        the company.
        """
        ...

    @property
    def TotalDebtInMaturitySchedule(self) -> QuantConnect.Data.Fundamental.TotalDebtInMaturityScheduleBalanceSheet:
        """Total Debt in Maturity Schedule is the sum of Debt details above."""
        ...

    @TotalDebtInMaturitySchedule.setter
    def TotalDebtInMaturitySchedule(self, value: QuantConnect.Data.Fundamental.TotalDebtInMaturityScheduleBalanceSheet):
        """Total Debt in Maturity Schedule is the sum of Debt details above."""
        ...

    @property
    def FixedAssetsRevaluationReserve(self) -> QuantConnect.Data.Fundamental.FixedAssetsRevaluationReserveBalanceSheet:
        """Reserves created by revaluation of assets."""
        ...

    @FixedAssetsRevaluationReserve.setter
    def FixedAssetsRevaluationReserve(self, value: QuantConnect.Data.Fundamental.FixedAssetsRevaluationReserveBalanceSheet):
        """Reserves created by revaluation of assets."""
        ...

    @property
    def CurrentOtherFinancialLiabilities(self) -> QuantConnect.Data.Fundamental.CurrentOtherFinancialLiabilitiesBalanceSheet:
        """Other short term financial liabilities not categorized and due within one year or a normal operating cycle (whichever is longer)."""
        ...

    @CurrentOtherFinancialLiabilities.setter
    def CurrentOtherFinancialLiabilities(self, value: QuantConnect.Data.Fundamental.CurrentOtherFinancialLiabilitiesBalanceSheet):
        """Other short term financial liabilities not categorized and due within one year or a normal operating cycle (whichever is longer)."""
        ...

    @property
    def NonCurrentOtherFinancialLiabilities(self) -> QuantConnect.Data.Fundamental.NonCurrentOtherFinancialLiabilitiesBalanceSheet:
        """Other long term financial liabilities not categorized and due over one year or a normal operating cycle (whichever is longer)."""
        ...

    @NonCurrentOtherFinancialLiabilities.setter
    def NonCurrentOtherFinancialLiabilities(self, value: QuantConnect.Data.Fundamental.NonCurrentOtherFinancialLiabilitiesBalanceSheet):
        """Other long term financial liabilities not categorized and due over one year or a normal operating cycle (whichever is longer)."""
        ...

    @property
    def OtherFinancialLiabilities(self) -> QuantConnect.Data.Fundamental.OtherFinancialLiabilitiesBalanceSheet:
        """Other financial liabilities not categorized."""
        ...

    @OtherFinancialLiabilities.setter
    def OtherFinancialLiabilities(self, value: QuantConnect.Data.Fundamental.OtherFinancialLiabilitiesBalanceSheet):
        """Other financial liabilities not categorized."""
        ...

    @property
    def TotalLiabilitiesAsReported(self) -> QuantConnect.Data.Fundamental.TotalLiabilitiesAsReportedBalanceSheet:
        """Total liabilities as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    @TotalLiabilitiesAsReported.setter
    def TotalLiabilitiesAsReported(self, value: QuantConnect.Data.Fundamental.TotalLiabilitiesAsReportedBalanceSheet):
        """Total liabilities as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    @property
    def TotalEquityAsReported(self) -> QuantConnect.Data.Fundamental.TotalEquityAsReportedBalanceSheet:
        """Total Equity as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    @TotalEquityAsReported.setter
    def TotalEquityAsReported(self, value: QuantConnect.Data.Fundamental.TotalEquityAsReportedBalanceSheet):
        """Total Equity as reported by the company, may be the same or not the same as Morningstar's standardized definition."""
        ...

    def __init__(self) -> None:
        """Creates an instance of the BalanceSheet class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.BalanceSheet) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class AmortizationCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The systematic and rational apportionment of the acquisition cost of intangible operational assets to future periods in which the benefits
    contribute to revenue. This field is to include Amortization and any variation where Amortization is the first account listed in the line item,
    excluding Amortization of Intangibles.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AmortizationCashFlowStatement class"""
        ...


class CapitalExpenditureCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Funds used by a company to acquire or upgrade physical assets such as property, industrial buildings or equipment. This
    type of outlay is made by companies to maintain or increase the scope of their operations. Capital expenditures are generally
    depreciated or depleted over their useful life, as distinguished from repairs, which are subtracted from the income of the current
    year.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CapitalExpenditureCashFlowStatement class"""
        ...


class CashDividendsPaidCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Payments for the cash dividends declared by an entity to shareholders during the PeriodAsByte. This element includes paid and unpaid
    dividends declared during the period for both common and preferred stock.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashDividendsPaidCashFlowStatement class"""
        ...


class CashFlowFromContinuingFinancingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash generated by or used in financing activities of continuing operations; excludes cash flows from discontinued operations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFlowFromContinuingFinancingActivitiesCashFlowStatement class"""
        ...


class CashFlowFromContinuingInvestingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash generated by or used in investing activities of continuing operations; excludes cash flows from discontinued operations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFlowFromContinuingInvestingActivitiesCashFlowStatement class"""
        ...


class CashFlowFromContinuingOperatingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash generated by or used in operating activities of continuing operations; excludes cash flows from discontinued operations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFlowFromContinuingOperatingActivitiesCashFlowStatement class"""
        ...


class CashFlowFromDiscontinuedOperationCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount of cash flow from discontinued operation, including operating activities, investing activities, and financing
    activities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFlowFromDiscontinuedOperationCashFlowStatement class"""
        ...


class FinancingCashFlowCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net cash inflow (outflow) from financing activity for the period, which involve changes to the long-term liabilities and
    stockholders' equity.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancingCashFlowCashFlowStatement class"""
        ...


class InvestingCashFlowCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An item on the cash flow statement that reports the aggregate change in a company's cash position resulting from any gains (or
    losses) from investments in the financial markets and operating subsidiaries, and changes resulting from amounts spent on
    investments in capital assets such as plant and equipment.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InvestingCashFlowCashFlowStatement class"""
        ...


class OperatingCashFlowCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity.
    Operating activities include all transactions and events that are not defined as investing or financing activities. Operating activities
    generally involve producing and delivering goods and providing services. Cash flows from operating activities are generally the cash
    effects of transactions and other events that enter into the determination of net income.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperatingCashFlowCashFlowStatement class"""
        ...


class BeginningCashPositionCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash and equivalents balance at the beginning of the accounting period, as indicated on the Cash Flow statement."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BeginningCashPositionCashFlowStatement class"""
        ...


class EndCashPositionCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The cash and cash equivalents balance at the end of the accounting period, as indicated on the Cash Flow statement. It is equal to
    the Beginning Cash and Equivalents, plus the Net Change in Cash and Equivalents.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EndCashPositionCashFlowStatement class"""
        ...


class CashFromDiscontinuedFinancingCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFromDiscontinuedFinancingCashFlowStatement class"""
        ...


class CashFromDiscontinuedFinancingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFromDiscontinuedFinancingActivitiesCashFlowStatement class"""
        ...


class CashFromDiscontinuedInvestingCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net cash inflow (outflow) from discontinued investing activities over the designated time PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFromDiscontinuedInvestingCashFlowStatement class"""
        ...


class CashFromDiscontinuedInvestingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net cash inflow (outflow) from discontinued investing activities over the designated time PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFromDiscontinuedInvestingActivitiesCashFlowStatement class"""
        ...


class CashFromDiscontinuedOperatingCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the
    reporting entity.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFromDiscontinuedOperatingCashFlowStatement class"""
        ...


class ChangeInAccountPayableCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the account payables."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInAccountPayableCashFlowStatement class"""
        ...


class ChangeInTaxPayableCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the tax payables."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInTaxPayableCashFlowStatement class"""
        ...


class ChangeInAccruedExpenseCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the accrued expenses."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInAccruedExpenseCashFlowStatement class"""
        ...


class ChangeInAccruedInvestmentIncomeCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net change during the reporting period in investment income that has been earned but not yet received in cash."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInAccruedInvestmentIncomeCashFlowStatement class"""
        ...


class ChangesInCashCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net change between the beginning and ending balance of cash and cash equivalents."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangesInCashCashFlowStatement class"""
        ...


class ChangeInDeferredAcquisitionCostsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The change of the unamortized portion as of the balance sheet date of capitalized costs that vary with and are primarily related to
    the acquisition of new and renewal insurance contracts.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInDeferredAcquisitionCostsCashFlowStatement class"""
        ...


class ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from another bank to
    meet its reserve requirements and the amount of securities that an institution sells and agrees to repurchase at a specified date for
    a specified price, net of any reductions or offsets.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement class"""
        ...


class ChangeInFundsWithheldCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net change during the reporting period associated with funds withheld."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInFundsWithheldCashFlowStatement class"""
        ...


class ChangeInIncomeTaxPayableCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the income tax payables."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInIncomeTaxPayableCashFlowStatement class"""
        ...


class ChangeInInterestPayableCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The increase or decrease between periods of the interest payable. Interest payable means carrying value as of the balance sheet
    date of interest payable on all forms of debt.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInInterestPayableCashFlowStatement class"""
        ...


class ChangeInInventoryCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The increase or decrease between periods of the Inventories. Inventories represent merchandise bought for resale and supplies and
    raw materials purchased for use in revenue producing operations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInInventoryCashFlowStatement class"""
        ...


class ChangeInLoansCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net change that a lender gives money or property to a borrower and the borrower agrees to return the property or repay the
    borrowed money, along with interest, at a predetermined date in the future.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInLoansCashFlowStatement class"""
        ...


class ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net change during the reporting period in the reserve account established to account for expected but unspecified losses."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement class"""
        ...


class ChangeInPayableCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the payables."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInPayableCashFlowStatement class"""
        ...


class ChangeInPayablesAndAccruedExpenseCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The increase or decrease between periods of the payables and accrued expenses. Accrued expenses represent expenses incurred
    at the end of the reporting period but not yet paid; also called accrued liabilities. The accrued liability is shown under current
    liabilities in the balance sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInPayablesAndAccruedExpenseCashFlowStatement class"""
        ...


class ChangeInPrepaidAssetsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the prepaid assets."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInPrepaidAssetsCashFlowStatement class"""
        ...


class ChangeInReceivablesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The increase or decrease between periods of the receivables. Receivables are amounts due to be paid to the company from clients
    and other.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInReceivablesCashFlowStatement class"""
        ...


class ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net change during the reporting period in the amount of benefits the ceding insurer expects to recover on insurance policies
    ceded to other insurance entities as of the balance sheet date for all guaranteed benefit types.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement class"""
        ...


class ChangeInRestrictedCashCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net cash inflow (outflow) for the net change associated with funds that are not available for withdrawal or use (such as funds
    held in escrow).
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInRestrictedCashCashFlowStatement class"""
        ...


class ChangeInTradingAccountSecuritiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net change during the reporting period associated with trading account assets. Trading account assets are bought and held
    principally for the purpose of selling them in the near term (thus held for only a short period of time). Unrealized holding gains and
    losses for trading securities are included in earnings.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInTradingAccountSecuritiesCashFlowStatement class"""
        ...


class ChangeInWorkingCapitalCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The increase or decrease between periods of the working capital.  Working Capital is the amount left to the company to finance
    operations and expansion after current liabilities have been covered.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInWorkingCapitalCashFlowStatement class"""
        ...


class DeferredIncomeTaxCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The component of income tax expense for the period representing the net change in the entities deferred tax assets and liabilities
    pertaining to continuing operations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DeferredIncomeTaxCashFlowStatement class"""
        ...


class DeferredTaxCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Future tax liability or asset, resulting from temporary differences between book (accounting) value of assets and liabilities, and their
    tax value. This arises due to differences between financial accounting for shareholders and tax accounting.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DeferredTaxCashFlowStatement class"""
        ...


class DepletionCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Unlike depreciation and amortization, which mainly describe the deduction of expenses due to the aging of equipment and property,
    depletion is the actual physical reduction of natural resources by companies.   For example, coalmines, oil fields and other natural
    resources are depleted on company accounting statements. This reduction in the quantity of resources is meant to assist in
    accurately identifying the value of the asset on the balance sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepletionCashFlowStatement class"""
        ...


class DepreciationCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An expense recorded to allocate a tangible asset's cost over its useful life. Since it is a non-cash expense, it increases free cash
    flow while decreasing reported earnings.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepreciationCashFlowStatement class"""
        ...


class DepreciationAndAmortizationCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The current period expense charged against earnings on long-lived, physical assets used in the normal conduct of business and not
    intended for resale to allocate or recognize the cost of assets over their useful lives; or to record the reduction in book value of an
    intangible asset over the benefit period of such asset.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepreciationAndAmortizationCashFlowStatement class"""
        ...


class DepreciationAmortizationDepletionCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    It is a non cash charge that represents a reduction in the value of fixed assets due to wear, age or obsolescence. This figure also
    includes amortization of leased property, intangibles, and goodwill, and depletion. This non-cash item is an add-back to the cash
    flow statement.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DepreciationAmortizationDepletionCashFlowStatement class"""
        ...


class EffectOfExchangeRateChangesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The effect of exchange rate changes on cash balances held in foreign currencies."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EffectOfExchangeRateChangesCashFlowStatement class"""
        ...


class IncreaseDecreaseInDepositCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The aggregate net change during the reporting period in moneys given as security, collateral, or margin deposits."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IncreaseDecreaseInDepositCashFlowStatement class"""
        ...


class NetCommonStockIssuanceCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of common stock."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetCommonStockIssuanceCashFlowStatement class"""
        ...


class NetIssuancePaymentsOfDebtCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of debt."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIssuancePaymentsOfDebtCashFlowStatement class"""
        ...


class NetLongTermDebtIssuanceCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The increase or decrease between periods of long term debt. Long term debt includes notes payable, bonds payable, mortgage
    loans, convertible debt, subordinated debt and other types of long term debt.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetLongTermDebtIssuanceCashFlowStatement class"""
        ...


class NetPreferredStockIssuanceCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of preferred stock."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetPreferredStockIssuanceCashFlowStatement class"""
        ...


class NetShortTermDebtIssuanceCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of short term debt."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetShortTermDebtIssuanceCashFlowStatement class"""
        ...


class NetCashFromDiscontinuedOperationsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the
    reporting entity.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetCashFromDiscontinuedOperationsCashFlowStatement class"""
        ...


class NetForeignCurrencyExchangeGainLossCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount of realized and unrealized gain or loss resulting from changes in exchange rates between currencies.
    (Excludes foreign currency transactions designated as hedges of net investment in a foreign entity and inter-company foreign
    currency transactions that are of a long-term nature, when the entities to the transaction are consolidated, combined, or accounted
    for by the equity method in the reporting entity's financial statements. For certain entities, primarily banks, which are dealers in
    foreign exchange, foreign currency transaction gains or losses, may be disclosed as dealer gains or losses.)
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetForeignCurrencyExchangeGainLossCashFlowStatement class"""
        ...


class NetIncomeFromContinuingOperationsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from discontinued operations,
    extraordinary items, impact of changes in accounting principles, minority interest, and various other reconciling adjustments;
    represents the starting line for Operating Cash Flow.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeFromContinuingOperationsCashFlowStatement class"""
        ...


class PaymentForLoansCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Payment from a bank or insurance company to the lender who lends money or property based on the agreement, along with
    interest, at a predetermined date in the future.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PaymentForLoansCashFlowStatement class"""
        ...


class CommonStockPaymentsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash outflow to reacquire common stock during the PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommonStockPaymentsCashFlowStatement class"""
        ...


class PreferredStockPaymentsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash outflow to reacquire preferred stock during the PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreferredStockPaymentsCashFlowStatement class"""
        ...


class LongTermDebtPaymentsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash outflow for debt initially having maturity due after one year or beyond the normal operating cycle, if longer."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LongTermDebtPaymentsCashFlowStatement class"""
        ...


class ShortTermDebtPaymentsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash outflow for a borrowing having initial term of repayment within one year or the normal operating cycle, if longer."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ShortTermDebtPaymentsCashFlowStatement class"""
        ...


class ProceedsFromLoansCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash inflow from borrowing money or property for a bank or insurance company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProceedsFromLoansCashFlowStatement class"""
        ...


class ProceedsFromStockOptionExercisedCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash inflow associated with the amount received from holders exercising their stock options."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProceedsFromStockOptionExercisedCashFlowStatement class"""
        ...


class CommonStockIssuanceCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash inflow from offering common stock, which is the additional capital contribution to the entity during the PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommonStockIssuanceCashFlowStatement class"""
        ...


class LongTermDebtIssuanceCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash inflow from a debt initially having maturity due after one year or beyond the operating cycle, if longer."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LongTermDebtIssuanceCashFlowStatement class"""
        ...


class PreferredStockIssuanceCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash inflow from offering preferred stock."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreferredStockIssuanceCashFlowStatement class"""
        ...


class ShortTermDebtIssuanceCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash inflow from a debt initially having maturity due within one year or the normal operating cycle, if longer."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ShortTermDebtIssuanceCashFlowStatement class"""
        ...


class NetProceedsPaymentForLoanCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net value of proceeds or payments of loans."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetProceedsPaymentForLoanCashFlowStatement class"""
        ...


class ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,
    certificates of deposits.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement class"""
        ...


class PurchaseOfIntangiblesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The amount of capital outlays undertaken to increase, construct or improve intangible assets."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PurchaseOfIntangiblesCashFlowStatement class"""
        ...


class PurchaseOfInvestmentCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """All purchases of investments, including both long term and short term."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PurchaseOfInvestmentCashFlowStatement class"""
        ...


class PurchaseOfPPECashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount of capital outlays undertaken to increase, construct or improve capital assets. This category includes property, plant
    equipment, furniture, fixed assets, buildings, and improvement.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PurchaseOfPPECashFlowStatement class"""
        ...


class PurchaseOfBusinessCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    All the purchases of business including business acquisitions, investment in subsidiary; investing in affiliated companies, and join
    venture.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PurchaseOfBusinessCashFlowStatement class"""
        ...


class NetBusinessPurchaseAndSaleCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net change between Purchases/Sales of Business."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetBusinessPurchaseAndSaleCashFlowStatement class"""
        ...


class NetIntangiblesPurchaseAndSaleCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net change between Purchases/Sales of Intangibles."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIntangiblesPurchaseAndSaleCashFlowStatement class"""
        ...


class NetInvestmentPurchaseAndSaleCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net change between Purchases/Sales of Investments."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetInvestmentPurchaseAndSaleCashFlowStatement class"""
        ...


class NetPPEPurchaseAndSaleCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The net change between Purchases/Sales of PPE."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetPPEPurchaseAndSaleCashFlowStatement class"""
        ...


class SaleOfBusinessCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Proceeds received from selling a business including proceeds from a subsidiary, and proceeds from an affiliated company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SaleOfBusinessCashFlowStatement class"""
        ...


class SaleOfIntangiblesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The amount of capital inflow from the sale of all kinds of intangible assets."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SaleOfIntangiblesCashFlowStatement class"""
        ...


class SaleOfInvestmentCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Proceeds received from selling all kind of investments, including both long term and short term."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SaleOfInvestmentCashFlowStatement class"""
        ...


class SaleOfPPECashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Proceeds from selling any fixed assets such as property, plant and equipment, which also includes retirement of equipment."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SaleOfPPECashFlowStatement class"""
        ...


class ChangesInAccountReceivablesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the accounts receivables."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangesInAccountReceivablesCashFlowStatement class"""
        ...


class AmortizationOfFinancingCostsAndDiscountsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The component of interest expense representing the non-cash expenses charged against earnings in the period to allocate debt
    discount and premium, and the costs to issue debt and obtain financing over the related debt instruments. This item is usually only
    available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AmortizationOfFinancingCostsAndDiscountsCashFlowStatement class"""
        ...


class AmortizationOfSecuritiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Represents amortization of the allocation of a lump sum amount to different time periods, particularly for securities, debt, loans,
    and other forms of financing. Does not include amortization, amortization of capital expenditure and intangible assets.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AmortizationOfSecuritiesCashFlowStatement class"""
        ...


class AssetImpairmentChargeCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The charge against earnings resulting from the aggregate write down of all assets from their carrying value to their fair value."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AssetImpairmentChargeCashFlowStatement class"""
        ...


class ChangeInDividendPayableCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the dividend payables."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInDividendPayableCashFlowStatement class"""
        ...


class ChangeInDeferredChargesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net change during the reporting period in the value of expenditures made during the current reporting period for benefits that
    will be received over a period of years. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInDeferredChargesCashFlowStatement class"""
        ...


class ChangeInOtherCurrentAssetsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The increase or decrease between periods of the Other Current Assets. This category typically includes prepayments, deferred
    charges, and amounts (other than trade accounts) due from parents and subsidiaries.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInOtherCurrentAssetsCashFlowStatement class"""
        ...


class ChangeInOtherCurrentLiabilitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The increase or decrease between periods of the Other Current liabilities. Other Current liabilities is a balance sheet entry used by
    companies to group together current liabilities that are not assigned to common liabilities such as debt obligations or accounts
    payable.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInOtherCurrentLiabilitiesCashFlowStatement class"""
        ...


class ChangeInOtherWorkingCapitalCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the other working capital."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInOtherWorkingCapitalCashFlowStatement class"""
        ...


class ChangeInUnearnedPremiumsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The change during the period in the unearned portion of premiums written, excluding the portion amortized into income. This item is
    usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeInUnearnedPremiumsCashFlowStatement class"""
        ...


class CommonStockDividendPaidCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash outflow from the distribution of an entity's earnings in the form of dividends to common shareholders."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommonStockDividendPaidCashFlowStatement class"""
        ...


class EarningsLossesFromEquityInvestmentsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This item represents the entity's proportionate share for the period of the net income (loss) of its investee (such as unconsolidated
    subsidiaries and joint ventures) to which the equity method of accounting is applied. The amount typically reflects adjustments.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EarningsLossesFromEquityInvestmentsCashFlowStatement class"""
        ...


class ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Reductions in the entity's income taxes that arise when compensation cost (from non-qualified share-based compensation)
    recognized on the entities tax return exceeds compensation cost from share-based compensation recognized in financial
    statements. This element reduces net cash provided by operating activities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement class"""
        ...


class GainLossOnInvestmentSecuritiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This item represents the net total realized gain (loss) included in earnings for the period as a result of selling or holding marketable
    securities categorized as trading, available-for-sale, or held-to-maturity, including the unrealized holding gain or loss of held-to-
    maturity securities transferred to the trading security category and the cumulative unrealized gain or loss which was included in
    other comprehensive income (a separate component of shareholders' equity) for available-for-sale securities transferred to trading
    securities during the PeriodAsByte. Additionally, this item would include any losses recognized for other than temporary impairments of the
    subject investments in debt and equity securities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainLossOnInvestmentSecuritiesCashFlowStatement class"""
        ...


class GainLossOnSaleOfBusinessCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting
    PeriodAsByte. This element refers to the gain (loss) and not to the cash proceeds of the business. This element is a non-cash adjustment
    to net income when calculating net cash generated by operating activities using the indirect method.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainLossOnSaleOfBusinessCashFlowStatement class"""
        ...


class GainLossOnSaleOfPPECashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The difference between the sale price or salvage price and the book value of the property, plant and equipment that was sold or
    retired during the reporting PeriodAsByte. Includes the amount received from selling any fixed assets such as property, plant and
    equipment. Usually this section also includes any retirement of equipment. Such as Sale of business segments; Sale of credit and
    receivables; Property disposition; Proceeds from sale or disposition of business or investment; Decrease in excess of purchase price
    over acquired net assets; Abandoned project (expenditures) credit; Allowances for other funds during construction.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GainLossOnSaleOfPPECashFlowStatement class"""
        ...


class InterestCreditedOnPolicyholderDepositsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    An expense reported in the income statement and needs to be removed from net income to arrive at cash provided by (used in)
    operations to the extent that such interest has not been paid. This item is usually only available for insurance industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestCreditedOnPolicyholderDepositsCashFlowStatement class"""
        ...


class CashFromDiscontinuedOperatingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the
    reporting entity.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFromDiscontinuedOperatingActivitiesCashFlowStatement class"""
        ...


class OperatingGainsLossesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The gain or loss from the entity's ongoing operations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperatingGainsLossesCashFlowStatement class"""
        ...


class NetOtherFinancingChargesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Miscellaneous charges incurred due to Financing activities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetOtherFinancingChargesCashFlowStatement class"""
        ...


class NetOtherInvestingChangesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Miscellaneous charges incurred due to Investing activities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetOtherInvestingChangesCashFlowStatement class"""
        ...


class OtherNonCashItemsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Items which adjusted back from net income but without real cash outflow or inflow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherNonCashItemsCashFlowStatement class"""
        ...


class PensionAndEmployeeBenefitExpenseCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount of pension and other (such as medical, dental and life insurance) postretirement benefit costs recognized during the
    PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PensionAndEmployeeBenefitExpenseCashFlowStatement class"""
        ...


class PreferredStockDividendPaidCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Pay for the amount of dividends declared or paid in the period to preferred shareholders or the amount for which the obligation to
    pay them dividends rose in the PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreferredStockDividendPaidCashFlowStatement class"""
        ...


class ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate amount change of (1) the lending of excess federal funds to another commercial bank requiring such for its legal
    reserve requirements and (2) securities purchased under agreements to resell. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement class"""
        ...


class ProvisionForLoanLeaseAndOtherLossesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The sum of the periodic provision charged to earnings, based on an assessment of uncollectible from the counterparty on account
    of loan, lease or other credit losses, to reduce these accounts to the amount that approximates their net realizable value. This item
    is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProvisionForLoanLeaseAndOtherLossesCashFlowStatement class"""
        ...


class RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The gains and losses included in earnings that represent the difference between the sale price and the carrying value of loans and
    leases that were sold during the reporting PeriodAsByte. This element refers to the gain (loss) and not to the cash proceeds of the sales.
    This element is a non-cash adjustment to net income when calculating net cash generated by operating activities using the indirect
    method. This item is usually only available for bank industry.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement class"""
        ...


class StockBasedCompensationCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Value of stock issued during the period as a result of any share-based compensation plan other than an employee stock ownership
    plan (ESOP).
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the StockBasedCompensationCashFlowStatement class"""
        ...


class UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increases (decreases) in the market value of unsold securities whose gains (losses) were included in earnings."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement class"""
        ...


class UnrealizedGainsLossesOnDerivativesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The gross gains and losses on derivatives. This item is usually only available for insurance industry."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the UnrealizedGainsLossesOnDerivativesCashFlowStatement class"""
        ...


class AmortizationOfIntangiblesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in
    production) in a systematic and rational manner to the periods expected to benefit from such assets.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AmortizationOfIntangiblesCashFlowStatement class"""
        ...


class IncomeTaxPaidSupplementalDataCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The amount of cash paid during the current period to foreign, federal state and local authorities as taxes on income."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IncomeTaxPaidSupplementalDataCashFlowStatement class"""
        ...


class InterestPaidSupplementalDataCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The amount of cash paid during the current period for interest owed on money borrowed; including amount of interest capitalized."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestPaidSupplementalDataCashFlowStatement class"""
        ...


class IssuanceOfCapitalStockCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash inflow from offering common stock, which is the additional capital contribution to the entity during the PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IssuanceOfCapitalStockCashFlowStatement class"""
        ...


class IssuanceOfDebtCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash inflow due to an increase in long term debt."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IssuanceOfDebtCashFlowStatement class"""
        ...


class RepaymentOfDebtCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Payments to Settle Long Term Debt plus Payments to Settle Short Term Debt."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RepaymentOfDebtCashFlowStatement class"""
        ...


class RepurchaseOfCapitalStockCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Payments for Common Stock plus Payments for Preferred Stock."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RepurchaseOfCapitalStockCashFlowStatement class"""
        ...


class FreeCashFlowCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash Flow Operations minus Capital Expenditures."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FreeCashFlowCashFlowStatement class"""
        ...


class DecreaseinInterestBearingDepositsinBankCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,
    certificates of deposits.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DecreaseinInterestBearingDepositsinBankCashFlowStatement class"""
        ...


class IncreaseinInterestBearingDepositsinBankCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Increase in interest-bearing deposits in bank."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IncreaseinInterestBearingDepositsinBankCashFlowStatement class"""
        ...


class InterestReceivedCFOCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Interest received by the company, in the Operating Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestReceivedCFOCashFlowStatement class"""
        ...


class InterestPaidCFOCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Interest paid on loans, debt or borrowings, in the Operating Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestPaidCFOCashFlowStatement class"""
        ...


class PurchaseofSubsidiariesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Purchase of subsidiaries or interest in subsidiaries (investments 51% and above)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PurchaseofSubsidiariesCashFlowStatement class"""
        ...


class PurchaseofJointVentureAssociateCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Purchase of joint venture/associates (investment below 50%)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PurchaseofJointVentureAssociateCashFlowStatement class"""
        ...


class SaleofSubsidiariesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash inflow from the disposal of any subsidiaries."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SaleofSubsidiariesCashFlowStatement class"""
        ...


class SaleofJointVentureAssociateCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash inflow from the disposal of joint venture/associates (investment below 50%)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SaleofJointVentureAssociateCashFlowStatement class"""
        ...


class IncreaseDecreaseinLeaseFinancingCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Change in cash flow resulting from increase/decrease in lease financing."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IncreaseDecreaseinLeaseFinancingCashFlowStatement class"""
        ...


class IncreaseinLeaseFinancingCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash inflow from increase in lease financing."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IncreaseinLeaseFinancingCashFlowStatement class"""
        ...


class RepaymentinLeaseFinancingCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The cash outflow to repay lease financing during the PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RepaymentinLeaseFinancingCashFlowStatement class"""
        ...


class ShareofAssociatesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A non-cash adjustment for share of associates' income in respect of operating activities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ShareofAssociatesCashFlowStatement class"""
        ...


class ProfitonDisposalsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting
    PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProfitonDisposalsCashFlowStatement class"""
        ...


class ReorganizationOtherCostsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A non-cash adjustment relating to restructuring costs."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReorganizationOtherCostsCashFlowStatement class"""
        ...


class NetOutwardLoansCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Adjustments due to net loans to/from outsiders in the Investing Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetOutwardLoansCashFlowStatement class"""
        ...


class IssueExpensesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cost associated with issuance of debt/equity capital in the Financing Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the IssueExpensesCashFlowStatement class"""
        ...


class ChangeinDepositsbyBanksandCustomersCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the deposits by banks and customers."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinDepositsbyBanksandCustomersCashFlowStatement class"""
        ...


class CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity
    under the direct method.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement class"""
        ...


class ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Sum of total cash receipts in the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement class"""
        ...


class OtherCashReceiptsfromOperatingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other cash receipts for the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCashReceiptsfromOperatingActivitiesCashFlowStatement class"""
        ...


class ClassesofCashPaymentsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Sum of total cash payment in the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ClassesofCashPaymentsCashFlowStatement class"""
        ...


class PaymentstoSuppliersforGoodsandServicesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash paid to suppliers when purchasing goods or services by the company, in the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PaymentstoSuppliersforGoodsandServicesCashFlowStatement class"""
        ...


class PaymentsonBehalfofEmployeesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash paid in a form of salaries or other benefits to employees of the company, in the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PaymentsonBehalfofEmployeesCashFlowStatement class"""
        ...


class OtherCashPaymentsfromOperatingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other cash payments for the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCashPaymentsfromOperatingActivitiesCashFlowStatement class"""
        ...


class DividendsPaidDirectCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Dividend paid to the investors, for the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DividendsPaidDirectCashFlowStatement class"""
        ...


class DividendsReceivedDirectCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Dividend received on the investment, for the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DividendsReceivedDirectCashFlowStatement class"""
        ...


class InterestPaidDirectCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Interest paid on loans, debt or borrowings, in the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestPaidDirectCashFlowStatement class"""
        ...


class InterestReceivedDirectCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Interest received by the company, in the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestReceivedDirectCashFlowStatement class"""
        ...


class TaxesRefundPaidDirectCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Tax paid/refund related to operating activities, for the direct cash flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxesRefundPaidDirectCashFlowStatement class"""
        ...


class TotalAdjustmentsforNonCashItemsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Sum of all adjustments back from net income but without real cash outflow or inflow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalAdjustmentsforNonCashItemsCashFlowStatement class"""
        ...


class ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The difference between the future net cash flows expected to be received from the asset and its book value, recognized in the
    Income Statement.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement class"""
        ...


class DividendPaidCFOCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Dividend paid to the investors, in the Operating Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DividendPaidCFOCashFlowStatement class"""
        ...


class DividendReceivedCFOCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Dividend received on investment, in the Operating Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DividendReceivedCFOCashFlowStatement class"""
        ...


class TaxesRefundPaidCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total tax paid or received on operating activities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxesRefundPaidCashFlowStatement class"""
        ...


class OtherOperatingInflowsOutflowsofCashCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Any other cash inflows or outflows in the Operating Cash Flow section, not accounted for in the other specified items."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherOperatingInflowsOutflowsofCashCashFlowStatement class"""
        ...


class CashAdvancesandLoansMadetoOtherPartiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash outlay for cash advances and loans made to other parties."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashAdvancesandLoansMadetoOtherPartiesCashFlowStatement class"""
        ...


class CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash received from the repayment of advances and loans made to other parties, in the Investing Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement class"""
        ...


class DividendsReceivedCFICashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Dividend received on investment, in the Investing Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DividendsReceivedCFICashFlowStatement class"""
        ...


class InterestReceivedCFICashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Interest received by the company, in the Investing Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestReceivedCFICashFlowStatement class"""
        ...


class InterestPaidCFFCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Interest paid on loans, debt or borrowings, in the Financing Cash Flow section."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestPaidCFFCashFlowStatement class"""
        ...


class ChangeinAccruedIncomeCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The increase or decrease between periods in the amount of outstanding money owed by a customer for goods or services provided
    by the company.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinAccruedIncomeCashFlowStatement class"""
        ...


class ChangeinFinancialAssetsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the financial assets."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinFinancialAssetsCashFlowStatement class"""
        ...


class ChangeinAdvancesfromCentralBanksCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the advances from central banks."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinAdvancesfromCentralBanksCashFlowStatement class"""
        ...


class ChangeinFinancialLiabilitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the financial liabilities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinFinancialLiabilitiesCashFlowStatement class"""
        ...


class ChangeinInsuranceContractAssetsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the contract assets."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinInsuranceContractAssetsCashFlowStatement class"""
        ...


class ChangeinReinsuranceReceivablesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the reinsurance receivable."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinReinsuranceReceivablesCashFlowStatement class"""
        ...


class ChangeinDeferredAcquisitionCostsNetCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the deferred acquisition costs."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinDeferredAcquisitionCostsNetCashFlowStatement class"""
        ...


class ChangeinInsuranceFundsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the insurance funds."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinInsuranceFundsCashFlowStatement class"""
        ...


class ChangeinInvestmentContractLiabilitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the investment contract liabilities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinInvestmentContractLiabilitiesCashFlowStatement class"""
        ...


class ChangeinInsuranceContractLiabilitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The increase or decrease between periods of the insurance contract liabilities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinInsuranceContractLiabilitiesCashFlowStatement class"""
        ...


class ProvisionandWriteOffofAssetsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """A non-cash adjustment for total provision and write off on assets & liabilities."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProvisionandWriteOffofAssetsCashFlowStatement class"""
        ...


class ReceiptsfromCustomersCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Payment received from customers in the Direct Cash Flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReceiptsfromCustomersCashFlowStatement class"""
        ...


class ReceiptsfromGovernmentGrantsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash received from governments in the form of grants in the Direct Cash Flow."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReceiptsfromGovernmentGrantsCashFlowStatement class"""
        ...


class MinorityInterestCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Amount of net income (loss) for the period allocated to non-controlling shareholders, partners, or other equity holders in one or
    more of the entities included.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the MinorityInterestCashFlowStatement class"""
        ...


class CapExReportedCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Capital expenditure, capitalized software development cost, maintenance capital expenditure, etc. as reported by the company."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CapExReportedCashFlowStatement class"""
        ...


class CashReceiptsfromTaxRefundsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash received as refunds from tax authorities in operating cash flow, using the direct method"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashReceiptsfromTaxRefundsCashFlowStatement class"""
        ...


class CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash received from banks and customer deposits in operating cash flow, using the direct method. This item is usually only available
    for bank industry
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement class"""
        ...


class CashReceiptsfromLoansCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash received from loans in operating cash flow, using the direct method. This item is usually only available for bank industry"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashReceiptsfromLoansCashFlowStatement class"""
        ...


class CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash received from the trading of securities in operating cash flow, using the direct method. This item is usually only available for
    bank and insurance industries
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement class"""
        ...


class CashReceiptsfromFeesandCommissionsCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash received from agency fees and commissions in operating cash flow, using the direct method. This item is usually available for
    bank and insurance industries
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashReceiptsfromFeesandCommissionsCashFlowStatement class"""
        ...


class CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash paid for deposits by banks and customers in operating cash flow, using the direct method. This item is usually only available
    for bank industry
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement class"""
        ...


class CashPaymentsforLoansCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash paid for loans in operating cash flow, using the direct method. This item is usually only available for bank industry"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashPaymentsforLoansCashFlowStatement class"""
        ...


class InterestandCommissionPaidCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash paid for interest and commission in operating cash flow, using the direct method"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestandCommissionPaidCashFlowStatement class"""
        ...


class AllTaxesPaidCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash paid to tax authorities in operating cash flow, using the direct method"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AllTaxesPaidCashFlowStatement class"""
        ...


class CashReceivedfromInsuranceActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash received from insurance activities in operating cash flow, using the direct method. This item is usually only available for
    insurance industry
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashReceivedfromInsuranceActivitiesCashFlowStatement class"""
        ...


class PremiumReceivedCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash received from premium income in operating cash flow, using the direct method. This item is usually only available for
    insurance industry
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PremiumReceivedCashFlowStatement class"""
        ...


class ReinsuranceandOtherRecoveriesReceivedCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash received from reinsurance income or other recoveries income in operating cash flow, using the direct method. This item is
    usually only available for insurance industry
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReinsuranceandOtherRecoveriesReceivedCashFlowStatement class"""
        ...


class PolicyholderDepositInvestmentReceivedCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash received from policyholder deposit investment activities in operating cash flow, using the direct method. This item is usually
    only available for insurance industry
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PolicyholderDepositInvestmentReceivedCashFlowStatement class"""
        ...


class CashPaidforInsuranceActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash paid out for insurance activities during the period in operating cash flow, using the direct method. This item is usually only
    available for insurance industry
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashPaidforInsuranceActivitiesCashFlowStatement class"""
        ...


class ClaimsPaidCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash paid out for claims by a insurance company during the period in operating cash flow, using the direct method. This item is
    usually only available for insurance industry
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ClaimsPaidCashFlowStatement class"""
        ...


class CommissionPaidCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash paid for commissions in operating cash flow, using the direct method"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommissionPaidCashFlowStatement class"""
        ...


class CashPaidtoReinsurersCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash paid out to reinsurers in operating cash flow, using the direct method. This item is usually only available for insurance industry"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashPaidtoReinsurersCashFlowStatement class"""
        ...


class OtherUnderwritingExpensesPaidCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Cash paid out for underwriting expenses, such as the acquisition of new and renewal insurance contracts, in operating cash flow,
    using the direct method. This item is usually only available for insurance industry
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherUnderwritingExpensesPaidCashFlowStatement class"""
        ...


class CashDividendsForMinoritiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash Distribution of earnings to Minority Stockholders."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashDividendsForMinoritiesCashFlowStatement class"""
        ...


class CashGeneratedfromOperatingActivitiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The net cash from an entity's operating activities before real cash inflow or outflow for Dividend, Interest, Tax, or other unclassified
    operating activities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashGeneratedfromOperatingActivitiesCashFlowStatement class"""
        ...


class FundFromOperationCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Funds from operations; populated only for real estate investment trusts (REITs), defined as the sum of net income, gain/loss
    (realized and unrealized) on investment securities, asset impairment charge, depreciation and amortization and gain/ loss on the
    sale of business and property plant and equipment.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FundFromOperationCashFlowStatement class"""
        ...


class NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net increase or decrease in cash due to purchases or sales of investment properties during the accounting PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement class"""
        ...


class PurchaseOfInvestmentPropertiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash outflow for purchases of investment properties during the accounting PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PurchaseOfInvestmentPropertiesCashFlowStatement class"""
        ...


class SaleOfInvestmentPropertiesCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cash inflow from sale of investment properties during the accounting PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SaleOfInvestmentPropertiesCashFlowStatement class"""
        ...


class OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other cash adjustments included in change in cash not categorized above."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement class"""
        ...


class OtherCashAdjustExcludeFromChangeinCashCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Other changes to cash and cash equivalents during the accounting PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OtherCashAdjustExcludeFromChangeinCashCashFlowStatement class"""
        ...


class ChangeinCashSupplementalAsReportedCashFlowStatement(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The change in cash flow from the previous period to the current, as reported by the company, may be the same or not the same as
    Morningstar's standardized definition. It is a supplemental value which would be reported outside consolidated statements.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ChangeinCashSupplementalAsReportedCashFlowStatement class"""
        ...


class CashFlowStatement(System.Object):
    """Definition of the CashFlowStatement class"""

    @property
    def Amortization(self) -> QuantConnect.Data.Fundamental.AmortizationCashFlowStatement:
        """
        The systematic and rational apportionment of the acquisition cost of intangible operational assets to future periods in which the benefits
        contribute to revenue. This field is to include Amortization and any variation where Amortization is the first account listed in the line item,
        excluding Amortization of Intangibles.
        """
        ...

    @Amortization.setter
    def Amortization(self, value: QuantConnect.Data.Fundamental.AmortizationCashFlowStatement):
        """
        The systematic and rational apportionment of the acquisition cost of intangible operational assets to future periods in which the benefits
        contribute to revenue. This field is to include Amortization and any variation where Amortization is the first account listed in the line item,
        excluding Amortization of Intangibles.
        """
        ...

    @property
    def CapitalExpenditure(self) -> QuantConnect.Data.Fundamental.CapitalExpenditureCashFlowStatement:
        """
        Funds used by a company to acquire or upgrade physical assets such as property, industrial buildings or equipment. This
        type of outlay is made by companies to maintain or increase the scope of their operations. Capital expenditures are generally
        depreciated or depleted over their useful life, as distinguished from repairs, which are subtracted from the income of the current
        year.
        """
        ...

    @CapitalExpenditure.setter
    def CapitalExpenditure(self, value: QuantConnect.Data.Fundamental.CapitalExpenditureCashFlowStatement):
        """
        Funds used by a company to acquire or upgrade physical assets such as property, industrial buildings or equipment. This
        type of outlay is made by companies to maintain or increase the scope of their operations. Capital expenditures are generally
        depreciated or depleted over their useful life, as distinguished from repairs, which are subtracted from the income of the current
        year.
        """
        ...

    @property
    def CashDividendsPaid(self) -> QuantConnect.Data.Fundamental.CashDividendsPaidCashFlowStatement:
        """
        Payments for the cash dividends declared by an entity to shareholders during the period. This element includes paid and unpaid
        dividends declared during the period for both common and preferred stock.
        """
        ...

    @CashDividendsPaid.setter
    def CashDividendsPaid(self, value: QuantConnect.Data.Fundamental.CashDividendsPaidCashFlowStatement):
        """
        Payments for the cash dividends declared by an entity to shareholders during the period. This element includes paid and unpaid
        dividends declared during the period for both common and preferred stock.
        """
        ...

    @property
    def CashFlowFromContinuingFinancingActivities(self) -> QuantConnect.Data.Fundamental.CashFlowFromContinuingFinancingActivitiesCashFlowStatement:
        """Cash generated by or used in financing activities of continuing operations; excludes cash flows from discontinued operations."""
        ...

    @CashFlowFromContinuingFinancingActivities.setter
    def CashFlowFromContinuingFinancingActivities(self, value: QuantConnect.Data.Fundamental.CashFlowFromContinuingFinancingActivitiesCashFlowStatement):
        """Cash generated by or used in financing activities of continuing operations; excludes cash flows from discontinued operations."""
        ...

    @property
    def CashFlowFromContinuingInvestingActivities(self) -> QuantConnect.Data.Fundamental.CashFlowFromContinuingInvestingActivitiesCashFlowStatement:
        """Cash generated by or used in investing activities of continuing operations; excludes cash flows from discontinued operations."""
        ...

    @CashFlowFromContinuingInvestingActivities.setter
    def CashFlowFromContinuingInvestingActivities(self, value: QuantConnect.Data.Fundamental.CashFlowFromContinuingInvestingActivitiesCashFlowStatement):
        """Cash generated by or used in investing activities of continuing operations; excludes cash flows from discontinued operations."""
        ...

    @property
    def CashFlowFromContinuingOperatingActivities(self) -> QuantConnect.Data.Fundamental.CashFlowFromContinuingOperatingActivitiesCashFlowStatement:
        """Cash generated by or used in operating activities of continuing operations; excludes cash flows from discontinued operations."""
        ...

    @CashFlowFromContinuingOperatingActivities.setter
    def CashFlowFromContinuingOperatingActivities(self, value: QuantConnect.Data.Fundamental.CashFlowFromContinuingOperatingActivitiesCashFlowStatement):
        """Cash generated by or used in operating activities of continuing operations; excludes cash flows from discontinued operations."""
        ...

    @property
    def CashFlowFromDiscontinuedOperation(self) -> QuantConnect.Data.Fundamental.CashFlowFromDiscontinuedOperationCashFlowStatement:
        """
        The aggregate amount of cash flow from discontinued operation, including operating activities, investing activities, and financing
        activities.
        """
        ...

    @CashFlowFromDiscontinuedOperation.setter
    def CashFlowFromDiscontinuedOperation(self, value: QuantConnect.Data.Fundamental.CashFlowFromDiscontinuedOperationCashFlowStatement):
        """
        The aggregate amount of cash flow from discontinued operation, including operating activities, investing activities, and financing
        activities.
        """
        ...

    @property
    def FinancingCashFlow(self) -> QuantConnect.Data.Fundamental.FinancingCashFlowCashFlowStatement:
        """
        The net cash inflow (outflow) from financing activity for the period, which involve changes to the long-term liabilities and
        stockholders' equity.
        """
        ...

    @FinancingCashFlow.setter
    def FinancingCashFlow(self, value: QuantConnect.Data.Fundamental.FinancingCashFlowCashFlowStatement):
        """
        The net cash inflow (outflow) from financing activity for the period, which involve changes to the long-term liabilities and
        stockholders' equity.
        """
        ...

    @property
    def InvestingCashFlow(self) -> QuantConnect.Data.Fundamental.InvestingCashFlowCashFlowStatement:
        """
        An item on the cash flow statement that reports the aggregate change in a company's cash position resulting from any gains (or
        losses) from investments in the financial markets and operating subsidiaries, and changes resulting from amounts spent on
        investments in capital assets such as plant and equipment.
        """
        ...

    @InvestingCashFlow.setter
    def InvestingCashFlow(self, value: QuantConnect.Data.Fundamental.InvestingCashFlowCashFlowStatement):
        """
        An item on the cash flow statement that reports the aggregate change in a company's cash position resulting from any gains (or
        losses) from investments in the financial markets and operating subsidiaries, and changes resulting from amounts spent on
        investments in capital assets such as plant and equipment.
        """
        ...

    @property
    def OperatingCashFlow(self) -> QuantConnect.Data.Fundamental.OperatingCashFlowCashFlowStatement:
        """
        The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity.
        Operating activities include all transactions and events that are not defined as investing or financing activities. Operating activities
        generally involve producing and delivering goods and providing services. Cash flows from operating activities are generally the cash
        effects of transactions and other events that enter into the determination of net income.
        """
        ...

    @OperatingCashFlow.setter
    def OperatingCashFlow(self, value: QuantConnect.Data.Fundamental.OperatingCashFlowCashFlowStatement):
        """
        The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity.
        Operating activities include all transactions and events that are not defined as investing or financing activities. Operating activities
        generally involve producing and delivering goods and providing services. Cash flows from operating activities are generally the cash
        effects of transactions and other events that enter into the determination of net income.
        """
        ...

    @property
    def BeginningCashPosition(self) -> QuantConnect.Data.Fundamental.BeginningCashPositionCashFlowStatement:
        """The cash and equivalents balance at the beginning of the accounting period, as indicated on the Cash Flow statement."""
        ...

    @BeginningCashPosition.setter
    def BeginningCashPosition(self, value: QuantConnect.Data.Fundamental.BeginningCashPositionCashFlowStatement):
        """The cash and equivalents balance at the beginning of the accounting period, as indicated on the Cash Flow statement."""
        ...

    @property
    def EndCashPosition(self) -> QuantConnect.Data.Fundamental.EndCashPositionCashFlowStatement:
        """
        The cash and cash equivalents balance at the end of the accounting period, as indicated on the Cash Flow statement. It is equal to
        the Beginning Cash and Equivalents, plus the Net Change in Cash and Equivalents.
        """
        ...

    @EndCashPosition.setter
    def EndCashPosition(self, value: QuantConnect.Data.Fundamental.EndCashPositionCashFlowStatement):
        """
        The cash and cash equivalents balance at the end of the accounting period, as indicated on the Cash Flow statement. It is equal to
        the Beginning Cash and Equivalents, plus the Net Change in Cash and Equivalents.
        """
        ...

    @property
    def CashFromDiscontinuedFinancing(self) -> QuantConnect.Data.Fundamental.CashFromDiscontinuedFinancingCashFlowStatement:
        """Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations."""
        ...

    @CashFromDiscontinuedFinancing.setter
    def CashFromDiscontinuedFinancing(self, value: QuantConnect.Data.Fundamental.CashFromDiscontinuedFinancingCashFlowStatement):
        """Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations."""
        ...

    @property
    def CashFromDiscontinuedFinancingActivities(self) -> QuantConnect.Data.Fundamental.CashFromDiscontinuedFinancingActivitiesCashFlowStatement:
        """Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations."""
        ...

    @CashFromDiscontinuedFinancingActivities.setter
    def CashFromDiscontinuedFinancingActivities(self, value: QuantConnect.Data.Fundamental.CashFromDiscontinuedFinancingActivitiesCashFlowStatement):
        """Cash generated by or used in financing activities of discontinued operations; excludes cash flows from continued operations."""
        ...

    @property
    def CashFromDiscontinuedInvesting(self) -> QuantConnect.Data.Fundamental.CashFromDiscontinuedInvestingCashFlowStatement:
        """The net cash inflow (outflow) from discontinued investing activities over the designated time period."""
        ...

    @CashFromDiscontinuedInvesting.setter
    def CashFromDiscontinuedInvesting(self, value: QuantConnect.Data.Fundamental.CashFromDiscontinuedInvestingCashFlowStatement):
        """The net cash inflow (outflow) from discontinued investing activities over the designated time period."""
        ...

    @property
    def CashFromDiscontinuedInvestingActivities(self) -> QuantConnect.Data.Fundamental.CashFromDiscontinuedInvestingActivitiesCashFlowStatement:
        """The net cash inflow (outflow) from discontinued investing activities over the designated time period."""
        ...

    @CashFromDiscontinuedInvestingActivities.setter
    def CashFromDiscontinuedInvestingActivities(self, value: QuantConnect.Data.Fundamental.CashFromDiscontinuedInvestingActivitiesCashFlowStatement):
        """The net cash inflow (outflow) from discontinued investing activities over the designated time period."""
        ...

    @property
    def CashFromDiscontinuedOperating(self) -> QuantConnect.Data.Fundamental.CashFromDiscontinuedOperatingCashFlowStatement:
        """
        The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the
        reporting entity.
        """
        ...

    @CashFromDiscontinuedOperating.setter
    def CashFromDiscontinuedOperating(self, value: QuantConnect.Data.Fundamental.CashFromDiscontinuedOperatingCashFlowStatement):
        """
        The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the
        reporting entity.
        """
        ...

    @property
    def ChangeInAccountPayable(self) -> QuantConnect.Data.Fundamental.ChangeInAccountPayableCashFlowStatement:
        """The increase or decrease between periods of the account payables."""
        ...

    @ChangeInAccountPayable.setter
    def ChangeInAccountPayable(self, value: QuantConnect.Data.Fundamental.ChangeInAccountPayableCashFlowStatement):
        """The increase or decrease between periods of the account payables."""
        ...

    @property
    def ChangeInTaxPayable(self) -> QuantConnect.Data.Fundamental.ChangeInTaxPayableCashFlowStatement:
        """The increase or decrease between periods of the tax payables."""
        ...

    @ChangeInTaxPayable.setter
    def ChangeInTaxPayable(self, value: QuantConnect.Data.Fundamental.ChangeInTaxPayableCashFlowStatement):
        """The increase or decrease between periods of the tax payables."""
        ...

    @property
    def ChangeInAccruedExpense(self) -> QuantConnect.Data.Fundamental.ChangeInAccruedExpenseCashFlowStatement:
        """The increase or decrease between periods of the accrued expenses."""
        ...

    @ChangeInAccruedExpense.setter
    def ChangeInAccruedExpense(self, value: QuantConnect.Data.Fundamental.ChangeInAccruedExpenseCashFlowStatement):
        """The increase or decrease between periods of the accrued expenses."""
        ...

    @property
    def ChangeInAccruedInvestmentIncome(self) -> QuantConnect.Data.Fundamental.ChangeInAccruedInvestmentIncomeCashFlowStatement:
        """The net change during the reporting period in investment income that has been earned but not yet received in cash."""
        ...

    @ChangeInAccruedInvestmentIncome.setter
    def ChangeInAccruedInvestmentIncome(self, value: QuantConnect.Data.Fundamental.ChangeInAccruedInvestmentIncomeCashFlowStatement):
        """The net change during the reporting period in investment income that has been earned but not yet received in cash."""
        ...

    @property
    def ChangesInCash(self) -> QuantConnect.Data.Fundamental.ChangesInCashCashFlowStatement:
        """The net change between the beginning and ending balance of cash and cash equivalents."""
        ...

    @ChangesInCash.setter
    def ChangesInCash(self, value: QuantConnect.Data.Fundamental.ChangesInCashCashFlowStatement):
        """The net change between the beginning and ending balance of cash and cash equivalents."""
        ...

    @property
    def ChangeInDeferredAcquisitionCosts(self) -> QuantConnect.Data.Fundamental.ChangeInDeferredAcquisitionCostsCashFlowStatement:
        """
        The change of the unamortized portion as of the balance sheet date of capitalized costs that vary with and are primarily related to
        the acquisition of new and renewal insurance contracts.
        """
        ...

    @ChangeInDeferredAcquisitionCosts.setter
    def ChangeInDeferredAcquisitionCosts(self, value: QuantConnect.Data.Fundamental.ChangeInDeferredAcquisitionCostsCashFlowStatement):
        """
        The change of the unamortized portion as of the balance sheet date of capitalized costs that vary with and are primarily related to
        the acquisition of new and renewal insurance contracts.
        """
        ...

    @property
    def ChangeInFederalFundsAndSecuritiesSoldForRepurchase(self) -> QuantConnect.Data.Fundamental.ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement:
        """
        The amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from another bank to
        meet its reserve requirements and the amount of securities that an institution sells and agrees to repurchase at a specified date for
        a specified price, net of any reductions or offsets.
        """
        ...

    @ChangeInFederalFundsAndSecuritiesSoldForRepurchase.setter
    def ChangeInFederalFundsAndSecuritiesSoldForRepurchase(self, value: QuantConnect.Data.Fundamental.ChangeInFederalFundsAndSecuritiesSoldForRepurchaseCashFlowStatement):
        """
        The amount shown on the books that a bank with insufficient reserves borrows, at the federal funds rate, from another bank to
        meet its reserve requirements and the amount of securities that an institution sells and agrees to repurchase at a specified date for
        a specified price, net of any reductions or offsets.
        """
        ...

    @property
    def ChangeInFundsWithheld(self) -> QuantConnect.Data.Fundamental.ChangeInFundsWithheldCashFlowStatement:
        """The net change during the reporting period associated with funds withheld."""
        ...

    @ChangeInFundsWithheld.setter
    def ChangeInFundsWithheld(self, value: QuantConnect.Data.Fundamental.ChangeInFundsWithheldCashFlowStatement):
        """The net change during the reporting period associated with funds withheld."""
        ...

    @property
    def ChangeInIncomeTaxPayable(self) -> QuantConnect.Data.Fundamental.ChangeInIncomeTaxPayableCashFlowStatement:
        """The increase or decrease between periods of the income tax payables."""
        ...

    @ChangeInIncomeTaxPayable.setter
    def ChangeInIncomeTaxPayable(self, value: QuantConnect.Data.Fundamental.ChangeInIncomeTaxPayableCashFlowStatement):
        """The increase or decrease between periods of the income tax payables."""
        ...

    @property
    def ChangeInInterestPayable(self) -> QuantConnect.Data.Fundamental.ChangeInInterestPayableCashFlowStatement:
        """
        The increase or decrease between periods of the interest payable. Interest payable means carrying value as of the balance sheet
        date of interest payable on all forms of debt.
        """
        ...

    @ChangeInInterestPayable.setter
    def ChangeInInterestPayable(self, value: QuantConnect.Data.Fundamental.ChangeInInterestPayableCashFlowStatement):
        """
        The increase or decrease between periods of the interest payable. Interest payable means carrying value as of the balance sheet
        date of interest payable on all forms of debt.
        """
        ...

    @property
    def ChangeInInventory(self) -> QuantConnect.Data.Fundamental.ChangeInInventoryCashFlowStatement:
        """
        The increase or decrease between periods of the Inventories. Inventories represent merchandise bought for resale and supplies and
        raw materials purchased for use in revenue producing operations.
        """
        ...

    @ChangeInInventory.setter
    def ChangeInInventory(self, value: QuantConnect.Data.Fundamental.ChangeInInventoryCashFlowStatement):
        """
        The increase or decrease between periods of the Inventories. Inventories represent merchandise bought for resale and supplies and
        raw materials purchased for use in revenue producing operations.
        """
        ...

    @property
    def ChangeInLoans(self) -> QuantConnect.Data.Fundamental.ChangeInLoansCashFlowStatement:
        """
        The net change that a lender gives money or property to a borrower and the borrower agrees to return the property or repay the
        borrowed money, along with interest, at a predetermined date in the future.
        """
        ...

    @ChangeInLoans.setter
    def ChangeInLoans(self, value: QuantConnect.Data.Fundamental.ChangeInLoansCashFlowStatement):
        """
        The net change that a lender gives money or property to a borrower and the borrower agrees to return the property or repay the
        borrowed money, along with interest, at a predetermined date in the future.
        """
        ...

    @property
    def ChangeInLossAndLossAdjustmentExpenseReserves(self) -> QuantConnect.Data.Fundamental.ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement:
        """The net change during the reporting period in the reserve account established to account for expected but unspecified losses."""
        ...

    @ChangeInLossAndLossAdjustmentExpenseReserves.setter
    def ChangeInLossAndLossAdjustmentExpenseReserves(self, value: QuantConnect.Data.Fundamental.ChangeInLossAndLossAdjustmentExpenseReservesCashFlowStatement):
        """The net change during the reporting period in the reserve account established to account for expected but unspecified losses."""
        ...

    @property
    def ChangeInPayable(self) -> QuantConnect.Data.Fundamental.ChangeInPayableCashFlowStatement:
        """The increase or decrease between periods of the payables."""
        ...

    @ChangeInPayable.setter
    def ChangeInPayable(self, value: QuantConnect.Data.Fundamental.ChangeInPayableCashFlowStatement):
        """The increase or decrease between periods of the payables."""
        ...

    @property
    def ChangeInPayablesAndAccruedExpense(self) -> QuantConnect.Data.Fundamental.ChangeInPayablesAndAccruedExpenseCashFlowStatement:
        """
        The increase or decrease between periods of the payables and accrued expenses. Accrued expenses represent expenses incurred
        at the end of the reporting period but not yet paid; also called accrued liabilities. The accrued liability is shown under current
        liabilities in the balance sheet.
        """
        ...

    @ChangeInPayablesAndAccruedExpense.setter
    def ChangeInPayablesAndAccruedExpense(self, value: QuantConnect.Data.Fundamental.ChangeInPayablesAndAccruedExpenseCashFlowStatement):
        """
        The increase or decrease between periods of the payables and accrued expenses. Accrued expenses represent expenses incurred
        at the end of the reporting period but not yet paid; also called accrued liabilities. The accrued liability is shown under current
        liabilities in the balance sheet.
        """
        ...

    @property
    def ChangeInPrepaidAssets(self) -> QuantConnect.Data.Fundamental.ChangeInPrepaidAssetsCashFlowStatement:
        """The increase or decrease between periods of the prepaid assets."""
        ...

    @ChangeInPrepaidAssets.setter
    def ChangeInPrepaidAssets(self, value: QuantConnect.Data.Fundamental.ChangeInPrepaidAssetsCashFlowStatement):
        """The increase or decrease between periods of the prepaid assets."""
        ...

    @property
    def ChangeInReceivables(self) -> QuantConnect.Data.Fundamental.ChangeInReceivablesCashFlowStatement:
        """
        The increase or decrease between periods of the receivables. Receivables are amounts due to be paid to the company from clients
        and other.
        """
        ...

    @ChangeInReceivables.setter
    def ChangeInReceivables(self, value: QuantConnect.Data.Fundamental.ChangeInReceivablesCashFlowStatement):
        """
        The increase or decrease between periods of the receivables. Receivables are amounts due to be paid to the company from clients
        and other.
        """
        ...

    @property
    def ChangeInReinsuranceRecoverableOnPaidAndUnpaidLosses(self) -> QuantConnect.Data.Fundamental.ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement:
        """
        The net change during the reporting period in the amount of benefits the ceding insurer expects to recover on insurance policies
        ceded to other insurance entities as of the balance sheet date for all guaranteed benefit types.
        """
        ...

    @ChangeInReinsuranceRecoverableOnPaidAndUnpaidLosses.setter
    def ChangeInReinsuranceRecoverableOnPaidAndUnpaidLosses(self, value: QuantConnect.Data.Fundamental.ChangeInReinsuranceRecoverableOnPaidAndUnpaidLossesCashFlowStatement):
        """
        The net change during the reporting period in the amount of benefits the ceding insurer expects to recover on insurance policies
        ceded to other insurance entities as of the balance sheet date for all guaranteed benefit types.
        """
        ...

    @property
    def ChangeInRestrictedCash(self) -> QuantConnect.Data.Fundamental.ChangeInRestrictedCashCashFlowStatement:
        """
        The net cash inflow (outflow) for the net change associated with funds that are not available for withdrawal or use (such as funds
        held in escrow).
        """
        ...

    @ChangeInRestrictedCash.setter
    def ChangeInRestrictedCash(self, value: QuantConnect.Data.Fundamental.ChangeInRestrictedCashCashFlowStatement):
        """
        The net cash inflow (outflow) for the net change associated with funds that are not available for withdrawal or use (such as funds
        held in escrow).
        """
        ...

    @property
    def ChangeInTradingAccountSecurities(self) -> QuantConnect.Data.Fundamental.ChangeInTradingAccountSecuritiesCashFlowStatement:
        """
        The net change during the reporting period associated with trading account assets. Trading account assets are bought and held
        principally for the purpose of selling them in the near term (thus held for only a short period of time). Unrealized holding gains and
        losses for trading securities are included in earnings.
        """
        ...

    @ChangeInTradingAccountSecurities.setter
    def ChangeInTradingAccountSecurities(self, value: QuantConnect.Data.Fundamental.ChangeInTradingAccountSecuritiesCashFlowStatement):
        """
        The net change during the reporting period associated with trading account assets. Trading account assets are bought and held
        principally for the purpose of selling them in the near term (thus held for only a short period of time). Unrealized holding gains and
        losses for trading securities are included in earnings.
        """
        ...

    @property
    def ChangeInWorkingCapital(self) -> QuantConnect.Data.Fundamental.ChangeInWorkingCapitalCashFlowStatement:
        """
        The increase or decrease between periods of the working capital.  Working Capital is the amount left to the company to finance
        operations and expansion after current liabilities have been covered.
        """
        ...

    @ChangeInWorkingCapital.setter
    def ChangeInWorkingCapital(self, value: QuantConnect.Data.Fundamental.ChangeInWorkingCapitalCashFlowStatement):
        """
        The increase or decrease between periods of the working capital.  Working Capital is the amount left to the company to finance
        operations and expansion after current liabilities have been covered.
        """
        ...

    @property
    def DeferredIncomeTax(self) -> QuantConnect.Data.Fundamental.DeferredIncomeTaxCashFlowStatement:
        """
        The component of income tax expense for the period representing the net change in the entities deferred tax assets and liabilities
        pertaining to continuing operations.
        """
        ...

    @DeferredIncomeTax.setter
    def DeferredIncomeTax(self, value: QuantConnect.Data.Fundamental.DeferredIncomeTaxCashFlowStatement):
        """
        The component of income tax expense for the period representing the net change in the entities deferred tax assets and liabilities
        pertaining to continuing operations.
        """
        ...

    @property
    def DeferredTax(self) -> QuantConnect.Data.Fundamental.DeferredTaxCashFlowStatement:
        """
        Future tax liability or asset, resulting from temporary differences between book (accounting) value of assets and liabilities, and their
        tax value. This arises due to differences between financial accounting for shareholders and tax accounting.
        """
        ...

    @DeferredTax.setter
    def DeferredTax(self, value: QuantConnect.Data.Fundamental.DeferredTaxCashFlowStatement):
        """
        Future tax liability or asset, resulting from temporary differences between book (accounting) value of assets and liabilities, and their
        tax value. This arises due to differences between financial accounting for shareholders and tax accounting.
        """
        ...

    @property
    def Depletion(self) -> QuantConnect.Data.Fundamental.DepletionCashFlowStatement:
        """
        Unlike depreciation and amortization, which mainly describe the deduction of expenses due to the aging of equipment and property,
        depletion is the actual physical reduction of natural resources by companies.   For example, coalmines, oil fields and other natural
        resources are depleted on company accounting statements. This reduction in the quantity of resources is meant to assist in
        accurately identifying the value of the asset on the balance sheet.
        """
        ...

    @Depletion.setter
    def Depletion(self, value: QuantConnect.Data.Fundamental.DepletionCashFlowStatement):
        """
        Unlike depreciation and amortization, which mainly describe the deduction of expenses due to the aging of equipment and property,
        depletion is the actual physical reduction of natural resources by companies.   For example, coalmines, oil fields and other natural
        resources are depleted on company accounting statements. This reduction in the quantity of resources is meant to assist in
        accurately identifying the value of the asset on the balance sheet.
        """
        ...

    @property
    def Depreciation(self) -> QuantConnect.Data.Fundamental.DepreciationCashFlowStatement:
        """
        An expense recorded to allocate a tangible asset's cost over its useful life. Since it is a non-cash expense, it increases free cash
        flow while decreasing reported earnings.
        """
        ...

    @Depreciation.setter
    def Depreciation(self, value: QuantConnect.Data.Fundamental.DepreciationCashFlowStatement):
        """
        An expense recorded to allocate a tangible asset's cost over its useful life. Since it is a non-cash expense, it increases free cash
        flow while decreasing reported earnings.
        """
        ...

    @property
    def DepreciationAndAmortization(self) -> QuantConnect.Data.Fundamental.DepreciationAndAmortizationCashFlowStatement:
        """
        The current period expense charged against earnings on long-lived, physical assets used in the normal conduct of business and not
        intended for resale to allocate or recognize the cost of assets over their useful lives; or to record the reduction in book value of an
        intangible asset over the benefit period of such asset.
        """
        ...

    @DepreciationAndAmortization.setter
    def DepreciationAndAmortization(self, value: QuantConnect.Data.Fundamental.DepreciationAndAmortizationCashFlowStatement):
        """
        The current period expense charged against earnings on long-lived, physical assets used in the normal conduct of business and not
        intended for resale to allocate or recognize the cost of assets over their useful lives; or to record the reduction in book value of an
        intangible asset over the benefit period of such asset.
        """
        ...

    @property
    def DepreciationAmortizationDepletion(self) -> QuantConnect.Data.Fundamental.DepreciationAmortizationDepletionCashFlowStatement:
        """
        It is a non cash charge that represents a reduction in the value of fixed assets due to wear, age or obsolescence. This figure also
        includes amortization of leased property, intangibles, and goodwill, and depletion. This non-cash item is an add-back to the cash
        flow statement.
        """
        ...

    @DepreciationAmortizationDepletion.setter
    def DepreciationAmortizationDepletion(self, value: QuantConnect.Data.Fundamental.DepreciationAmortizationDepletionCashFlowStatement):
        """
        It is a non cash charge that represents a reduction in the value of fixed assets due to wear, age or obsolescence. This figure also
        includes amortization of leased property, intangibles, and goodwill, and depletion. This non-cash item is an add-back to the cash
        flow statement.
        """
        ...

    @property
    def EffectOfExchangeRateChanges(self) -> QuantConnect.Data.Fundamental.EffectOfExchangeRateChangesCashFlowStatement:
        """The effect of exchange rate changes on cash balances held in foreign currencies."""
        ...

    @EffectOfExchangeRateChanges.setter
    def EffectOfExchangeRateChanges(self, value: QuantConnect.Data.Fundamental.EffectOfExchangeRateChangesCashFlowStatement):
        """The effect of exchange rate changes on cash balances held in foreign currencies."""
        ...

    @property
    def IncreaseDecreaseInDeposit(self) -> QuantConnect.Data.Fundamental.IncreaseDecreaseInDepositCashFlowStatement:
        """The aggregate net change during the reporting period in moneys given as security, collateral, or margin deposits."""
        ...

    @IncreaseDecreaseInDeposit.setter
    def IncreaseDecreaseInDeposit(self, value: QuantConnect.Data.Fundamental.IncreaseDecreaseInDepositCashFlowStatement):
        """The aggregate net change during the reporting period in moneys given as security, collateral, or margin deposits."""
        ...

    @property
    def NetCommonStockIssuance(self) -> QuantConnect.Data.Fundamental.NetCommonStockIssuanceCashFlowStatement:
        """The increase or decrease between periods of common stock."""
        ...

    @NetCommonStockIssuance.setter
    def NetCommonStockIssuance(self, value: QuantConnect.Data.Fundamental.NetCommonStockIssuanceCashFlowStatement):
        """The increase or decrease between periods of common stock."""
        ...

    @property
    def NetIssuancePaymentsOfDebt(self) -> QuantConnect.Data.Fundamental.NetIssuancePaymentsOfDebtCashFlowStatement:
        """The increase or decrease between periods of debt."""
        ...

    @NetIssuancePaymentsOfDebt.setter
    def NetIssuancePaymentsOfDebt(self, value: QuantConnect.Data.Fundamental.NetIssuancePaymentsOfDebtCashFlowStatement):
        """The increase or decrease between periods of debt."""
        ...

    @property
    def NetLongTermDebtIssuance(self) -> QuantConnect.Data.Fundamental.NetLongTermDebtIssuanceCashFlowStatement:
        """
        The increase or decrease between periods of long term debt. Long term debt includes notes payable, bonds payable, mortgage
        loans, convertible debt, subordinated debt and other types of long term debt.
        """
        ...

    @NetLongTermDebtIssuance.setter
    def NetLongTermDebtIssuance(self, value: QuantConnect.Data.Fundamental.NetLongTermDebtIssuanceCashFlowStatement):
        """
        The increase or decrease between periods of long term debt. Long term debt includes notes payable, bonds payable, mortgage
        loans, convertible debt, subordinated debt and other types of long term debt.
        """
        ...

    @property
    def NetPreferredStockIssuance(self) -> QuantConnect.Data.Fundamental.NetPreferredStockIssuanceCashFlowStatement:
        """The increase or decrease between periods of preferred stock."""
        ...

    @NetPreferredStockIssuance.setter
    def NetPreferredStockIssuance(self, value: QuantConnect.Data.Fundamental.NetPreferredStockIssuanceCashFlowStatement):
        """The increase or decrease between periods of preferred stock."""
        ...

    @property
    def NetShortTermDebtIssuance(self) -> QuantConnect.Data.Fundamental.NetShortTermDebtIssuanceCashFlowStatement:
        """The increase or decrease between periods of short term debt."""
        ...

    @NetShortTermDebtIssuance.setter
    def NetShortTermDebtIssuance(self, value: QuantConnect.Data.Fundamental.NetShortTermDebtIssuanceCashFlowStatement):
        """The increase or decrease between periods of short term debt."""
        ...

    @property
    def NetCashFromDiscontinuedOperations(self) -> QuantConnect.Data.Fundamental.NetCashFromDiscontinuedOperationsCashFlowStatement:
        """
        The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the
        reporting entity.
        """
        ...

    @NetCashFromDiscontinuedOperations.setter
    def NetCashFromDiscontinuedOperations(self, value: QuantConnect.Data.Fundamental.NetCashFromDiscontinuedOperationsCashFlowStatement):
        """
        The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the
        reporting entity.
        """
        ...

    @property
    def NetForeignCurrencyExchangeGainLoss(self) -> QuantConnect.Data.Fundamental.NetForeignCurrencyExchangeGainLossCashFlowStatement:
        """
        The aggregate amount of realized and unrealized gain or loss resulting from changes in exchange rates between currencies.
        (Excludes foreign currency transactions designated as hedges of net investment in a foreign entity and inter-company foreign
        currency transactions that are of a long-term nature, when the entities to the transaction are consolidated, combined, or accounted
        for by the equity method in the reporting entity's financial statements. For certain entities, primarily banks, which are dealers in
        foreign exchange, foreign currency transaction gains or losses, may be disclosed as dealer gains or losses.)
        """
        ...

    @NetForeignCurrencyExchangeGainLoss.setter
    def NetForeignCurrencyExchangeGainLoss(self, value: QuantConnect.Data.Fundamental.NetForeignCurrencyExchangeGainLossCashFlowStatement):
        """
        The aggregate amount of realized and unrealized gain or loss resulting from changes in exchange rates between currencies.
        (Excludes foreign currency transactions designated as hedges of net investment in a foreign entity and inter-company foreign
        currency transactions that are of a long-term nature, when the entities to the transaction are consolidated, combined, or accounted
        for by the equity method in the reporting entity's financial statements. For certain entities, primarily banks, which are dealers in
        foreign exchange, foreign currency transaction gains or losses, may be disclosed as dealer gains or losses.)
        """
        ...

    @property
    def NetIncomeFromContinuingOperations(self) -> QuantConnect.Data.Fundamental.NetIncomeFromContinuingOperationsCashFlowStatement:
        """
        Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from discontinued operations,
        extraordinary items, impact of changes in accounting principles, minority interest, and various other reconciling adjustments;
        represents the starting line for Operating Cash Flow.
        """
        ...

    @NetIncomeFromContinuingOperations.setter
    def NetIncomeFromContinuingOperations(self, value: QuantConnect.Data.Fundamental.NetIncomeFromContinuingOperationsCashFlowStatement):
        """
        Revenue less expenses and taxes from the entity's ongoing operations and before income (loss) from discontinued operations,
        extraordinary items, impact of changes in accounting principles, minority interest, and various other reconciling adjustments;
        represents the starting line for Operating Cash Flow.
        """
        ...

    @property
    def PaymentForLoans(self) -> QuantConnect.Data.Fundamental.PaymentForLoansCashFlowStatement:
        """
        Payment from a bank or insurance company to the lender who lends money or property based on the agreement, along with
        interest, at a predetermined date in the future.
        """
        ...

    @PaymentForLoans.setter
    def PaymentForLoans(self, value: QuantConnect.Data.Fundamental.PaymentForLoansCashFlowStatement):
        """
        Payment from a bank or insurance company to the lender who lends money or property based on the agreement, along with
        interest, at a predetermined date in the future.
        """
        ...

    @property
    def CommonStockPayments(self) -> QuantConnect.Data.Fundamental.CommonStockPaymentsCashFlowStatement:
        """The cash outflow to reacquire common stock during the period."""
        ...

    @CommonStockPayments.setter
    def CommonStockPayments(self, value: QuantConnect.Data.Fundamental.CommonStockPaymentsCashFlowStatement):
        """The cash outflow to reacquire common stock during the period."""
        ...

    @property
    def PreferredStockPayments(self) -> QuantConnect.Data.Fundamental.PreferredStockPaymentsCashFlowStatement:
        """The cash outflow to reacquire preferred stock during the period."""
        ...

    @PreferredStockPayments.setter
    def PreferredStockPayments(self, value: QuantConnect.Data.Fundamental.PreferredStockPaymentsCashFlowStatement):
        """The cash outflow to reacquire preferred stock during the period."""
        ...

    @property
    def LongTermDebtPayments(self) -> QuantConnect.Data.Fundamental.LongTermDebtPaymentsCashFlowStatement:
        """The cash outflow for debt initially having maturity due after one year or beyond the normal operating cycle, if longer."""
        ...

    @LongTermDebtPayments.setter
    def LongTermDebtPayments(self, value: QuantConnect.Data.Fundamental.LongTermDebtPaymentsCashFlowStatement):
        """The cash outflow for debt initially having maturity due after one year or beyond the normal operating cycle, if longer."""
        ...

    @property
    def ShortTermDebtPayments(self) -> QuantConnect.Data.Fundamental.ShortTermDebtPaymentsCashFlowStatement:
        """The cash outflow for a borrowing having initial term of repayment within one year or the normal operating cycle, if longer."""
        ...

    @ShortTermDebtPayments.setter
    def ShortTermDebtPayments(self, value: QuantConnect.Data.Fundamental.ShortTermDebtPaymentsCashFlowStatement):
        """The cash outflow for a borrowing having initial term of repayment within one year or the normal operating cycle, if longer."""
        ...

    @property
    def ProceedsFromLoans(self) -> QuantConnect.Data.Fundamental.ProceedsFromLoansCashFlowStatement:
        """The cash inflow from borrowing money or property for a bank or insurance company."""
        ...

    @ProceedsFromLoans.setter
    def ProceedsFromLoans(self, value: QuantConnect.Data.Fundamental.ProceedsFromLoansCashFlowStatement):
        """The cash inflow from borrowing money or property for a bank or insurance company."""
        ...

    @property
    def ProceedsFromStockOptionExercised(self) -> QuantConnect.Data.Fundamental.ProceedsFromStockOptionExercisedCashFlowStatement:
        """The cash inflow associated with the amount received from holders exercising their stock options."""
        ...

    @ProceedsFromStockOptionExercised.setter
    def ProceedsFromStockOptionExercised(self, value: QuantConnect.Data.Fundamental.ProceedsFromStockOptionExercisedCashFlowStatement):
        """The cash inflow associated with the amount received from holders exercising their stock options."""
        ...

    @property
    def CommonStockIssuance(self) -> QuantConnect.Data.Fundamental.CommonStockIssuanceCashFlowStatement:
        """The cash inflow from offering common stock, which is the additional capital contribution to the entity during the period."""
        ...

    @CommonStockIssuance.setter
    def CommonStockIssuance(self, value: QuantConnect.Data.Fundamental.CommonStockIssuanceCashFlowStatement):
        """The cash inflow from offering common stock, which is the additional capital contribution to the entity during the period."""
        ...

    @property
    def LongTermDebtIssuance(self) -> QuantConnect.Data.Fundamental.LongTermDebtIssuanceCashFlowStatement:
        """The cash inflow from a debt initially having maturity due after one year or beyond the operating cycle, if longer."""
        ...

    @LongTermDebtIssuance.setter
    def LongTermDebtIssuance(self, value: QuantConnect.Data.Fundamental.LongTermDebtIssuanceCashFlowStatement):
        """The cash inflow from a debt initially having maturity due after one year or beyond the operating cycle, if longer."""
        ...

    @property
    def PreferredStockIssuance(self) -> QuantConnect.Data.Fundamental.PreferredStockIssuanceCashFlowStatement:
        """The cash inflow from offering preferred stock."""
        ...

    @PreferredStockIssuance.setter
    def PreferredStockIssuance(self, value: QuantConnect.Data.Fundamental.PreferredStockIssuanceCashFlowStatement):
        """The cash inflow from offering preferred stock."""
        ...

    @property
    def ShortTermDebtIssuance(self) -> QuantConnect.Data.Fundamental.ShortTermDebtIssuanceCashFlowStatement:
        """The cash inflow from a debt initially having maturity due within one year or the normal operating cycle, if longer."""
        ...

    @ShortTermDebtIssuance.setter
    def ShortTermDebtIssuance(self, value: QuantConnect.Data.Fundamental.ShortTermDebtIssuanceCashFlowStatement):
        """The cash inflow from a debt initially having maturity due within one year or the normal operating cycle, if longer."""
        ...

    @property
    def NetProceedsPaymentForLoan(self) -> QuantConnect.Data.Fundamental.NetProceedsPaymentForLoanCashFlowStatement:
        """The net value of proceeds or payments of loans."""
        ...

    @NetProceedsPaymentForLoan.setter
    def NetProceedsPaymentForLoan(self, value: QuantConnect.Data.Fundamental.NetProceedsPaymentForLoanCashFlowStatement):
        """The net value of proceeds or payments of loans."""
        ...

    @property
    def ProceedsPaymentInInterestBearingDepositsInBank(self) -> QuantConnect.Data.Fundamental.ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement:
        """
        The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,
        certificates of deposits.
        """
        ...

    @ProceedsPaymentInInterestBearingDepositsInBank.setter
    def ProceedsPaymentInInterestBearingDepositsInBank(self, value: QuantConnect.Data.Fundamental.ProceedsPaymentInInterestBearingDepositsInBankCashFlowStatement):
        """
        The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,
        certificates of deposits.
        """
        ...

    @property
    def PurchaseOfIntangibles(self) -> QuantConnect.Data.Fundamental.PurchaseOfIntangiblesCashFlowStatement:
        """The amount of capital outlays undertaken to increase, construct or improve intangible assets."""
        ...

    @PurchaseOfIntangibles.setter
    def PurchaseOfIntangibles(self, value: QuantConnect.Data.Fundamental.PurchaseOfIntangiblesCashFlowStatement):
        """The amount of capital outlays undertaken to increase, construct or improve intangible assets."""
        ...

    @property
    def PurchaseOfInvestment(self) -> QuantConnect.Data.Fundamental.PurchaseOfInvestmentCashFlowStatement:
        """All purchases of investments, including both long term and short term."""
        ...

    @PurchaseOfInvestment.setter
    def PurchaseOfInvestment(self, value: QuantConnect.Data.Fundamental.PurchaseOfInvestmentCashFlowStatement):
        """All purchases of investments, including both long term and short term."""
        ...

    @property
    def PurchaseOfPPE(self) -> QuantConnect.Data.Fundamental.PurchaseOfPPECashFlowStatement:
        """
        The amount of capital outlays undertaken to increase, construct or improve capital assets. This category includes property, plant
        equipment, furniture, fixed assets, buildings, and improvement.
        """
        ...

    @PurchaseOfPPE.setter
    def PurchaseOfPPE(self, value: QuantConnect.Data.Fundamental.PurchaseOfPPECashFlowStatement):
        """
        The amount of capital outlays undertaken to increase, construct or improve capital assets. This category includes property, plant
        equipment, furniture, fixed assets, buildings, and improvement.
        """
        ...

    @property
    def PurchaseOfBusiness(self) -> QuantConnect.Data.Fundamental.PurchaseOfBusinessCashFlowStatement:
        """
        All the purchases of business including business acquisitions, investment in subsidiary; investing in affiliated companies, and join
        venture.
        """
        ...

    @PurchaseOfBusiness.setter
    def PurchaseOfBusiness(self, value: QuantConnect.Data.Fundamental.PurchaseOfBusinessCashFlowStatement):
        """
        All the purchases of business including business acquisitions, investment in subsidiary; investing in affiliated companies, and join
        venture.
        """
        ...

    @property
    def NetBusinessPurchaseAndSale(self) -> QuantConnect.Data.Fundamental.NetBusinessPurchaseAndSaleCashFlowStatement:
        """The net change between Purchases/Sales of Business."""
        ...

    @NetBusinessPurchaseAndSale.setter
    def NetBusinessPurchaseAndSale(self, value: QuantConnect.Data.Fundamental.NetBusinessPurchaseAndSaleCashFlowStatement):
        """The net change between Purchases/Sales of Business."""
        ...

    @property
    def NetIntangiblesPurchaseAndSale(self) -> QuantConnect.Data.Fundamental.NetIntangiblesPurchaseAndSaleCashFlowStatement:
        """The net change between Purchases/Sales of Intangibles."""
        ...

    @NetIntangiblesPurchaseAndSale.setter
    def NetIntangiblesPurchaseAndSale(self, value: QuantConnect.Data.Fundamental.NetIntangiblesPurchaseAndSaleCashFlowStatement):
        """The net change between Purchases/Sales of Intangibles."""
        ...

    @property
    def NetInvestmentPurchaseAndSale(self) -> QuantConnect.Data.Fundamental.NetInvestmentPurchaseAndSaleCashFlowStatement:
        """The net change between Purchases/Sales of Investments."""
        ...

    @NetInvestmentPurchaseAndSale.setter
    def NetInvestmentPurchaseAndSale(self, value: QuantConnect.Data.Fundamental.NetInvestmentPurchaseAndSaleCashFlowStatement):
        """The net change between Purchases/Sales of Investments."""
        ...

    @property
    def NetPPEPurchaseAndSale(self) -> QuantConnect.Data.Fundamental.NetPPEPurchaseAndSaleCashFlowStatement:
        """The net change between Purchases/Sales of PPE."""
        ...

    @NetPPEPurchaseAndSale.setter
    def NetPPEPurchaseAndSale(self, value: QuantConnect.Data.Fundamental.NetPPEPurchaseAndSaleCashFlowStatement):
        """The net change between Purchases/Sales of PPE."""
        ...

    @property
    def SaleOfBusiness(self) -> QuantConnect.Data.Fundamental.SaleOfBusinessCashFlowStatement:
        """Proceeds received from selling a business including proceeds from a subsidiary, and proceeds from an affiliated company."""
        ...

    @SaleOfBusiness.setter
    def SaleOfBusiness(self, value: QuantConnect.Data.Fundamental.SaleOfBusinessCashFlowStatement):
        """Proceeds received from selling a business including proceeds from a subsidiary, and proceeds from an affiliated company."""
        ...

    @property
    def SaleOfIntangibles(self) -> QuantConnect.Data.Fundamental.SaleOfIntangiblesCashFlowStatement:
        """The amount of capital inflow from the sale of all kinds of intangible assets."""
        ...

    @SaleOfIntangibles.setter
    def SaleOfIntangibles(self, value: QuantConnect.Data.Fundamental.SaleOfIntangiblesCashFlowStatement):
        """The amount of capital inflow from the sale of all kinds of intangible assets."""
        ...

    @property
    def SaleOfInvestment(self) -> QuantConnect.Data.Fundamental.SaleOfInvestmentCashFlowStatement:
        """Proceeds received from selling all kind of investments, including both long term and short term."""
        ...

    @SaleOfInvestment.setter
    def SaleOfInvestment(self, value: QuantConnect.Data.Fundamental.SaleOfInvestmentCashFlowStatement):
        """Proceeds received from selling all kind of investments, including both long term and short term."""
        ...

    @property
    def SaleOfPPE(self) -> QuantConnect.Data.Fundamental.SaleOfPPECashFlowStatement:
        """Proceeds from selling any fixed assets such as property, plant and equipment, which also includes retirement of equipment."""
        ...

    @SaleOfPPE.setter
    def SaleOfPPE(self, value: QuantConnect.Data.Fundamental.SaleOfPPECashFlowStatement):
        """Proceeds from selling any fixed assets such as property, plant and equipment, which also includes retirement of equipment."""
        ...

    @property
    def ChangesInAccountReceivables(self) -> QuantConnect.Data.Fundamental.ChangesInAccountReceivablesCashFlowStatement:
        """The increase or decrease between periods of the accounts receivables."""
        ...

    @ChangesInAccountReceivables.setter
    def ChangesInAccountReceivables(self, value: QuantConnect.Data.Fundamental.ChangesInAccountReceivablesCashFlowStatement):
        """The increase or decrease between periods of the accounts receivables."""
        ...

    @property
    def AmortizationOfFinancingCostsAndDiscounts(self) -> QuantConnect.Data.Fundamental.AmortizationOfFinancingCostsAndDiscountsCashFlowStatement:
        """
        The component of interest expense representing the non-cash expenses charged against earnings in the period to allocate debt
        discount and premium, and the costs to issue debt and obtain financing over the related debt instruments. This item is usually only
        available for bank industry.
        """
        ...

    @AmortizationOfFinancingCostsAndDiscounts.setter
    def AmortizationOfFinancingCostsAndDiscounts(self, value: QuantConnect.Data.Fundamental.AmortizationOfFinancingCostsAndDiscountsCashFlowStatement):
        """
        The component of interest expense representing the non-cash expenses charged against earnings in the period to allocate debt
        discount and premium, and the costs to issue debt and obtain financing over the related debt instruments. This item is usually only
        available for bank industry.
        """
        ...

    @property
    def AmortizationOfSecurities(self) -> QuantConnect.Data.Fundamental.AmortizationOfSecuritiesCashFlowStatement:
        """
        Represents amortization of the allocation of a lump sum amount to different time periods, particularly for securities, debt, loans,
        and other forms of financing. Does not include amortization, amortization of capital expenditure and intangible assets.
        """
        ...

    @AmortizationOfSecurities.setter
    def AmortizationOfSecurities(self, value: QuantConnect.Data.Fundamental.AmortizationOfSecuritiesCashFlowStatement):
        """
        Represents amortization of the allocation of a lump sum amount to different time periods, particularly for securities, debt, loans,
        and other forms of financing. Does not include amortization, amortization of capital expenditure and intangible assets.
        """
        ...

    @property
    def AssetImpairmentCharge(self) -> QuantConnect.Data.Fundamental.AssetImpairmentChargeCashFlowStatement:
        """The charge against earnings resulting from the aggregate write down of all assets from their carrying value to their fair value."""
        ...

    @AssetImpairmentCharge.setter
    def AssetImpairmentCharge(self, value: QuantConnect.Data.Fundamental.AssetImpairmentChargeCashFlowStatement):
        """The charge against earnings resulting from the aggregate write down of all assets from their carrying value to their fair value."""
        ...

    @property
    def ChangeInDividendPayable(self) -> QuantConnect.Data.Fundamental.ChangeInDividendPayableCashFlowStatement:
        """The increase or decrease between periods of the dividend payables."""
        ...

    @ChangeInDividendPayable.setter
    def ChangeInDividendPayable(self, value: QuantConnect.Data.Fundamental.ChangeInDividendPayableCashFlowStatement):
        """The increase or decrease between periods of the dividend payables."""
        ...

    @property
    def ChangeInDeferredCharges(self) -> QuantConnect.Data.Fundamental.ChangeInDeferredChargesCashFlowStatement:
        """
        The net change during the reporting period in the value of expenditures made during the current reporting period for benefits that
        will be received over a period of years. This item is usually only available for bank industry.
        """
        ...

    @ChangeInDeferredCharges.setter
    def ChangeInDeferredCharges(self, value: QuantConnect.Data.Fundamental.ChangeInDeferredChargesCashFlowStatement):
        """
        The net change during the reporting period in the value of expenditures made during the current reporting period for benefits that
        will be received over a period of years. This item is usually only available for bank industry.
        """
        ...

    @property
    def ChangeInOtherCurrentAssets(self) -> QuantConnect.Data.Fundamental.ChangeInOtherCurrentAssetsCashFlowStatement:
        """
        The increase or decrease between periods of the Other Current Assets. This category typically includes prepayments, deferred
        charges, and amounts (other than trade accounts) due from parents and subsidiaries.
        """
        ...

    @ChangeInOtherCurrentAssets.setter
    def ChangeInOtherCurrentAssets(self, value: QuantConnect.Data.Fundamental.ChangeInOtherCurrentAssetsCashFlowStatement):
        """
        The increase or decrease between periods of the Other Current Assets. This category typically includes prepayments, deferred
        charges, and amounts (other than trade accounts) due from parents and subsidiaries.
        """
        ...

    @property
    def ChangeInOtherCurrentLiabilities(self) -> QuantConnect.Data.Fundamental.ChangeInOtherCurrentLiabilitiesCashFlowStatement:
        """
        The increase or decrease between periods of the Other Current liabilities. Other Current liabilities is a balance sheet entry used by
        companies to group together current liabilities that are not assigned to common liabilities such as debt obligations or accounts
        payable.
        """
        ...

    @ChangeInOtherCurrentLiabilities.setter
    def ChangeInOtherCurrentLiabilities(self, value: QuantConnect.Data.Fundamental.ChangeInOtherCurrentLiabilitiesCashFlowStatement):
        """
        The increase or decrease between periods of the Other Current liabilities. Other Current liabilities is a balance sheet entry used by
        companies to group together current liabilities that are not assigned to common liabilities such as debt obligations or accounts
        payable.
        """
        ...

    @property
    def ChangeInOtherWorkingCapital(self) -> QuantConnect.Data.Fundamental.ChangeInOtherWorkingCapitalCashFlowStatement:
        """The increase or decrease between periods of the other working capital."""
        ...

    @ChangeInOtherWorkingCapital.setter
    def ChangeInOtherWorkingCapital(self, value: QuantConnect.Data.Fundamental.ChangeInOtherWorkingCapitalCashFlowStatement):
        """The increase or decrease between periods of the other working capital."""
        ...

    @property
    def ChangeInUnearnedPremiums(self) -> QuantConnect.Data.Fundamental.ChangeInUnearnedPremiumsCashFlowStatement:
        """
        The change during the period in the unearned portion of premiums written, excluding the portion amortized into income. This item is
        usually only available for insurance industry.
        """
        ...

    @ChangeInUnearnedPremiums.setter
    def ChangeInUnearnedPremiums(self, value: QuantConnect.Data.Fundamental.ChangeInUnearnedPremiumsCashFlowStatement):
        """
        The change during the period in the unearned portion of premiums written, excluding the portion amortized into income. This item is
        usually only available for insurance industry.
        """
        ...

    @property
    def CommonStockDividendPaid(self) -> QuantConnect.Data.Fundamental.CommonStockDividendPaidCashFlowStatement:
        """The cash outflow from the distribution of an entity's earnings in the form of dividends to common shareholders."""
        ...

    @CommonStockDividendPaid.setter
    def CommonStockDividendPaid(self, value: QuantConnect.Data.Fundamental.CommonStockDividendPaidCashFlowStatement):
        """The cash outflow from the distribution of an entity's earnings in the form of dividends to common shareholders."""
        ...

    @property
    def EarningsLossesFromEquityInvestments(self) -> QuantConnect.Data.Fundamental.EarningsLossesFromEquityInvestmentsCashFlowStatement:
        """
        This item represents the entity's proportionate share for the period of the net income (loss) of its investee (such as unconsolidated
        subsidiaries and joint ventures) to which the equity method of accounting is applied. The amount typically reflects adjustments.
        """
        ...

    @EarningsLossesFromEquityInvestments.setter
    def EarningsLossesFromEquityInvestments(self, value: QuantConnect.Data.Fundamental.EarningsLossesFromEquityInvestmentsCashFlowStatement):
        """
        This item represents the entity's proportionate share for the period of the net income (loss) of its investee (such as unconsolidated
        subsidiaries and joint ventures) to which the equity method of accounting is applied. The amount typically reflects adjustments.
        """
        ...

    @property
    def ExcessTaxBenefitFromStockBasedCompensation(self) -> QuantConnect.Data.Fundamental.ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement:
        """
        Reductions in the entity's income taxes that arise when compensation cost (from non-qualified share-based compensation)
        recognized on the entities tax return exceeds compensation cost from share-based compensation recognized in financial
        statements. This element reduces net cash provided by operating activities.
        """
        ...

    @ExcessTaxBenefitFromStockBasedCompensation.setter
    def ExcessTaxBenefitFromStockBasedCompensation(self, value: QuantConnect.Data.Fundamental.ExcessTaxBenefitFromStockBasedCompensationCashFlowStatement):
        """
        Reductions in the entity's income taxes that arise when compensation cost (from non-qualified share-based compensation)
        recognized on the entities tax return exceeds compensation cost from share-based compensation recognized in financial
        statements. This element reduces net cash provided by operating activities.
        """
        ...

    @property
    def GainLossOnInvestmentSecurities(self) -> QuantConnect.Data.Fundamental.GainLossOnInvestmentSecuritiesCashFlowStatement:
        """
        This item represents the net total realized gain (loss) included in earnings for the period as a result of selling or holding marketable
        securities categorized as trading, available-for-sale, or held-to-maturity, including the unrealized holding gain or loss of held-to-
        maturity securities transferred to the trading security category and the cumulative unrealized gain or loss which was included in
        other comprehensive income (a separate component of shareholders' equity) for available-for-sale securities transferred to trading
        securities during the period. Additionally, this item would include any losses recognized for other than temporary impairments of the
        subject investments in debt and equity securities.
        """
        ...

    @GainLossOnInvestmentSecurities.setter
    def GainLossOnInvestmentSecurities(self, value: QuantConnect.Data.Fundamental.GainLossOnInvestmentSecuritiesCashFlowStatement):
        """
        This item represents the net total realized gain (loss) included in earnings for the period as a result of selling or holding marketable
        securities categorized as trading, available-for-sale, or held-to-maturity, including the unrealized holding gain or loss of held-to-
        maturity securities transferred to the trading security category and the cumulative unrealized gain or loss which was included in
        other comprehensive income (a separate component of shareholders' equity) for available-for-sale securities transferred to trading
        securities during the period. Additionally, this item would include any losses recognized for other than temporary impairments of the
        subject investments in debt and equity securities.
        """
        ...

    @property
    def GainLossOnSaleOfBusiness(self) -> QuantConnect.Data.Fundamental.GainLossOnSaleOfBusinessCashFlowStatement:
        """
        The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting
        period. This element refers to the gain (loss) and not to the cash proceeds of the business. This element is a non-cash adjustment
        to net income when calculating net cash generated by operating activities using the indirect method.
        """
        ...

    @GainLossOnSaleOfBusiness.setter
    def GainLossOnSaleOfBusiness(self, value: QuantConnect.Data.Fundamental.GainLossOnSaleOfBusinessCashFlowStatement):
        """
        The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting
        period. This element refers to the gain (loss) and not to the cash proceeds of the business. This element is a non-cash adjustment
        to net income when calculating net cash generated by operating activities using the indirect method.
        """
        ...

    @property
    def GainLossOnSaleOfPPE(self) -> QuantConnect.Data.Fundamental.GainLossOnSaleOfPPECashFlowStatement:
        """
        The difference between the sale price or salvage price and the book value of the property, plant and equipment that was sold or
        retired during the reporting period. Includes the amount received from selling any fixed assets such as property, plant and
        equipment. Usually this section also includes any retirement of equipment. Such as Sale of business segments; Sale of credit and
        receivables; Property disposition; Proceeds from sale or disposition of business or investment; Decrease in excess of purchase price
        over acquired net assets; Abandoned project (expenditures) credit; Allowances for other funds during construction.
        """
        ...

    @GainLossOnSaleOfPPE.setter
    def GainLossOnSaleOfPPE(self, value: QuantConnect.Data.Fundamental.GainLossOnSaleOfPPECashFlowStatement):
        """
        The difference between the sale price or salvage price and the book value of the property, plant and equipment that was sold or
        retired during the reporting period. Includes the amount received from selling any fixed assets such as property, plant and
        equipment. Usually this section also includes any retirement of equipment. Such as Sale of business segments; Sale of credit and
        receivables; Property disposition; Proceeds from sale or disposition of business or investment; Decrease in excess of purchase price
        over acquired net assets; Abandoned project (expenditures) credit; Allowances for other funds during construction.
        """
        ...

    @property
    def InterestCreditedOnPolicyholderDeposits(self) -> QuantConnect.Data.Fundamental.InterestCreditedOnPolicyholderDepositsCashFlowStatement:
        """
        An expense reported in the income statement and needs to be removed from net income to arrive at cash provided by (used in)
        operations to the extent that such interest has not been paid. This item is usually only available for insurance industry.
        """
        ...

    @InterestCreditedOnPolicyholderDeposits.setter
    def InterestCreditedOnPolicyholderDeposits(self, value: QuantConnect.Data.Fundamental.InterestCreditedOnPolicyholderDepositsCashFlowStatement):
        """
        An expense reported in the income statement and needs to be removed from net income to arrive at cash provided by (used in)
        operations to the extent that such interest has not been paid. This item is usually only available for insurance industry.
        """
        ...

    @property
    def CashFromDiscontinuedOperatingActivities(self) -> QuantConnect.Data.Fundamental.CashFromDiscontinuedOperatingActivitiesCashFlowStatement:
        """
        The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the
        reporting entity.
        """
        ...

    @CashFromDiscontinuedOperatingActivities.setter
    def CashFromDiscontinuedOperatingActivities(self, value: QuantConnect.Data.Fundamental.CashFromDiscontinuedOperatingActivitiesCashFlowStatement):
        """
        The net cash from (used in) all of the entity's discontinued operating activities, excluding those of continued operations, of the
        reporting entity.
        """
        ...

    @property
    def OperatingGainsLosses(self) -> QuantConnect.Data.Fundamental.OperatingGainsLossesCashFlowStatement:
        """The gain or loss from the entity's ongoing operations."""
        ...

    @OperatingGainsLosses.setter
    def OperatingGainsLosses(self, value: QuantConnect.Data.Fundamental.OperatingGainsLossesCashFlowStatement):
        """The gain or loss from the entity's ongoing operations."""
        ...

    @property
    def NetOtherFinancingCharges(self) -> QuantConnect.Data.Fundamental.NetOtherFinancingChargesCashFlowStatement:
        """Miscellaneous charges incurred due to Financing activities."""
        ...

    @NetOtherFinancingCharges.setter
    def NetOtherFinancingCharges(self, value: QuantConnect.Data.Fundamental.NetOtherFinancingChargesCashFlowStatement):
        """Miscellaneous charges incurred due to Financing activities."""
        ...

    @property
    def NetOtherInvestingChanges(self) -> QuantConnect.Data.Fundamental.NetOtherInvestingChangesCashFlowStatement:
        """Miscellaneous charges incurred due to Investing activities."""
        ...

    @NetOtherInvestingChanges.setter
    def NetOtherInvestingChanges(self, value: QuantConnect.Data.Fundamental.NetOtherInvestingChangesCashFlowStatement):
        """Miscellaneous charges incurred due to Investing activities."""
        ...

    @property
    def OtherNonCashItems(self) -> QuantConnect.Data.Fundamental.OtherNonCashItemsCashFlowStatement:
        """Items which adjusted back from net income but without real cash outflow or inflow."""
        ...

    @OtherNonCashItems.setter
    def OtherNonCashItems(self, value: QuantConnect.Data.Fundamental.OtherNonCashItemsCashFlowStatement):
        """Items which adjusted back from net income but without real cash outflow or inflow."""
        ...

    @property
    def PensionAndEmployeeBenefitExpense(self) -> QuantConnect.Data.Fundamental.PensionAndEmployeeBenefitExpenseCashFlowStatement:
        """
        The amount of pension and other (such as medical, dental and life insurance) postretirement benefit costs recognized during the
        period.
        """
        ...

    @PensionAndEmployeeBenefitExpense.setter
    def PensionAndEmployeeBenefitExpense(self, value: QuantConnect.Data.Fundamental.PensionAndEmployeeBenefitExpenseCashFlowStatement):
        """
        The amount of pension and other (such as medical, dental and life insurance) postretirement benefit costs recognized during the
        period.
        """
        ...

    @property
    def PreferredStockDividendPaid(self) -> QuantConnect.Data.Fundamental.PreferredStockDividendPaidCashFlowStatement:
        """
        Pay for the amount of dividends declared or paid in the period to preferred shareholders or the amount for which the obligation to
        pay them dividends rose in the period.
        """
        ...

    @PreferredStockDividendPaid.setter
    def PreferredStockDividendPaid(self, value: QuantConnect.Data.Fundamental.PreferredStockDividendPaidCashFlowStatement):
        """
        Pay for the amount of dividends declared or paid in the period to preferred shareholders or the amount for which the obligation to
        pay them dividends rose in the period.
        """
        ...

    @property
    def ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResell(self) -> QuantConnect.Data.Fundamental.ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement:
        """
        The aggregate amount change of (1) the lending of excess federal funds to another commercial bank requiring such for its legal
        reserve requirements and (2) securities purchased under agreements to resell. This item is usually only available for bank industry.
        """
        ...

    @ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResell.setter
    def ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResell(self, value: QuantConnect.Data.Fundamental.ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResellCashFlowStatement):
        """
        The aggregate amount change of (1) the lending of excess federal funds to another commercial bank requiring such for its legal
        reserve requirements and (2) securities purchased under agreements to resell. This item is usually only available for bank industry.
        """
        ...

    @property
    def ProvisionForLoanLeaseAndOtherLosses(self) -> QuantConnect.Data.Fundamental.ProvisionForLoanLeaseAndOtherLossesCashFlowStatement:
        """
        The sum of the periodic provision charged to earnings, based on an assessment of uncollectible from the counterparty on account
        of loan, lease or other credit losses, to reduce these accounts to the amount that approximates their net realizable value. This item
        is usually only available for bank industry.
        """
        ...

    @ProvisionForLoanLeaseAndOtherLosses.setter
    def ProvisionForLoanLeaseAndOtherLosses(self, value: QuantConnect.Data.Fundamental.ProvisionForLoanLeaseAndOtherLossesCashFlowStatement):
        """
        The sum of the periodic provision charged to earnings, based on an assessment of uncollectible from the counterparty on account
        of loan, lease or other credit losses, to reduce these accounts to the amount that approximates their net realizable value. This item
        is usually only available for bank industry.
        """
        ...

    @property
    def RealizedGainLossOnSaleOfLoansAndLease(self) -> QuantConnect.Data.Fundamental.RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement:
        """
        The gains and losses included in earnings that represent the difference between the sale price and the carrying value of loans and
        leases that were sold during the reporting period. This element refers to the gain (loss) and not to the cash proceeds of the sales.
        This element is a non-cash adjustment to net income when calculating net cash generated by operating activities using the indirect
        method. This item is usually only available for bank industry.
        """
        ...

    @RealizedGainLossOnSaleOfLoansAndLease.setter
    def RealizedGainLossOnSaleOfLoansAndLease(self, value: QuantConnect.Data.Fundamental.RealizedGainLossOnSaleOfLoansAndLeaseCashFlowStatement):
        """
        The gains and losses included in earnings that represent the difference between the sale price and the carrying value of loans and
        leases that were sold during the reporting period. This element refers to the gain (loss) and not to the cash proceeds of the sales.
        This element is a non-cash adjustment to net income when calculating net cash generated by operating activities using the indirect
        method. This item is usually only available for bank industry.
        """
        ...

    @property
    def StockBasedCompensation(self) -> QuantConnect.Data.Fundamental.StockBasedCompensationCashFlowStatement:
        """
        Value of stock issued during the period as a result of any share-based compensation plan other than an employee stock ownership
        plan (ESOP).
        """
        ...

    @StockBasedCompensation.setter
    def StockBasedCompensation(self, value: QuantConnect.Data.Fundamental.StockBasedCompensationCashFlowStatement):
        """
        Value of stock issued during the period as a result of any share-based compensation plan other than an employee stock ownership
        plan (ESOP).
        """
        ...

    @property
    def UnrealizedGainLossOnInvestmentSecurities(self) -> QuantConnect.Data.Fundamental.UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement:
        """The increases (decreases) in the market value of unsold securities whose gains (losses) were included in earnings."""
        ...

    @UnrealizedGainLossOnInvestmentSecurities.setter
    def UnrealizedGainLossOnInvestmentSecurities(self, value: QuantConnect.Data.Fundamental.UnrealizedGainLossOnInvestmentSecuritiesCashFlowStatement):
        """The increases (decreases) in the market value of unsold securities whose gains (losses) were included in earnings."""
        ...

    @property
    def UnrealizedGainsLossesOnDerivatives(self) -> QuantConnect.Data.Fundamental.UnrealizedGainsLossesOnDerivativesCashFlowStatement:
        """The gross gains and losses on derivatives. This item is usually only available for insurance industry."""
        ...

    @UnrealizedGainsLossesOnDerivatives.setter
    def UnrealizedGainsLossesOnDerivatives(self, value: QuantConnect.Data.Fundamental.UnrealizedGainsLossesOnDerivativesCashFlowStatement):
        """The gross gains and losses on derivatives. This item is usually only available for insurance industry."""
        ...

    @property
    def AmortizationOfIntangibles(self) -> QuantConnect.Data.Fundamental.AmortizationOfIntangiblesCashFlowStatement:
        """
        The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in
        production) in a systematic and rational manner to the periods expected to benefit from such assets.
        """
        ...

    @AmortizationOfIntangibles.setter
    def AmortizationOfIntangibles(self, value: QuantConnect.Data.Fundamental.AmortizationOfIntangiblesCashFlowStatement):
        """
        The aggregate expense charged against earnings to allocate the cost of intangible assets (nonphysical assets not used in
        production) in a systematic and rational manner to the periods expected to benefit from such assets.
        """
        ...

    @property
    def IncomeTaxPaidSupplementalData(self) -> QuantConnect.Data.Fundamental.IncomeTaxPaidSupplementalDataCashFlowStatement:
        """The amount of cash paid during the current period to foreign, federal state and local authorities as taxes on income."""
        ...

    @IncomeTaxPaidSupplementalData.setter
    def IncomeTaxPaidSupplementalData(self, value: QuantConnect.Data.Fundamental.IncomeTaxPaidSupplementalDataCashFlowStatement):
        """The amount of cash paid during the current period to foreign, federal state and local authorities as taxes on income."""
        ...

    @property
    def InterestPaidSupplementalData(self) -> QuantConnect.Data.Fundamental.InterestPaidSupplementalDataCashFlowStatement:
        """The amount of cash paid during the current period for interest owed on money borrowed; including amount of interest capitalized."""
        ...

    @InterestPaidSupplementalData.setter
    def InterestPaidSupplementalData(self, value: QuantConnect.Data.Fundamental.InterestPaidSupplementalDataCashFlowStatement):
        """The amount of cash paid during the current period for interest owed on money borrowed; including amount of interest capitalized."""
        ...

    @property
    def IssuanceOfCapitalStock(self) -> QuantConnect.Data.Fundamental.IssuanceOfCapitalStockCashFlowStatement:
        """The cash inflow from offering common stock, which is the additional capital contribution to the entity during the period."""
        ...

    @IssuanceOfCapitalStock.setter
    def IssuanceOfCapitalStock(self, value: QuantConnect.Data.Fundamental.IssuanceOfCapitalStockCashFlowStatement):
        """The cash inflow from offering common stock, which is the additional capital contribution to the entity during the period."""
        ...

    @property
    def IssuanceOfDebt(self) -> QuantConnect.Data.Fundamental.IssuanceOfDebtCashFlowStatement:
        """The cash inflow due to an increase in long term debt."""
        ...

    @IssuanceOfDebt.setter
    def IssuanceOfDebt(self, value: QuantConnect.Data.Fundamental.IssuanceOfDebtCashFlowStatement):
        """The cash inflow due to an increase in long term debt."""
        ...

    @property
    def RepaymentOfDebt(self) -> QuantConnect.Data.Fundamental.RepaymentOfDebtCashFlowStatement:
        """Payments to Settle Long Term Debt plus Payments to Settle Short Term Debt."""
        ...

    @RepaymentOfDebt.setter
    def RepaymentOfDebt(self, value: QuantConnect.Data.Fundamental.RepaymentOfDebtCashFlowStatement):
        """Payments to Settle Long Term Debt plus Payments to Settle Short Term Debt."""
        ...

    @property
    def RepurchaseOfCapitalStock(self) -> QuantConnect.Data.Fundamental.RepurchaseOfCapitalStockCashFlowStatement:
        """Payments for Common Stock plus Payments for Preferred Stock."""
        ...

    @RepurchaseOfCapitalStock.setter
    def RepurchaseOfCapitalStock(self, value: QuantConnect.Data.Fundamental.RepurchaseOfCapitalStockCashFlowStatement):
        """Payments for Common Stock plus Payments for Preferred Stock."""
        ...

    @property
    def FreeCashFlow(self) -> QuantConnect.Data.Fundamental.FreeCashFlowCashFlowStatement:
        """Cash Flow Operations minus Capital Expenditures."""
        ...

    @FreeCashFlow.setter
    def FreeCashFlow(self, value: QuantConnect.Data.Fundamental.FreeCashFlowCashFlowStatement):
        """Cash Flow Operations minus Capital Expenditures."""
        ...

    @property
    def DecreaseinInterestBearingDepositsinBank(self) -> QuantConnect.Data.Fundamental.DecreaseinInterestBearingDepositsinBankCashFlowStatement:
        """
        The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,
        certificates of deposits.
        """
        ...

    @DecreaseinInterestBearingDepositsinBank.setter
    def DecreaseinInterestBearingDepositsinBank(self, value: QuantConnect.Data.Fundamental.DecreaseinInterestBearingDepositsinBankCashFlowStatement):
        """
        The net change on interest-bearing deposits in other financial institutions for relatively short periods of time including, for example,
        certificates of deposits.
        """
        ...

    @property
    def IncreaseinInterestBearingDepositsinBank(self) -> QuantConnect.Data.Fundamental.IncreaseinInterestBearingDepositsinBankCashFlowStatement:
        """Increase in interest-bearing deposits in bank."""
        ...

    @IncreaseinInterestBearingDepositsinBank.setter
    def IncreaseinInterestBearingDepositsinBank(self, value: QuantConnect.Data.Fundamental.IncreaseinInterestBearingDepositsinBankCashFlowStatement):
        """Increase in interest-bearing deposits in bank."""
        ...

    @property
    def InterestReceivedCFO(self) -> QuantConnect.Data.Fundamental.InterestReceivedCFOCashFlowStatement:
        """Interest received by the company, in the Operating Cash Flow section."""
        ...

    @InterestReceivedCFO.setter
    def InterestReceivedCFO(self, value: QuantConnect.Data.Fundamental.InterestReceivedCFOCashFlowStatement):
        """Interest received by the company, in the Operating Cash Flow section."""
        ...

    @property
    def InterestPaidCFO(self) -> QuantConnect.Data.Fundamental.InterestPaidCFOCashFlowStatement:
        """Interest paid on loans, debt or borrowings, in the Operating Cash Flow section."""
        ...

    @InterestPaidCFO.setter
    def InterestPaidCFO(self, value: QuantConnect.Data.Fundamental.InterestPaidCFOCashFlowStatement):
        """Interest paid on loans, debt or borrowings, in the Operating Cash Flow section."""
        ...

    @property
    def PurchaseofSubsidiaries(self) -> QuantConnect.Data.Fundamental.PurchaseofSubsidiariesCashFlowStatement:
        """Purchase of subsidiaries or interest in subsidiaries (investments 51% and above)."""
        ...

    @PurchaseofSubsidiaries.setter
    def PurchaseofSubsidiaries(self, value: QuantConnect.Data.Fundamental.PurchaseofSubsidiariesCashFlowStatement):
        """Purchase of subsidiaries or interest in subsidiaries (investments 51% and above)."""
        ...

    @property
    def PurchaseofJointVentureAssociate(self) -> QuantConnect.Data.Fundamental.PurchaseofJointVentureAssociateCashFlowStatement:
        """Purchase of joint venture/associates (investment below 50%)."""
        ...

    @PurchaseofJointVentureAssociate.setter
    def PurchaseofJointVentureAssociate(self, value: QuantConnect.Data.Fundamental.PurchaseofJointVentureAssociateCashFlowStatement):
        """Purchase of joint venture/associates (investment below 50%)."""
        ...

    @property
    def SaleofSubsidiaries(self) -> QuantConnect.Data.Fundamental.SaleofSubsidiariesCashFlowStatement:
        """Cash inflow from the disposal of any subsidiaries."""
        ...

    @SaleofSubsidiaries.setter
    def SaleofSubsidiaries(self, value: QuantConnect.Data.Fundamental.SaleofSubsidiariesCashFlowStatement):
        """Cash inflow from the disposal of any subsidiaries."""
        ...

    @property
    def SaleofJointVentureAssociate(self) -> QuantConnect.Data.Fundamental.SaleofJointVentureAssociateCashFlowStatement:
        """Cash inflow from the disposal of joint venture/associates (investment below 50%)."""
        ...

    @SaleofJointVentureAssociate.setter
    def SaleofJointVentureAssociate(self, value: QuantConnect.Data.Fundamental.SaleofJointVentureAssociateCashFlowStatement):
        """Cash inflow from the disposal of joint venture/associates (investment below 50%)."""
        ...

    @property
    def IncreaseDecreaseinLeaseFinancing(self) -> QuantConnect.Data.Fundamental.IncreaseDecreaseinLeaseFinancingCashFlowStatement:
        """Change in cash flow resulting from increase/decrease in lease financing."""
        ...

    @IncreaseDecreaseinLeaseFinancing.setter
    def IncreaseDecreaseinLeaseFinancing(self, value: QuantConnect.Data.Fundamental.IncreaseDecreaseinLeaseFinancingCashFlowStatement):
        """Change in cash flow resulting from increase/decrease in lease financing."""
        ...

    @property
    def IncreaseinLeaseFinancing(self) -> QuantConnect.Data.Fundamental.IncreaseinLeaseFinancingCashFlowStatement:
        """The cash inflow from increase in lease financing."""
        ...

    @IncreaseinLeaseFinancing.setter
    def IncreaseinLeaseFinancing(self, value: QuantConnect.Data.Fundamental.IncreaseinLeaseFinancingCashFlowStatement):
        """The cash inflow from increase in lease financing."""
        ...

    @property
    def RepaymentinLeaseFinancing(self) -> QuantConnect.Data.Fundamental.RepaymentinLeaseFinancingCashFlowStatement:
        """The cash outflow to repay lease financing during the period."""
        ...

    @RepaymentinLeaseFinancing.setter
    def RepaymentinLeaseFinancing(self, value: QuantConnect.Data.Fundamental.RepaymentinLeaseFinancingCashFlowStatement):
        """The cash outflow to repay lease financing during the period."""
        ...

    @property
    def ShareofAssociates(self) -> QuantConnect.Data.Fundamental.ShareofAssociatesCashFlowStatement:
        """A non-cash adjustment for share of associates' income in respect of operating activities."""
        ...

    @ShareofAssociates.setter
    def ShareofAssociates(self, value: QuantConnect.Data.Fundamental.ShareofAssociatesCashFlowStatement):
        """A non-cash adjustment for share of associates' income in respect of operating activities."""
        ...

    @property
    def ProfitonDisposals(self) -> QuantConnect.Data.Fundamental.ProfitonDisposalsCashFlowStatement:
        """
        The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting
        period.
        """
        ...

    @ProfitonDisposals.setter
    def ProfitonDisposals(self, value: QuantConnect.Data.Fundamental.ProfitonDisposalsCashFlowStatement):
        """
        The difference between the sale price or salvage price and the book value of an asset that was sold or retired during the reporting
        period.
        """
        ...

    @property
    def ReorganizationOtherCosts(self) -> QuantConnect.Data.Fundamental.ReorganizationOtherCostsCashFlowStatement:
        """A non-cash adjustment relating to restructuring costs."""
        ...

    @ReorganizationOtherCosts.setter
    def ReorganizationOtherCosts(self, value: QuantConnect.Data.Fundamental.ReorganizationOtherCostsCashFlowStatement):
        """A non-cash adjustment relating to restructuring costs."""
        ...

    @property
    def NetOutwardLoans(self) -> QuantConnect.Data.Fundamental.NetOutwardLoansCashFlowStatement:
        """Adjustments due to net loans to/from outsiders in the Investing Cash Flow section."""
        ...

    @NetOutwardLoans.setter
    def NetOutwardLoans(self, value: QuantConnect.Data.Fundamental.NetOutwardLoansCashFlowStatement):
        """Adjustments due to net loans to/from outsiders in the Investing Cash Flow section."""
        ...

    @property
    def IssueExpenses(self) -> QuantConnect.Data.Fundamental.IssueExpensesCashFlowStatement:
        """Cost associated with issuance of debt/equity capital in the Financing Cash Flow section."""
        ...

    @IssueExpenses.setter
    def IssueExpenses(self, value: QuantConnect.Data.Fundamental.IssueExpensesCashFlowStatement):
        """Cost associated with issuance of debt/equity capital in the Financing Cash Flow section."""
        ...

    @property
    def ChangeinDepositsbyBanksandCustomers(self) -> QuantConnect.Data.Fundamental.ChangeinDepositsbyBanksandCustomersCashFlowStatement:
        """The increase or decrease between periods of the deposits by banks and customers."""
        ...

    @ChangeinDepositsbyBanksandCustomers.setter
    def ChangeinDepositsbyBanksandCustomers(self, value: QuantConnect.Data.Fundamental.ChangeinDepositsbyBanksandCustomersCashFlowStatement):
        """The increase or decrease between periods of the deposits by banks and customers."""
        ...

    @property
    def CashFlowsfromusedinOperatingActivitiesDirect(self) -> QuantConnect.Data.Fundamental.CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement:
        """
        The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity
        under the direct method.
        """
        ...

    @CashFlowsfromusedinOperatingActivitiesDirect.setter
    def CashFlowsfromusedinOperatingActivitiesDirect(self, value: QuantConnect.Data.Fundamental.CashFlowsfromusedinOperatingActivitiesDirectCashFlowStatement):
        """
        The net cash from (used in) all of the entity's operating activities, including those of discontinued operations, of the reporting entity
        under the direct method.
        """
        ...

    @property
    def ClassesofCashReceiptsfromOperatingActivities(self) -> QuantConnect.Data.Fundamental.ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement:
        """Sum of total cash receipts in the direct cash flow."""
        ...

    @ClassesofCashReceiptsfromOperatingActivities.setter
    def ClassesofCashReceiptsfromOperatingActivities(self, value: QuantConnect.Data.Fundamental.ClassesofCashReceiptsfromOperatingActivitiesCashFlowStatement):
        """Sum of total cash receipts in the direct cash flow."""
        ...

    @property
    def OtherCashReceiptsfromOperatingActivities(self) -> QuantConnect.Data.Fundamental.OtherCashReceiptsfromOperatingActivitiesCashFlowStatement:
        """Other cash receipts for the direct cash flow."""
        ...

    @OtherCashReceiptsfromOperatingActivities.setter
    def OtherCashReceiptsfromOperatingActivities(self, value: QuantConnect.Data.Fundamental.OtherCashReceiptsfromOperatingActivitiesCashFlowStatement):
        """Other cash receipts for the direct cash flow."""
        ...

    @property
    def ClassesofCashPayments(self) -> QuantConnect.Data.Fundamental.ClassesofCashPaymentsCashFlowStatement:
        """Sum of total cash payment in the direct cash flow."""
        ...

    @ClassesofCashPayments.setter
    def ClassesofCashPayments(self, value: QuantConnect.Data.Fundamental.ClassesofCashPaymentsCashFlowStatement):
        """Sum of total cash payment in the direct cash flow."""
        ...

    @property
    def PaymentstoSuppliersforGoodsandServices(self) -> QuantConnect.Data.Fundamental.PaymentstoSuppliersforGoodsandServicesCashFlowStatement:
        """Cash paid to suppliers when purchasing goods or services by the company, in the direct cash flow."""
        ...

    @PaymentstoSuppliersforGoodsandServices.setter
    def PaymentstoSuppliersforGoodsandServices(self, value: QuantConnect.Data.Fundamental.PaymentstoSuppliersforGoodsandServicesCashFlowStatement):
        """Cash paid to suppliers when purchasing goods or services by the company, in the direct cash flow."""
        ...

    @property
    def PaymentsonBehalfofEmployees(self) -> QuantConnect.Data.Fundamental.PaymentsonBehalfofEmployeesCashFlowStatement:
        """Cash paid in a form of salaries or other benefits to employees of the company, in the direct cash flow."""
        ...

    @PaymentsonBehalfofEmployees.setter
    def PaymentsonBehalfofEmployees(self, value: QuantConnect.Data.Fundamental.PaymentsonBehalfofEmployeesCashFlowStatement):
        """Cash paid in a form of salaries or other benefits to employees of the company, in the direct cash flow."""
        ...

    @property
    def OtherCashPaymentsfromOperatingActivities(self) -> QuantConnect.Data.Fundamental.OtherCashPaymentsfromOperatingActivitiesCashFlowStatement:
        """Other cash payments for the direct cash flow."""
        ...

    @OtherCashPaymentsfromOperatingActivities.setter
    def OtherCashPaymentsfromOperatingActivities(self, value: QuantConnect.Data.Fundamental.OtherCashPaymentsfromOperatingActivitiesCashFlowStatement):
        """Other cash payments for the direct cash flow."""
        ...

    @property
    def DividendsPaidDirect(self) -> QuantConnect.Data.Fundamental.DividendsPaidDirectCashFlowStatement:
        """Dividend paid to the investors, for the direct cash flow."""
        ...

    @DividendsPaidDirect.setter
    def DividendsPaidDirect(self, value: QuantConnect.Data.Fundamental.DividendsPaidDirectCashFlowStatement):
        """Dividend paid to the investors, for the direct cash flow."""
        ...

    @property
    def DividendsReceivedDirect(self) -> QuantConnect.Data.Fundamental.DividendsReceivedDirectCashFlowStatement:
        """Dividend received on the investment, for the direct cash flow."""
        ...

    @DividendsReceivedDirect.setter
    def DividendsReceivedDirect(self, value: QuantConnect.Data.Fundamental.DividendsReceivedDirectCashFlowStatement):
        """Dividend received on the investment, for the direct cash flow."""
        ...

    @property
    def InterestPaidDirect(self) -> QuantConnect.Data.Fundamental.InterestPaidDirectCashFlowStatement:
        """Interest paid on loans, debt or borrowings, in the direct cash flow."""
        ...

    @InterestPaidDirect.setter
    def InterestPaidDirect(self, value: QuantConnect.Data.Fundamental.InterestPaidDirectCashFlowStatement):
        """Interest paid on loans, debt or borrowings, in the direct cash flow."""
        ...

    @property
    def InterestReceivedDirect(self) -> QuantConnect.Data.Fundamental.InterestReceivedDirectCashFlowStatement:
        """Interest received by the company, in the direct cash flow."""
        ...

    @InterestReceivedDirect.setter
    def InterestReceivedDirect(self, value: QuantConnect.Data.Fundamental.InterestReceivedDirectCashFlowStatement):
        """Interest received by the company, in the direct cash flow."""
        ...

    @property
    def TaxesRefundPaidDirect(self) -> QuantConnect.Data.Fundamental.TaxesRefundPaidDirectCashFlowStatement:
        """Tax paid/refund related to operating activities, for the direct cash flow."""
        ...

    @TaxesRefundPaidDirect.setter
    def TaxesRefundPaidDirect(self, value: QuantConnect.Data.Fundamental.TaxesRefundPaidDirectCashFlowStatement):
        """Tax paid/refund related to operating activities, for the direct cash flow."""
        ...

    @property
    def TotalAdjustmentsforNonCashItems(self) -> QuantConnect.Data.Fundamental.TotalAdjustmentsforNonCashItemsCashFlowStatement:
        """Sum of all adjustments back from net income but without real cash outflow or inflow."""
        ...

    @TotalAdjustmentsforNonCashItems.setter
    def TotalAdjustmentsforNonCashItems(self, value: QuantConnect.Data.Fundamental.TotalAdjustmentsforNonCashItemsCashFlowStatement):
        """Sum of all adjustments back from net income but without real cash outflow or inflow."""
        ...

    @property
    def ImpairmentLossReversalRecognizedinProfitorLoss(self) -> QuantConnect.Data.Fundamental.ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement:
        """
        The difference between the future net cash flows expected to be received from the asset and its book value, recognized in the
        Income Statement.
        """
        ...

    @ImpairmentLossReversalRecognizedinProfitorLoss.setter
    def ImpairmentLossReversalRecognizedinProfitorLoss(self, value: QuantConnect.Data.Fundamental.ImpairmentLossReversalRecognizedinProfitorLossCashFlowStatement):
        """
        The difference between the future net cash flows expected to be received from the asset and its book value, recognized in the
        Income Statement.
        """
        ...

    @property
    def DividendPaidCFO(self) -> QuantConnect.Data.Fundamental.DividendPaidCFOCashFlowStatement:
        """Dividend paid to the investors, in the Operating Cash Flow section."""
        ...

    @DividendPaidCFO.setter
    def DividendPaidCFO(self, value: QuantConnect.Data.Fundamental.DividendPaidCFOCashFlowStatement):
        """Dividend paid to the investors, in the Operating Cash Flow section."""
        ...

    @property
    def DividendReceivedCFO(self) -> QuantConnect.Data.Fundamental.DividendReceivedCFOCashFlowStatement:
        """Dividend received on investment, in the Operating Cash Flow section."""
        ...

    @DividendReceivedCFO.setter
    def DividendReceivedCFO(self, value: QuantConnect.Data.Fundamental.DividendReceivedCFOCashFlowStatement):
        """Dividend received on investment, in the Operating Cash Flow section."""
        ...

    @property
    def TaxesRefundPaid(self) -> QuantConnect.Data.Fundamental.TaxesRefundPaidCashFlowStatement:
        """Total tax paid or received on operating activities."""
        ...

    @TaxesRefundPaid.setter
    def TaxesRefundPaid(self, value: QuantConnect.Data.Fundamental.TaxesRefundPaidCashFlowStatement):
        """Total tax paid or received on operating activities."""
        ...

    @property
    def OtherOperatingInflowsOutflowsofCash(self) -> QuantConnect.Data.Fundamental.OtherOperatingInflowsOutflowsofCashCashFlowStatement:
        """Any other cash inflows or outflows in the Operating Cash Flow section, not accounted for in the other specified items."""
        ...

    @OtherOperatingInflowsOutflowsofCash.setter
    def OtherOperatingInflowsOutflowsofCash(self, value: QuantConnect.Data.Fundamental.OtherOperatingInflowsOutflowsofCashCashFlowStatement):
        """Any other cash inflows or outflows in the Operating Cash Flow section, not accounted for in the other specified items."""
        ...

    @property
    def CashAdvancesandLoansMadetoOtherParties(self) -> QuantConnect.Data.Fundamental.CashAdvancesandLoansMadetoOtherPartiesCashFlowStatement:
        """Cash outlay for cash advances and loans made to other parties."""
        ...

    @CashAdvancesandLoansMadetoOtherParties.setter
    def CashAdvancesandLoansMadetoOtherParties(self, value: QuantConnect.Data.Fundamental.CashAdvancesandLoansMadetoOtherPartiesCashFlowStatement):
        """Cash outlay for cash advances and loans made to other parties."""
        ...

    @property
    def CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherParties(self) -> QuantConnect.Data.Fundamental.CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement:
        """Cash received from the repayment of advances and loans made to other parties, in the Investing Cash Flow section."""
        ...

    @CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherParties.setter
    def CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherParties(self, value: QuantConnect.Data.Fundamental.CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherPartiesCashFlowStatement):
        """Cash received from the repayment of advances and loans made to other parties, in the Investing Cash Flow section."""
        ...

    @property
    def DividendsReceivedCFI(self) -> QuantConnect.Data.Fundamental.DividendsReceivedCFICashFlowStatement:
        """Dividend received on investment, in the Investing Cash Flow section."""
        ...

    @DividendsReceivedCFI.setter
    def DividendsReceivedCFI(self, value: QuantConnect.Data.Fundamental.DividendsReceivedCFICashFlowStatement):
        """Dividend received on investment, in the Investing Cash Flow section."""
        ...

    @property
    def InterestReceivedCFI(self) -> QuantConnect.Data.Fundamental.InterestReceivedCFICashFlowStatement:
        """Interest received by the company, in the Investing Cash Flow section."""
        ...

    @InterestReceivedCFI.setter
    def InterestReceivedCFI(self, value: QuantConnect.Data.Fundamental.InterestReceivedCFICashFlowStatement):
        """Interest received by the company, in the Investing Cash Flow section."""
        ...

    @property
    def InterestPaidCFF(self) -> QuantConnect.Data.Fundamental.InterestPaidCFFCashFlowStatement:
        """Interest paid on loans, debt or borrowings, in the Financing Cash Flow section."""
        ...

    @InterestPaidCFF.setter
    def InterestPaidCFF(self, value: QuantConnect.Data.Fundamental.InterestPaidCFFCashFlowStatement):
        """Interest paid on loans, debt or borrowings, in the Financing Cash Flow section."""
        ...

    @property
    def ChangeinAccruedIncome(self) -> QuantConnect.Data.Fundamental.ChangeinAccruedIncomeCashFlowStatement:
        """
        The increase or decrease between periods in the amount of outstanding money owed by a customer for goods or services provided
        by the company.
        """
        ...

    @ChangeinAccruedIncome.setter
    def ChangeinAccruedIncome(self, value: QuantConnect.Data.Fundamental.ChangeinAccruedIncomeCashFlowStatement):
        """
        The increase or decrease between periods in the amount of outstanding money owed by a customer for goods or services provided
        by the company.
        """
        ...

    @property
    def ChangeinFinancialAssets(self) -> QuantConnect.Data.Fundamental.ChangeinFinancialAssetsCashFlowStatement:
        """The increase or decrease between periods of the financial assets."""
        ...

    @ChangeinFinancialAssets.setter
    def ChangeinFinancialAssets(self, value: QuantConnect.Data.Fundamental.ChangeinFinancialAssetsCashFlowStatement):
        """The increase or decrease between periods of the financial assets."""
        ...

    @property
    def ChangeinAdvancesfromCentralBanks(self) -> QuantConnect.Data.Fundamental.ChangeinAdvancesfromCentralBanksCashFlowStatement:
        """The increase or decrease between periods of the advances from central banks."""
        ...

    @ChangeinAdvancesfromCentralBanks.setter
    def ChangeinAdvancesfromCentralBanks(self, value: QuantConnect.Data.Fundamental.ChangeinAdvancesfromCentralBanksCashFlowStatement):
        """The increase or decrease between periods of the advances from central banks."""
        ...

    @property
    def ChangeinFinancialLiabilities(self) -> QuantConnect.Data.Fundamental.ChangeinFinancialLiabilitiesCashFlowStatement:
        """The increase or decrease between periods of the financial liabilities."""
        ...

    @ChangeinFinancialLiabilities.setter
    def ChangeinFinancialLiabilities(self, value: QuantConnect.Data.Fundamental.ChangeinFinancialLiabilitiesCashFlowStatement):
        """The increase or decrease between periods of the financial liabilities."""
        ...

    @property
    def ChangeinInsuranceContractAssets(self) -> QuantConnect.Data.Fundamental.ChangeinInsuranceContractAssetsCashFlowStatement:
        """The increase or decrease between periods of the contract assets."""
        ...

    @ChangeinInsuranceContractAssets.setter
    def ChangeinInsuranceContractAssets(self, value: QuantConnect.Data.Fundamental.ChangeinInsuranceContractAssetsCashFlowStatement):
        """The increase or decrease between periods of the contract assets."""
        ...

    @property
    def ChangeinReinsuranceReceivables(self) -> QuantConnect.Data.Fundamental.ChangeinReinsuranceReceivablesCashFlowStatement:
        """The increase or decrease between periods of the reinsurance receivable."""
        ...

    @ChangeinReinsuranceReceivables.setter
    def ChangeinReinsuranceReceivables(self, value: QuantConnect.Data.Fundamental.ChangeinReinsuranceReceivablesCashFlowStatement):
        """The increase or decrease between periods of the reinsurance receivable."""
        ...

    @property
    def ChangeinDeferredAcquisitionCostsNet(self) -> QuantConnect.Data.Fundamental.ChangeinDeferredAcquisitionCostsNetCashFlowStatement:
        """The increase or decrease between periods of the deferred acquisition costs."""
        ...

    @ChangeinDeferredAcquisitionCostsNet.setter
    def ChangeinDeferredAcquisitionCostsNet(self, value: QuantConnect.Data.Fundamental.ChangeinDeferredAcquisitionCostsNetCashFlowStatement):
        """The increase or decrease between periods of the deferred acquisition costs."""
        ...

    @property
    def ChangeinInsuranceFunds(self) -> QuantConnect.Data.Fundamental.ChangeinInsuranceFundsCashFlowStatement:
        """The increase or decrease between periods of the insurance funds."""
        ...

    @ChangeinInsuranceFunds.setter
    def ChangeinInsuranceFunds(self, value: QuantConnect.Data.Fundamental.ChangeinInsuranceFundsCashFlowStatement):
        """The increase or decrease between periods of the insurance funds."""
        ...

    @property
    def ChangeinInvestmentContractLiabilities(self) -> QuantConnect.Data.Fundamental.ChangeinInvestmentContractLiabilitiesCashFlowStatement:
        """The increase or decrease between periods of the investment contract liabilities."""
        ...

    @ChangeinInvestmentContractLiabilities.setter
    def ChangeinInvestmentContractLiabilities(self, value: QuantConnect.Data.Fundamental.ChangeinInvestmentContractLiabilitiesCashFlowStatement):
        """The increase or decrease between periods of the investment contract liabilities."""
        ...

    @property
    def ChangeinInsuranceContractLiabilities(self) -> QuantConnect.Data.Fundamental.ChangeinInsuranceContractLiabilitiesCashFlowStatement:
        """The increase or decrease between periods of the insurance contract liabilities."""
        ...

    @ChangeinInsuranceContractLiabilities.setter
    def ChangeinInsuranceContractLiabilities(self, value: QuantConnect.Data.Fundamental.ChangeinInsuranceContractLiabilitiesCashFlowStatement):
        """The increase or decrease between periods of the insurance contract liabilities."""
        ...

    @property
    def ProvisionandWriteOffofAssets(self) -> QuantConnect.Data.Fundamental.ProvisionandWriteOffofAssetsCashFlowStatement:
        """A non-cash adjustment for total provision and write off on assets & liabilities."""
        ...

    @ProvisionandWriteOffofAssets.setter
    def ProvisionandWriteOffofAssets(self, value: QuantConnect.Data.Fundamental.ProvisionandWriteOffofAssetsCashFlowStatement):
        """A non-cash adjustment for total provision and write off on assets & liabilities."""
        ...

    @property
    def ReceiptsfromCustomers(self) -> QuantConnect.Data.Fundamental.ReceiptsfromCustomersCashFlowStatement:
        """Payment received from customers in the Direct Cash Flow."""
        ...

    @ReceiptsfromCustomers.setter
    def ReceiptsfromCustomers(self, value: QuantConnect.Data.Fundamental.ReceiptsfromCustomersCashFlowStatement):
        """Payment received from customers in the Direct Cash Flow."""
        ...

    @property
    def ReceiptsfromGovernmentGrants(self) -> QuantConnect.Data.Fundamental.ReceiptsfromGovernmentGrantsCashFlowStatement:
        """Cash received from governments in the form of grants in the Direct Cash Flow."""
        ...

    @ReceiptsfromGovernmentGrants.setter
    def ReceiptsfromGovernmentGrants(self, value: QuantConnect.Data.Fundamental.ReceiptsfromGovernmentGrantsCashFlowStatement):
        """Cash received from governments in the form of grants in the Direct Cash Flow."""
        ...

    @property
    def MinorityInterest(self) -> QuantConnect.Data.Fundamental.MinorityInterestCashFlowStatement:
        """
        Amount of net income (loss) for the period allocated to non-controlling shareholders, partners, or other equity holders in one or
        more of the entities included.
        """
        ...

    @MinorityInterest.setter
    def MinorityInterest(self, value: QuantConnect.Data.Fundamental.MinorityInterestCashFlowStatement):
        """
        Amount of net income (loss) for the period allocated to non-controlling shareholders, partners, or other equity holders in one or
        more of the entities included.
        """
        ...

    @property
    def CapExReported(self) -> QuantConnect.Data.Fundamental.CapExReportedCashFlowStatement:
        """Capital expenditure, capitalized software development cost, maintenance capital expenditure, etc. as reported by the company."""
        ...

    @CapExReported.setter
    def CapExReported(self, value: QuantConnect.Data.Fundamental.CapExReportedCashFlowStatement):
        """Capital expenditure, capitalized software development cost, maintenance capital expenditure, etc. as reported by the company."""
        ...

    @property
    def CashReceiptsfromTaxRefunds(self) -> QuantConnect.Data.Fundamental.CashReceiptsfromTaxRefundsCashFlowStatement:
        """Cash received as refunds from tax authorities in operating cash flow, using the direct method"""
        ...

    @CashReceiptsfromTaxRefunds.setter
    def CashReceiptsfromTaxRefunds(self, value: QuantConnect.Data.Fundamental.CashReceiptsfromTaxRefundsCashFlowStatement):
        """Cash received as refunds from tax authorities in operating cash flow, using the direct method"""
        ...

    @property
    def CashReceiptsfromDepositsbyBanksandCustomers(self) -> QuantConnect.Data.Fundamental.CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement:
        """
        Cash received from banks and customer deposits in operating cash flow, using the direct method. This item is usually only available
        for bank industry
        """
        ...

    @CashReceiptsfromDepositsbyBanksandCustomers.setter
    def CashReceiptsfromDepositsbyBanksandCustomers(self, value: QuantConnect.Data.Fundamental.CashReceiptsfromDepositsbyBanksandCustomersCashFlowStatement):
        """
        Cash received from banks and customer deposits in operating cash flow, using the direct method. This item is usually only available
        for bank industry
        """
        ...

    @property
    def CashReceiptsfromLoans(self) -> QuantConnect.Data.Fundamental.CashReceiptsfromLoansCashFlowStatement:
        """Cash received from loans in operating cash flow, using the direct method. This item is usually only available for bank industry"""
        ...

    @CashReceiptsfromLoans.setter
    def CashReceiptsfromLoans(self, value: QuantConnect.Data.Fundamental.CashReceiptsfromLoansCashFlowStatement):
        """Cash received from loans in operating cash flow, using the direct method. This item is usually only available for bank industry"""
        ...

    @property
    def CashReceiptsfromSecuritiesRelatedActivities(self) -> QuantConnect.Data.Fundamental.CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement:
        """
        Cash received from the trading of securities in operating cash flow, using the direct method. This item is usually only available for
        bank and insurance industries
        """
        ...

    @CashReceiptsfromSecuritiesRelatedActivities.setter
    def CashReceiptsfromSecuritiesRelatedActivities(self, value: QuantConnect.Data.Fundamental.CashReceiptsfromSecuritiesRelatedActivitiesCashFlowStatement):
        """
        Cash received from the trading of securities in operating cash flow, using the direct method. This item is usually only available for
        bank and insurance industries
        """
        ...

    @property
    def CashReceiptsfromFeesandCommissions(self) -> QuantConnect.Data.Fundamental.CashReceiptsfromFeesandCommissionsCashFlowStatement:
        """
        Cash received from agency fees and commissions in operating cash flow, using the direct method. This item is usually available for
        bank and insurance industries
        """
        ...

    @CashReceiptsfromFeesandCommissions.setter
    def CashReceiptsfromFeesandCommissions(self, value: QuantConnect.Data.Fundamental.CashReceiptsfromFeesandCommissionsCashFlowStatement):
        """
        Cash received from agency fees and commissions in operating cash flow, using the direct method. This item is usually available for
        bank and insurance industries
        """
        ...

    @property
    def CashPaymentsforDepositsbyBanksandCustomers(self) -> QuantConnect.Data.Fundamental.CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement:
        """
        Cash paid for deposits by banks and customers in operating cash flow, using the direct method. This item is usually only available
        for bank industry
        """
        ...

    @CashPaymentsforDepositsbyBanksandCustomers.setter
    def CashPaymentsforDepositsbyBanksandCustomers(self, value: QuantConnect.Data.Fundamental.CashPaymentsforDepositsbyBanksandCustomersCashFlowStatement):
        """
        Cash paid for deposits by banks and customers in operating cash flow, using the direct method. This item is usually only available
        for bank industry
        """
        ...

    @property
    def CashPaymentsforLoans(self) -> QuantConnect.Data.Fundamental.CashPaymentsforLoansCashFlowStatement:
        """Cash paid for loans in operating cash flow, using the direct method. This item is usually only available for bank industry"""
        ...

    @CashPaymentsforLoans.setter
    def CashPaymentsforLoans(self, value: QuantConnect.Data.Fundamental.CashPaymentsforLoansCashFlowStatement):
        """Cash paid for loans in operating cash flow, using the direct method. This item is usually only available for bank industry"""
        ...

    @property
    def InterestandCommissionPaid(self) -> QuantConnect.Data.Fundamental.InterestandCommissionPaidCashFlowStatement:
        """Cash paid for interest and commission in operating cash flow, using the direct method"""
        ...

    @InterestandCommissionPaid.setter
    def InterestandCommissionPaid(self, value: QuantConnect.Data.Fundamental.InterestandCommissionPaidCashFlowStatement):
        """Cash paid for interest and commission in operating cash flow, using the direct method"""
        ...

    @property
    def AllTaxesPaid(self) -> QuantConnect.Data.Fundamental.AllTaxesPaidCashFlowStatement:
        """Cash paid to tax authorities in operating cash flow, using the direct method"""
        ...

    @AllTaxesPaid.setter
    def AllTaxesPaid(self, value: QuantConnect.Data.Fundamental.AllTaxesPaidCashFlowStatement):
        """Cash paid to tax authorities in operating cash flow, using the direct method"""
        ...

    @property
    def CashReceivedfromInsuranceActivities(self) -> QuantConnect.Data.Fundamental.CashReceivedfromInsuranceActivitiesCashFlowStatement:
        """
        Cash received from insurance activities in operating cash flow, using the direct method. This item is usually only available for
        insurance industry
        """
        ...

    @CashReceivedfromInsuranceActivities.setter
    def CashReceivedfromInsuranceActivities(self, value: QuantConnect.Data.Fundamental.CashReceivedfromInsuranceActivitiesCashFlowStatement):
        """
        Cash received from insurance activities in operating cash flow, using the direct method. This item is usually only available for
        insurance industry
        """
        ...

    @property
    def PremiumReceived(self) -> QuantConnect.Data.Fundamental.PremiumReceivedCashFlowStatement:
        """
        Cash received from premium income in operating cash flow, using the direct method. This item is usually only available for
        insurance industry
        """
        ...

    @PremiumReceived.setter
    def PremiumReceived(self, value: QuantConnect.Data.Fundamental.PremiumReceivedCashFlowStatement):
        """
        Cash received from premium income in operating cash flow, using the direct method. This item is usually only available for
        insurance industry
        """
        ...

    @property
    def ReinsuranceandOtherRecoveriesReceived(self) -> QuantConnect.Data.Fundamental.ReinsuranceandOtherRecoveriesReceivedCashFlowStatement:
        """
        Cash received from reinsurance income or other recoveries income in operating cash flow, using the direct method. This item is
        usually only available for insurance industry
        """
        ...

    @ReinsuranceandOtherRecoveriesReceived.setter
    def ReinsuranceandOtherRecoveriesReceived(self, value: QuantConnect.Data.Fundamental.ReinsuranceandOtherRecoveriesReceivedCashFlowStatement):
        """
        Cash received from reinsurance income or other recoveries income in operating cash flow, using the direct method. This item is
        usually only available for insurance industry
        """
        ...

    @property
    def PolicyholderDepositInvestmentReceived(self) -> QuantConnect.Data.Fundamental.PolicyholderDepositInvestmentReceivedCashFlowStatement:
        """
        Cash received from policyholder deposit investment activities in operating cash flow, using the direct method. This item is usually
        only available for insurance industry
        """
        ...

    @PolicyholderDepositInvestmentReceived.setter
    def PolicyholderDepositInvestmentReceived(self, value: QuantConnect.Data.Fundamental.PolicyholderDepositInvestmentReceivedCashFlowStatement):
        """
        Cash received from policyholder deposit investment activities in operating cash flow, using the direct method. This item is usually
        only available for insurance industry
        """
        ...

    @property
    def CashPaidforInsuranceActivities(self) -> QuantConnect.Data.Fundamental.CashPaidforInsuranceActivitiesCashFlowStatement:
        """
        Cash paid out for insurance activities during the period in operating cash flow, using the direct method. This item is usually only
        available for insurance industry
        """
        ...

    @CashPaidforInsuranceActivities.setter
    def CashPaidforInsuranceActivities(self, value: QuantConnect.Data.Fundamental.CashPaidforInsuranceActivitiesCashFlowStatement):
        """
        Cash paid out for insurance activities during the period in operating cash flow, using the direct method. This item is usually only
        available for insurance industry
        """
        ...

    @property
    def ClaimsPaid(self) -> QuantConnect.Data.Fundamental.ClaimsPaidCashFlowStatement:
        """
        Cash paid out for claims by a insurance company during the period in operating cash flow, using the direct method. This item is
        usually only available for insurance industry
        """
        ...

    @ClaimsPaid.setter
    def ClaimsPaid(self, value: QuantConnect.Data.Fundamental.ClaimsPaidCashFlowStatement):
        """
        Cash paid out for claims by a insurance company during the period in operating cash flow, using the direct method. This item is
        usually only available for insurance industry
        """
        ...

    @property
    def CommissionPaid(self) -> QuantConnect.Data.Fundamental.CommissionPaidCashFlowStatement:
        """Cash paid for commissions in operating cash flow, using the direct method"""
        ...

    @CommissionPaid.setter
    def CommissionPaid(self, value: QuantConnect.Data.Fundamental.CommissionPaidCashFlowStatement):
        """Cash paid for commissions in operating cash flow, using the direct method"""
        ...

    @property
    def CashPaidtoReinsurers(self) -> QuantConnect.Data.Fundamental.CashPaidtoReinsurersCashFlowStatement:
        """Cash paid out to reinsurers in operating cash flow, using the direct method. This item is usually only available for insurance industry"""
        ...

    @CashPaidtoReinsurers.setter
    def CashPaidtoReinsurers(self, value: QuantConnect.Data.Fundamental.CashPaidtoReinsurersCashFlowStatement):
        """Cash paid out to reinsurers in operating cash flow, using the direct method. This item is usually only available for insurance industry"""
        ...

    @property
    def OtherUnderwritingExpensesPaid(self) -> QuantConnect.Data.Fundamental.OtherUnderwritingExpensesPaidCashFlowStatement:
        """
        Cash paid out for underwriting expenses, such as the acquisition of new and renewal insurance contracts, in operating cash flow,
        using the direct method. This item is usually only available for insurance industry
        """
        ...

    @OtherUnderwritingExpensesPaid.setter
    def OtherUnderwritingExpensesPaid(self, value: QuantConnect.Data.Fundamental.OtherUnderwritingExpensesPaidCashFlowStatement):
        """
        Cash paid out for underwriting expenses, such as the acquisition of new and renewal insurance contracts, in operating cash flow,
        using the direct method. This item is usually only available for insurance industry
        """
        ...

    @property
    def CashDividendsForMinorities(self) -> QuantConnect.Data.Fundamental.CashDividendsForMinoritiesCashFlowStatement:
        """Cash Distribution of earnings to Minority Stockholders."""
        ...

    @CashDividendsForMinorities.setter
    def CashDividendsForMinorities(self, value: QuantConnect.Data.Fundamental.CashDividendsForMinoritiesCashFlowStatement):
        """Cash Distribution of earnings to Minority Stockholders."""
        ...

    @property
    def CFFileDate(self) -> datetime.datetime:
        """Filing date of the Cash Flow Statement."""
        ...

    @CFFileDate.setter
    def CFFileDate(self, value: datetime.datetime):
        """Filing date of the Cash Flow Statement."""
        ...

    @property
    def CashGeneratedfromOperatingActivities(self) -> QuantConnect.Data.Fundamental.CashGeneratedfromOperatingActivitiesCashFlowStatement:
        """
        The net cash from an entity's operating activities before real cash inflow or outflow for Dividend, Interest, Tax, or other unclassified
        operating activities.
        """
        ...

    @CashGeneratedfromOperatingActivities.setter
    def CashGeneratedfromOperatingActivities(self, value: QuantConnect.Data.Fundamental.CashGeneratedfromOperatingActivitiesCashFlowStatement):
        """
        The net cash from an entity's operating activities before real cash inflow or outflow for Dividend, Interest, Tax, or other unclassified
        operating activities.
        """
        ...

    @property
    def FundFromOperation(self) -> QuantConnect.Data.Fundamental.FundFromOperationCashFlowStatement:
        """
        Funds from operations; populated only for real estate investment trusts (REITs), defined as the sum of net income, gain/loss
        (realized and unrealized) on investment securities, asset impairment charge, depreciation and amortization and gain/ loss on the
        sale of business and property plant and equipment.
        """
        ...

    @FundFromOperation.setter
    def FundFromOperation(self, value: QuantConnect.Data.Fundamental.FundFromOperationCashFlowStatement):
        """
        Funds from operations; populated only for real estate investment trusts (REITs), defined as the sum of net income, gain/loss
        (realized and unrealized) on investment securities, asset impairment charge, depreciation and amortization and gain/ loss on the
        sale of business and property plant and equipment.
        """
        ...

    @property
    def NetInvestmentPropertiesPurchaseAndSale(self) -> QuantConnect.Data.Fundamental.NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement:
        """Net increase or decrease in cash due to purchases or sales of investment properties during the accounting period."""
        ...

    @NetInvestmentPropertiesPurchaseAndSale.setter
    def NetInvestmentPropertiesPurchaseAndSale(self, value: QuantConnect.Data.Fundamental.NetInvestmentPropertiesPurchaseAndSaleCashFlowStatement):
        """Net increase or decrease in cash due to purchases or sales of investment properties during the accounting period."""
        ...

    @property
    def PurchaseOfInvestmentProperties(self) -> QuantConnect.Data.Fundamental.PurchaseOfInvestmentPropertiesCashFlowStatement:
        """Cash outflow for purchases of investment properties during the accounting period."""
        ...

    @PurchaseOfInvestmentProperties.setter
    def PurchaseOfInvestmentProperties(self, value: QuantConnect.Data.Fundamental.PurchaseOfInvestmentPropertiesCashFlowStatement):
        """Cash outflow for purchases of investment properties during the accounting period."""
        ...

    @property
    def SaleOfInvestmentProperties(self) -> QuantConnect.Data.Fundamental.SaleOfInvestmentPropertiesCashFlowStatement:
        """Cash inflow from sale of investment properties during the accounting period."""
        ...

    @SaleOfInvestmentProperties.setter
    def SaleOfInvestmentProperties(self, value: QuantConnect.Data.Fundamental.SaleOfInvestmentPropertiesCashFlowStatement):
        """Cash inflow from sale of investment properties during the accounting period."""
        ...

    @property
    def OtherCashAdjustIncludedIntoChangeinCash(self) -> QuantConnect.Data.Fundamental.OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement:
        """Other cash adjustments included in change in cash not categorized above."""
        ...

    @OtherCashAdjustIncludedIntoChangeinCash.setter
    def OtherCashAdjustIncludedIntoChangeinCash(self, value: QuantConnect.Data.Fundamental.OtherCashAdjustIncludedIntoChangeinCashCashFlowStatement):
        """Other cash adjustments included in change in cash not categorized above."""
        ...

    @property
    def OtherCashAdjustExcludeFromChangeinCash(self) -> QuantConnect.Data.Fundamental.OtherCashAdjustExcludeFromChangeinCashCashFlowStatement:
        """Other changes to cash and cash equivalents during the accounting period."""
        ...

    @OtherCashAdjustExcludeFromChangeinCash.setter
    def OtherCashAdjustExcludeFromChangeinCash(self, value: QuantConnect.Data.Fundamental.OtherCashAdjustExcludeFromChangeinCashCashFlowStatement):
        """Other changes to cash and cash equivalents during the accounting period."""
        ...

    @property
    def ChangeinCashSupplementalAsReported(self) -> QuantConnect.Data.Fundamental.ChangeinCashSupplementalAsReportedCashFlowStatement:
        """
        The change in cash flow from the previous period to the current, as reported by the company, may be the same or not the same as
        Morningstar's standardized definition. It is a supplemental value which would be reported outside consolidated statements.
        """
        ...

    @ChangeinCashSupplementalAsReported.setter
    def ChangeinCashSupplementalAsReported(self, value: QuantConnect.Data.Fundamental.ChangeinCashSupplementalAsReportedCashFlowStatement):
        """
        The change in cash flow from the previous period to the current, as reported by the company, may be the same or not the same as
        Morningstar's standardized definition. It is a supplemental value which would be reported outside consolidated statements.
        """
        ...

    def __init__(self) -> None:
        """Creates an instance of the CashFlowStatement class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.CashFlowStatement) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class FinancialStatements(System.Object):
    """Definition of the FinancialStatements class"""

    @property
    def PeriodEndingDate(self) -> datetime.datetime:
        """The exact date that is given in the financial statements for each quarter's end."""
        ...

    @PeriodEndingDate.setter
    def PeriodEndingDate(self, value: datetime.datetime):
        """The exact date that is given in the financial statements for each quarter's end."""
        ...

    @property
    def FileDate(self) -> datetime.datetime:
        """Specific date on which a company released its filing to the public."""
        ...

    @FileDate.setter
    def FileDate(self, value: datetime.datetime):
        """Specific date on which a company released its filing to the public."""
        ...

    @property
    def AccessionNumber(self) -> str:
        """The accession number is a unique number that EDGAR assigns to each submission as the submission is received."""
        ...

    @AccessionNumber.setter
    def AccessionNumber(self, value: str):
        """The accession number is a unique number that EDGAR assigns to each submission as the submission is received."""
        ...

    @property
    def FormType(self) -> str:
        """The type of filing of the report: for instance, 10-K (annual report) or 10-Q (quarterly report)."""
        ...

    @FormType.setter
    def FormType(self, value: str):
        """The type of filing of the report: for instance, 10-K (annual report) or 10-Q (quarterly report)."""
        ...

    @property
    def PeriodAuditor(self) -> str:
        """The name of the auditor that performed the financial statement audit for the given period."""
        ...

    @PeriodAuditor.setter
    def PeriodAuditor(self, value: str):
        """The name of the auditor that performed the financial statement audit for the given period."""
        ...

    @property
    def AuditorReportStatus(self) -> str:
        """
        Auditor opinion code will be one of the following for each annual period:
        Code Meaning
        UQ Unqualified Opinion
        UE Unqualified Opinion with Explanation
        QM Qualified - Due to change in accounting method
        QL Qualified - Due to litigation
        OT Qualified Opinion - Other
        AO Adverse Opinion
        DS Disclaim an opinion
        UA Unaudited
        """
        ...

    @AuditorReportStatus.setter
    def AuditorReportStatus(self, value: str):
        """
        Auditor opinion code will be one of the following for each annual period:
        Code Meaning
        UQ Unqualified Opinion
        UE Unqualified Opinion with Explanation
        QM Qualified - Due to change in accounting method
        QL Qualified - Due to litigation
        OT Qualified Opinion - Other
        AO Adverse Opinion
        DS Disclaim an opinion
        UA Unaudited
        """
        ...

    @property
    def InventoryValuationMethod(self) -> str:
        """
        Which method of inventory valuation was used - LIFO, FIFO, Average, Standard costs, Net realizable value, Others, LIFO and FIFO,
        FIFO and Average, FIFO and other, LIFO and Average, LIFO and other, Average and other, 3 or more methods, None
        """
        ...

    @InventoryValuationMethod.setter
    def InventoryValuationMethod(self, value: str):
        """
        Which method of inventory valuation was used - LIFO, FIFO, Average, Standard costs, Net realizable value, Others, LIFO and FIFO,
        FIFO and Average, FIFO and other, LIFO and Average, LIFO and other, Average and other, 3 or more methods, None
        """
        ...

    @property
    def NumberOfShareHolders(self) -> int:
        """The number of shareholders on record"""
        ...

    @NumberOfShareHolders.setter
    def NumberOfShareHolders(self, value: int):
        """The number of shareholders on record"""
        ...

    @property
    def TotalRiskBasedCapital(self) -> QuantConnect.Data.Fundamental.TotalRiskBasedCapital:
        """
        The sum of Tier 1 and Tier 2 Capital. Tier 1 capital consists of common shareholders equity, perpetual preferred shareholders equity
        with non-cumulative dividends, retained earnings, and minority interests in the equity accounts of consolidated subsidiaries. Tier 2
        capital consists of subordinated debt, intermediate-term preferred stock, cumulative and long-term preferred stock, and a portion of
        a bank's allowance for loan and lease losses.
        """
        ...

    @TotalRiskBasedCapital.setter
    def TotalRiskBasedCapital(self, value: QuantConnect.Data.Fundamental.TotalRiskBasedCapital):
        """
        The sum of Tier 1 and Tier 2 Capital. Tier 1 capital consists of common shareholders equity, perpetual preferred shareholders equity
        with non-cumulative dividends, retained earnings, and minority interests in the equity accounts of consolidated subsidiaries. Tier 2
        capital consists of subordinated debt, intermediate-term preferred stock, cumulative and long-term preferred stock, and a portion of
        a bank's allowance for loan and lease losses.
        """
        ...

    @property
    def PeriodType(self) -> str:
        """
        The nature of the period covered by an individual set of financial results. The output can be: Quarter, Semi-annual or Annual.
        Assuming a 12-month fiscal year, quarter typically covers a three-month period, semi-annual a six-month period, and annual a
        twelve-month period. Annual could cover results collected either from preliminary results or an annual report
        """
        ...

    @PeriodType.setter
    def PeriodType(self, value: str):
        """
        The nature of the period covered by an individual set of financial results. The output can be: Quarter, Semi-annual or Annual.
        Assuming a 12-month fiscal year, quarter typically covers a three-month period, semi-annual a six-month period, and annual a
        twelve-month period. Annual could cover results collected either from preliminary results or an annual report
        """
        ...

    @property
    def IncomeStatement(self) -> QuantConnect.Data.Fundamental.IncomeStatement:
        """The instance of the IncomeStatement class"""
        ...

    @IncomeStatement.setter
    def IncomeStatement(self, value: QuantConnect.Data.Fundamental.IncomeStatement):
        """The instance of the IncomeStatement class"""
        ...

    @property
    def BalanceSheet(self) -> QuantConnect.Data.Fundamental.BalanceSheet:
        """The instance of the BalanceSheet class"""
        ...

    @BalanceSheet.setter
    def BalanceSheet(self, value: QuantConnect.Data.Fundamental.BalanceSheet):
        """The instance of the BalanceSheet class"""
        ...

    @property
    def CashFlowStatement(self) -> QuantConnect.Data.Fundamental.CashFlowStatement:
        """The instance of the CashFlowStatement class"""
        ...

    @CashFlowStatement.setter
    def CashFlowStatement(self, value: QuantConnect.Data.Fundamental.CashFlowStatement):
        """The instance of the CashFlowStatement class"""
        ...

    def __init__(self) -> None:
        """Creates an instance of the FinancialStatements class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.FinancialStatements) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class BasicContinuousOperations(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Basic EPS from Continuing Operations is the earnings from continuing operations reported by the company divided by the weighted
    average number of common shares outstanding.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BasicContinuousOperations class"""
        ...


class BasicDiscontinuousOperations(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Basic EPS from Discontinued Operations is the earnings from discontinued operations reported by the company divided by the
    weighted average number of common shares outstanding. This only includes gain or loss from discontinued operations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BasicDiscontinuousOperations class"""
        ...


class BasicExtraordinary(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Basic EPS from the Extraordinary Gains/Losses is the earnings attributable to the gains or losses (during the reporting period) from
    extraordinary items divided by the weighted average number of common shares outstanding.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BasicExtraordinary class"""
        ...


class BasicAccountingChange(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Basic EPS from the Cumulative Effect of Accounting Change is the earnings attributable to the accounting change (during the
    reporting period) divided by the weighted average number of common shares outstanding.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BasicAccountingChange class"""
        ...


class BasicEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Basic EPS is the bottom line net income divided by the weighted average number of common shares outstanding."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BasicEPS class"""
        ...


class DilutedContinuousOperations(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Diluted EPS from Continuing Operations is the earnings from continuing operations divided by the common shares outstanding
    adjusted for the assumed conversion of all potentially dilutive securities.  Securities having a dilutive effect may include convertible
    debentures, warrants, options, and convertible preferred stock.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedContinuousOperations class"""
        ...


class DilutedDiscontinuousOperations(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Diluted EPS from Discontinued Operations is the earnings from discontinued operations divided by the common shares outstanding
    adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible
    debentures, warrants, options, and convertible preferred stock. This only includes gain or loss from discontinued operations.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedDiscontinuousOperations class"""
        ...


class DilutedExtraordinary(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Diluted EPS from Extraordinary Gain/Losses is the gain or loss from extraordinary items divided by the common shares outstanding
    adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible
    debentures, warrants, options, and convertible preferred stock.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedExtraordinary class"""
        ...


class DilutedAccountingChange(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Diluted EPS from Cumulative Effect Accounting Changes is the earnings from accounting changes (in the reporting period) divided
    by the common shares outstanding adjusted for the assumed conversion of all potentially dilutive securities. Securities having a
    dilutive effect may include convertible debentures, warrants, options, and convertible preferred stock.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedAccountingChange class"""
        ...


class DilutedEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Diluted EPS is the bottom line net income divided by the common shares outstanding adjusted for the assumed conversion of all
    potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants, options, and
    convertible preferred stock. This value will be derived when not reported for the fourth quarter and will be less than or equal to
    Basic EPS.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedEPS class"""
        ...


class BasicAverageShares(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The shares outstanding used to calculate Basic EPS, which is the weighted average common share outstanding through the whole
    accounting PeriodAsByte.  Note: If Basic Average Shares are not presented by the firm in the Income Statement, this data point will be
    null.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BasicAverageShares class"""
        ...


class DilutedAverageShares(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The shares outstanding used to calculate the diluted EPS, assuming the conversion of all convertible securities and the exercise of
    warrants or stock options. It is the weighted average diluted share outstanding through the whole accounting PeriodAsByte.  Note: If
    Diluted Average Shares are not presented by the firm in the Income Statement and Basic Average Shares are presented, Diluted
    Average Shares will equal Basic Average Shares.  However, if neither value is presented by the firm, Diluted Average Shares will be
    null.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedAverageShares class"""
        ...


class DividendPerShare(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The amount of dividend that a stockholder will receive for each share of stock held. It can be calculated by taking the total amount
    of dividends paid and dividing it by the total shares outstanding. Dividend per share = total dividend payment/total number of
    outstanding shares
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DividendPerShare class"""
        ...


class BasicEPSOtherGainsLosses(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Basic EPS from the Other Gains/Losses is the earnings attributable to the other gains/losses (during the reporting period) divided by
    the weighted average number of common shares outstanding.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BasicEPSOtherGainsLosses class"""
        ...


class ContinuingAndDiscontinuedBasicEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Basic EPS from Continuing Operations plus Basic EPS from Discontinued Operations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ContinuingAndDiscontinuedBasicEPS class"""
        ...


class TaxLossCarryforwardBasicEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The earnings attributable to the tax loss carry forward (during the reporting period)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxLossCarryforwardBasicEPS class"""
        ...


class DilutedEPSOtherGainsLosses(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The earnings from gains and losses (in the reporting period) divided by the common shares outstanding adjusted for the assumed
    conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants,
    options, convertible preferred stock, etc.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedEPSOtherGainsLosses class"""
        ...


class ContinuingAndDiscontinuedDilutedEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Diluted EPS from Continuing Operations plus Diluted EPS from Discontinued Operations."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ContinuingAndDiscontinuedDilutedEPS class"""
        ...


class TaxLossCarryforwardDilutedEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The earnings from any tax loss carry forward (in the reporting period)."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxLossCarryforwardDilutedEPS class"""
        ...


class NormalizedBasicEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The basic normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with a
    more accurate measure of the company's true earnings. Normalized Earnings / Basic Weighted Average Shares Outstanding.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedBasicEPS class"""
        ...


class NormalizedDilutedEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The diluted normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with
    a more accurate measure of the company's true earnings. Normalized Earnings / Diluted Weighted Average Shares Outstanding.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedDilutedEPS class"""
        ...


class TotalDividendPerShare(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total Dividend Per Share is cash dividends and special cash dividends paid per share over a certain period of time."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalDividendPerShare class"""
        ...


class ReportedNormalizedBasicEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Normalized Basic EPS as reported by the company in the financial statements."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReportedNormalizedBasicEPS class"""
        ...


class ReportedNormalizedDilutedEPS(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Normalized Diluted EPS as reported by the company in the financial statements."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReportedNormalizedDilutedEPS class"""
        ...


class DividendCoverageRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Reflects a firm's capacity to pay a dividend, and is defined as Earnings Per Share / Dividend Per Share"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    @property
    def TwelveMonths(self) -> float:
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    @TwelveMonths.setter
    def TwelveMonths(self, value: float):
        """Gets/sets the TwelveMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DividendCoverageRatio class"""
        ...


class EarningReports(System.Object):
    """Definition of the EarningReports class"""

    @property
    def PeriodEndingDate(self) -> datetime.datetime:
        """The exact date that is given in the financial statements for each quarter's end."""
        ...

    @PeriodEndingDate.setter
    def PeriodEndingDate(self, value: datetime.datetime):
        """The exact date that is given in the financial statements for each quarter's end."""
        ...

    @property
    def FileDate(self) -> datetime.datetime:
        """Specific date on which a company released its filing to the public."""
        ...

    @FileDate.setter
    def FileDate(self, value: datetime.datetime):
        """Specific date on which a company released its filing to the public."""
        ...

    @property
    def AccessionNumber(self) -> str:
        """The accession number is a unique number that EDGAR assigns to each submission as the submission is received."""
        ...

    @AccessionNumber.setter
    def AccessionNumber(self, value: str):
        """The accession number is a unique number that EDGAR assigns to each submission as the submission is received."""
        ...

    @property
    def FormType(self) -> str:
        """The type of filing of the report: for instance, 10-K (annual report) or 10-Q (quarterly report)."""
        ...

    @FormType.setter
    def FormType(self, value: str):
        """The type of filing of the report: for instance, 10-K (annual report) or 10-Q (quarterly report)."""
        ...

    @property
    def BasicContinuousOperations(self) -> QuantConnect.Data.Fundamental.BasicContinuousOperations:
        """
        Basic EPS from Continuing Operations is the earnings from continuing operations reported by the company divided by the weighted
        average number of common shares outstanding.
        """
        ...

    @BasicContinuousOperations.setter
    def BasicContinuousOperations(self, value: QuantConnect.Data.Fundamental.BasicContinuousOperations):
        """
        Basic EPS from Continuing Operations is the earnings from continuing operations reported by the company divided by the weighted
        average number of common shares outstanding.
        """
        ...

    @property
    def BasicDiscontinuousOperations(self) -> QuantConnect.Data.Fundamental.BasicDiscontinuousOperations:
        """
        Basic EPS from Discontinued Operations is the earnings from discontinued operations reported by the company divided by the
        weighted average number of common shares outstanding. This only includes gain or loss from discontinued operations.
        """
        ...

    @BasicDiscontinuousOperations.setter
    def BasicDiscontinuousOperations(self, value: QuantConnect.Data.Fundamental.BasicDiscontinuousOperations):
        """
        Basic EPS from Discontinued Operations is the earnings from discontinued operations reported by the company divided by the
        weighted average number of common shares outstanding. This only includes gain or loss from discontinued operations.
        """
        ...

    @property
    def BasicExtraordinary(self) -> QuantConnect.Data.Fundamental.BasicExtraordinary:
        """
        Basic EPS from the Extraordinary Gains/Losses is the earnings attributable to the gains or losses (during the reporting period) from
        extraordinary items divided by the weighted average number of common shares outstanding.
        """
        ...

    @BasicExtraordinary.setter
    def BasicExtraordinary(self, value: QuantConnect.Data.Fundamental.BasicExtraordinary):
        """
        Basic EPS from the Extraordinary Gains/Losses is the earnings attributable to the gains or losses (during the reporting period) from
        extraordinary items divided by the weighted average number of common shares outstanding.
        """
        ...

    @property
    def BasicAccountingChange(self) -> QuantConnect.Data.Fundamental.BasicAccountingChange:
        """
        Basic EPS from the Cumulative Effect of Accounting Change is the earnings attributable to the accounting change (during the
        reporting period) divided by the weighted average number of common shares outstanding.
        """
        ...

    @BasicAccountingChange.setter
    def BasicAccountingChange(self, value: QuantConnect.Data.Fundamental.BasicAccountingChange):
        """
        Basic EPS from the Cumulative Effect of Accounting Change is the earnings attributable to the accounting change (during the
        reporting period) divided by the weighted average number of common shares outstanding.
        """
        ...

    @property
    def BasicEPS(self) -> QuantConnect.Data.Fundamental.BasicEPS:
        """Basic EPS is the bottom line net income divided by the weighted average number of common shares outstanding."""
        ...

    @BasicEPS.setter
    def BasicEPS(self, value: QuantConnect.Data.Fundamental.BasicEPS):
        """Basic EPS is the bottom line net income divided by the weighted average number of common shares outstanding."""
        ...

    @property
    def DilutedContinuousOperations(self) -> QuantConnect.Data.Fundamental.DilutedContinuousOperations:
        """
        Diluted EPS from Continuing Operations is the earnings from continuing operations divided by the common shares outstanding
        adjusted for the assumed conversion of all potentially dilutive securities.  Securities having a dilutive effect may include convertible
        debentures, warrants, options, and convertible preferred stock.
        """
        ...

    @DilutedContinuousOperations.setter
    def DilutedContinuousOperations(self, value: QuantConnect.Data.Fundamental.DilutedContinuousOperations):
        """
        Diluted EPS from Continuing Operations is the earnings from continuing operations divided by the common shares outstanding
        adjusted for the assumed conversion of all potentially dilutive securities.  Securities having a dilutive effect may include convertible
        debentures, warrants, options, and convertible preferred stock.
        """
        ...

    @property
    def DilutedDiscontinuousOperations(self) -> QuantConnect.Data.Fundamental.DilutedDiscontinuousOperations:
        """
        Diluted EPS from Discontinued Operations is the earnings from discontinued operations divided by the common shares outstanding
        adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible
        debentures, warrants, options, and convertible preferred stock. This only includes gain or loss from discontinued operations.
        """
        ...

    @DilutedDiscontinuousOperations.setter
    def DilutedDiscontinuousOperations(self, value: QuantConnect.Data.Fundamental.DilutedDiscontinuousOperations):
        """
        Diluted EPS from Discontinued Operations is the earnings from discontinued operations divided by the common shares outstanding
        adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible
        debentures, warrants, options, and convertible preferred stock. This only includes gain or loss from discontinued operations.
        """
        ...

    @property
    def DilutedExtraordinary(self) -> QuantConnect.Data.Fundamental.DilutedExtraordinary:
        """
        Diluted EPS from Extraordinary Gain/Losses is the gain or loss from extraordinary items divided by the common shares outstanding
        adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible
        debentures, warrants, options, and convertible preferred stock.
        """
        ...

    @DilutedExtraordinary.setter
    def DilutedExtraordinary(self, value: QuantConnect.Data.Fundamental.DilutedExtraordinary):
        """
        Diluted EPS from Extraordinary Gain/Losses is the gain or loss from extraordinary items divided by the common shares outstanding
        adjusted for the assumed conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible
        debentures, warrants, options, and convertible preferred stock.
        """
        ...

    @property
    def DilutedAccountingChange(self) -> QuantConnect.Data.Fundamental.DilutedAccountingChange:
        """
        Diluted EPS from Cumulative Effect Accounting Changes is the earnings from accounting changes (in the reporting period) divided
        by the common shares outstanding adjusted for the assumed conversion of all potentially dilutive securities. Securities having a
        dilutive effect may include convertible debentures, warrants, options, and convertible preferred stock.
        """
        ...

    @DilutedAccountingChange.setter
    def DilutedAccountingChange(self, value: QuantConnect.Data.Fundamental.DilutedAccountingChange):
        """
        Diluted EPS from Cumulative Effect Accounting Changes is the earnings from accounting changes (in the reporting period) divided
        by the common shares outstanding adjusted for the assumed conversion of all potentially dilutive securities. Securities having a
        dilutive effect may include convertible debentures, warrants, options, and convertible preferred stock.
        """
        ...

    @property
    def DilutedEPS(self) -> QuantConnect.Data.Fundamental.DilutedEPS:
        """
        Diluted EPS is the bottom line net income divided by the common shares outstanding adjusted for the assumed conversion of all
        potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants, options, and
        convertible preferred stock. This value will be derived when not reported for the fourth quarter and will be less than or equal to
        Basic EPS.
        """
        ...

    @DilutedEPS.setter
    def DilutedEPS(self, value: QuantConnect.Data.Fundamental.DilutedEPS):
        """
        Diluted EPS is the bottom line net income divided by the common shares outstanding adjusted for the assumed conversion of all
        potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants, options, and
        convertible preferred stock. This value will be derived when not reported for the fourth quarter and will be less than or equal to
        Basic EPS.
        """
        ...

    @property
    def BasicAverageShares(self) -> QuantConnect.Data.Fundamental.BasicAverageShares:
        """
        The shares outstanding used to calculate Basic EPS, which is the weighted average common share outstanding through the whole
        accounting period.  Note: If Basic Average Shares are not presented by the firm in the Income Statement, this data point will be
        null.
        """
        ...

    @BasicAverageShares.setter
    def BasicAverageShares(self, value: QuantConnect.Data.Fundamental.BasicAverageShares):
        """
        The shares outstanding used to calculate Basic EPS, which is the weighted average common share outstanding through the whole
        accounting period.  Note: If Basic Average Shares are not presented by the firm in the Income Statement, this data point will be
        null.
        """
        ...

    @property
    def DilutedAverageShares(self) -> QuantConnect.Data.Fundamental.DilutedAverageShares:
        """
        The shares outstanding used to calculate the diluted EPS, assuming the conversion of all convertible securities and the exercise of
        warrants or stock options. It is the weighted average diluted share outstanding through the whole accounting period.  Note: If
        Diluted Average Shares are not presented by the firm in the Income Statement and Basic Average Shares are presented, Diluted
        Average Shares will equal Basic Average Shares.  However, if neither value is presented by the firm, Diluted Average Shares will be
        null.
        """
        ...

    @DilutedAverageShares.setter
    def DilutedAverageShares(self, value: QuantConnect.Data.Fundamental.DilutedAverageShares):
        """
        The shares outstanding used to calculate the diluted EPS, assuming the conversion of all convertible securities and the exercise of
        warrants or stock options. It is the weighted average diluted share outstanding through the whole accounting period.  Note: If
        Diluted Average Shares are not presented by the firm in the Income Statement and Basic Average Shares are presented, Diluted
        Average Shares will equal Basic Average Shares.  However, if neither value is presented by the firm, Diluted Average Shares will be
        null.
        """
        ...

    @property
    def DividendPerShare(self) -> QuantConnect.Data.Fundamental.DividendPerShare:
        """
        The amount of dividend that a stockholder will receive for each share of stock held. It can be calculated by taking the total amount
        of dividends paid and dividing it by the total shares outstanding. Dividend per share = total dividend payment/total number of
        outstanding shares
        """
        ...

    @DividendPerShare.setter
    def DividendPerShare(self, value: QuantConnect.Data.Fundamental.DividendPerShare):
        """
        The amount of dividend that a stockholder will receive for each share of stock held. It can be calculated by taking the total amount
        of dividends paid and dividing it by the total shares outstanding. Dividend per share = total dividend payment/total number of
        outstanding shares
        """
        ...

    @property
    def BasicEPSOtherGainsLosses(self) -> QuantConnect.Data.Fundamental.BasicEPSOtherGainsLosses:
        """
        Basic EPS from the Other Gains/Losses is the earnings attributable to the other gains/losses (during the reporting period) divided by
        the weighted average number of common shares outstanding.
        """
        ...

    @BasicEPSOtherGainsLosses.setter
    def BasicEPSOtherGainsLosses(self, value: QuantConnect.Data.Fundamental.BasicEPSOtherGainsLosses):
        """
        Basic EPS from the Other Gains/Losses is the earnings attributable to the other gains/losses (during the reporting period) divided by
        the weighted average number of common shares outstanding.
        """
        ...

    @property
    def ContinuingAndDiscontinuedBasicEPS(self) -> QuantConnect.Data.Fundamental.ContinuingAndDiscontinuedBasicEPS:
        """Basic EPS from Continuing Operations plus Basic EPS from Discontinued Operations."""
        ...

    @ContinuingAndDiscontinuedBasicEPS.setter
    def ContinuingAndDiscontinuedBasicEPS(self, value: QuantConnect.Data.Fundamental.ContinuingAndDiscontinuedBasicEPS):
        """Basic EPS from Continuing Operations plus Basic EPS from Discontinued Operations."""
        ...

    @property
    def TaxLossCarryforwardBasicEPS(self) -> QuantConnect.Data.Fundamental.TaxLossCarryforwardBasicEPS:
        """The earnings attributable to the tax loss carry forward (during the reporting period)."""
        ...

    @TaxLossCarryforwardBasicEPS.setter
    def TaxLossCarryforwardBasicEPS(self, value: QuantConnect.Data.Fundamental.TaxLossCarryforwardBasicEPS):
        """The earnings attributable to the tax loss carry forward (during the reporting period)."""
        ...

    @property
    def DilutedEPSOtherGainsLosses(self) -> QuantConnect.Data.Fundamental.DilutedEPSOtherGainsLosses:
        """
        The earnings from gains and losses (in the reporting period) divided by the common shares outstanding adjusted for the assumed
        conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants,
        options, convertible preferred stock, etc.
        """
        ...

    @DilutedEPSOtherGainsLosses.setter
    def DilutedEPSOtherGainsLosses(self, value: QuantConnect.Data.Fundamental.DilutedEPSOtherGainsLosses):
        """
        The earnings from gains and losses (in the reporting period) divided by the common shares outstanding adjusted for the assumed
        conversion of all potentially dilutive securities. Securities having a dilutive effect may include convertible debentures, warrants,
        options, convertible preferred stock, etc.
        """
        ...

    @property
    def ContinuingAndDiscontinuedDilutedEPS(self) -> QuantConnect.Data.Fundamental.ContinuingAndDiscontinuedDilutedEPS:
        """Diluted EPS from Continuing Operations plus Diluted EPS from Discontinued Operations."""
        ...

    @ContinuingAndDiscontinuedDilutedEPS.setter
    def ContinuingAndDiscontinuedDilutedEPS(self, value: QuantConnect.Data.Fundamental.ContinuingAndDiscontinuedDilutedEPS):
        """Diluted EPS from Continuing Operations plus Diluted EPS from Discontinued Operations."""
        ...

    @property
    def TaxLossCarryforwardDilutedEPS(self) -> QuantConnect.Data.Fundamental.TaxLossCarryforwardDilutedEPS:
        """The earnings from any tax loss carry forward (in the reporting period)."""
        ...

    @TaxLossCarryforwardDilutedEPS.setter
    def TaxLossCarryforwardDilutedEPS(self, value: QuantConnect.Data.Fundamental.TaxLossCarryforwardDilutedEPS):
        """The earnings from any tax loss carry forward (in the reporting period)."""
        ...

    @property
    def NormalizedBasicEPS(self) -> QuantConnect.Data.Fundamental.NormalizedBasicEPS:
        """
        The basic normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with a
        more accurate measure of the company's true earnings. Normalized Earnings / Basic Weighted Average Shares Outstanding.
        """
        ...

    @NormalizedBasicEPS.setter
    def NormalizedBasicEPS(self, value: QuantConnect.Data.Fundamental.NormalizedBasicEPS):
        """
        The basic normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with a
        more accurate measure of the company's true earnings. Normalized Earnings / Basic Weighted Average Shares Outstanding.
        """
        ...

    @property
    def NormalizedDilutedEPS(self) -> QuantConnect.Data.Fundamental.NormalizedDilutedEPS:
        """
        The diluted normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with
        a more accurate measure of the company's true earnings. Normalized Earnings / Diluted Weighted Average Shares Outstanding.
        """
        ...

    @NormalizedDilutedEPS.setter
    def NormalizedDilutedEPS(self, value: QuantConnect.Data.Fundamental.NormalizedDilutedEPS):
        """
        The diluted normalized earnings per share. Normalized EPS removes onetime and unusual items from EPS, to provide investors with
        a more accurate measure of the company's true earnings. Normalized Earnings / Diluted Weighted Average Shares Outstanding.
        """
        ...

    @property
    def TotalDividendPerShare(self) -> QuantConnect.Data.Fundamental.TotalDividendPerShare:
        """Total Dividend Per Share is cash dividends and special cash dividends paid per share over a certain period of time."""
        ...

    @TotalDividendPerShare.setter
    def TotalDividendPerShare(self, value: QuantConnect.Data.Fundamental.TotalDividendPerShare):
        """Total Dividend Per Share is cash dividends and special cash dividends paid per share over a certain period of time."""
        ...

    @property
    def ReportedNormalizedBasicEPS(self) -> QuantConnect.Data.Fundamental.ReportedNormalizedBasicEPS:
        """Normalized Basic EPS as reported by the company in the financial statements."""
        ...

    @ReportedNormalizedBasicEPS.setter
    def ReportedNormalizedBasicEPS(self, value: QuantConnect.Data.Fundamental.ReportedNormalizedBasicEPS):
        """Normalized Basic EPS as reported by the company in the financial statements."""
        ...

    @property
    def ReportedNormalizedDilutedEPS(self) -> QuantConnect.Data.Fundamental.ReportedNormalizedDilutedEPS:
        """Normalized Diluted EPS as reported by the company in the financial statements."""
        ...

    @ReportedNormalizedDilutedEPS.setter
    def ReportedNormalizedDilutedEPS(self, value: QuantConnect.Data.Fundamental.ReportedNormalizedDilutedEPS):
        """Normalized Diluted EPS as reported by the company in the financial statements."""
        ...

    @property
    def DividendCoverageRatio(self) -> QuantConnect.Data.Fundamental.DividendCoverageRatio:
        """Reflects a firm's capacity to pay a dividend, and is defined as Earnings Per Share / Dividend Per Share"""
        ...

    @DividendCoverageRatio.setter
    def DividendCoverageRatio(self, value: QuantConnect.Data.Fundamental.DividendCoverageRatio):
        """Reflects a firm's capacity to pay a dividend, and is defined as Earnings Per Share / Dividend Per Share"""
        ...

    @property
    def PeriodType(self) -> str:
        """
        The nature of the period covered by an individual set of financial results. The output can be: Quarter, Semi-annual or Annual.
        Assuming a 12-month fiscal year, quarter typically covers a three-month period, semi-annual a six-month period, and annual a
        twelve-month period. Annual could cover results collected either from preliminary results or an annual report
        """
        ...

    @PeriodType.setter
    def PeriodType(self, value: str):
        """
        The nature of the period covered by an individual set of financial results. The output can be: Quarter, Semi-annual or Annual.
        Assuming a 12-month fiscal year, quarter typically covers a three-month period, semi-annual a six-month period, and annual a
        twelve-month period. Annual could cover results collected either from preliminary results or an annual report
        """
        ...

    def __init__(self) -> None:
        """Creates an instance of the EarningReports class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.EarningReports) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class RevenueGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's revenue on a percentage basis. Morningstar calculates the growth percentage based on the
    underlying revenue data reported in the Income Statement within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RevenueGrowth class"""
        ...


class OperationIncomeGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's operating income on a percentage basis. Morningstar calculates the growth percentage based on the
    underlying operating income data reported in the Income Statement within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperationIncomeGrowth class"""
        ...


class NetIncomeGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's net income on a percentage basis. Morningstar calculates the growth percentage based on the
    underlying net income data reported in the Income Statement within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeGrowth class"""
        ...


class NetIncomeContOpsGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's net income from continuing operations on a percentage basis. Morningstar calculates the growth
    percentage based on the underlying net income from continuing operations data reported in the Income Statement within the
    company filings or reports. This figure represents the rate of net income growth for parts of the business that will continue to
    generate revenue in the future.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomeContOpsGrowth class"""
        ...


class CFOGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's cash flow from operations on a percentage basis. Morningstar calculates the growth percentage
    based on the underlying cash flow from operations data reported in the Cash Flow Statement within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CFOGrowth class"""
        ...


class FCFGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's free cash flow on a percentage basis. Morningstar calculates the growth percentage based on the
    underlying cash flow from operations and capital expenditures data reported in the Cash Flow Statement within the company filings
    or reports:   Free Cash Flow = Cash flow from operations - Capital Expenditures.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FCFGrowth class"""
        ...


class OperationRevenueGrowth3MonthAvg(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's operating revenue on a percentage basis. Morningstar calculates the growth percentage based on
    the underlying operating revenue data reported in the Income Statement within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperationRevenueGrowth3MonthAvg class"""
        ...


class GrossMargin(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of gross profit to revenue. Morningstar calculates the ratio by using the underlying data reported in the company
    filings or reports:   (Revenue - Cost of Goods Sold) / Revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossMargin class"""
        ...


class OperationMargin(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of operating income to revenue. Morningstar calculates the ratio by using the underlying data reported in the
    company filings or reports:   Operating Income / Revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the OperationMargin class"""
        ...


class PretaxMargin(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of pretax income to revenue. Morningstar calculates the ratio by using the underlying data reported in the
    company filings or reports:   Pretax Income / Revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PretaxMargin class"""
        ...


class NetMargin(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of net income to revenue. Morningstar calculates the ratio by using the underlying data reported in the company
    filings or reports:   Net Income / Revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetMargin class"""
        ...


class TaxRate(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of tax provision to pretax income. Morningstar calculates the ratio by using the underlying data reported in the
    company filings or reports:   Tax Provision / Pretax Income.
    [Note: Valid only when positive pretax income, and positive tax expense (not tax benefit)]
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TaxRate class"""
        ...


class EBITMargin(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of earnings before interest and taxes to revenue. Morningstar calculates the ratio by using the underlying data
    reported in the company filings or reports:   EBIT / Revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EBITMargin class"""
        ...


class EBITDAMargin(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of earnings before interest, taxes and depreciation and amortization to revenue. Morningstar calculates the ratio
    by using the underlying data reported in the company filings or reports:   EBITDA / Revenue.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EBITDAMargin class"""
        ...


class SalesPerEmployee(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of Revenue to Employees. Morningstar calculates the ratio by using the underlying data reported in the company
    filings or reports:     Revenue / Employee Number.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SalesPerEmployee class"""
        ...


class CurrentRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of Current Assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in
    the Balance Sheet within the company filings or reports:     Current Assets / Current Liabilities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentRatio class"""
        ...


class QuickRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of liquid assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in the
    Balance Sheet within the company filings or reports:(Cash, Cash Equivalents, and Short Term Investments + Receivables ) /
    Current Liabilities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the QuickRatio class"""
        ...


class LongTermDebtTotalCapitalRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of Long Term Debt to Total Capital. Morningstar calculates the ratio by using the underlying data reported in the
    Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / (Long-Term Debt And Capital
    Lease Obligation + Total Shareholder's Equity)
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LongTermDebtTotalCapitalRatio class"""
        ...


class InterestCoverage(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of EBIT to Interest Expense. Morningstar calculates the ratio by using the underlying data reported in the Income
    Statement within the company filings or reports:    EBIT / Interest Expense.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InterestCoverage class"""
        ...


class LongTermDebtEquityRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of Long Term Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in
    the Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / Common Equity.
    [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LongTermDebtEquityRatio class"""
        ...


class FinancialLeverage(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of Total Assets to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the
    Balance Sheet within the company filings or reports:    Total Assets / Common Equity.   [Note: Common Equity = Total
    Shareholder's Equity - Preferred Stock]
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FinancialLeverage class"""
        ...


class TotalDebtEquityRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of Total Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the
    Balance Sheet within the company filings or reports: (Current Debt And Current Capital Lease Obligation + Long-Term Debt And
    Long-Term Capital Lease Obligation / Common Equity.   [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalDebtEquityRatio class"""
        ...


class NormalizedNetProfitMargin(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Normalized Income / Total Revenue. A measure of profitability of the company calculated by finding Normalized Net Profit as a
    percentage of Total Revenues.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedNetProfitMargin class"""
        ...


class DaysInSales(QuantConnect.Data.Fundamental.MultiPeriodField):
    """365 / Receivable Turnover"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DaysInSales class"""
        ...


class DaysInInventory(QuantConnect.Data.Fundamental.MultiPeriodField):
    """365 / Inventory turnover"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DaysInInventory class"""
        ...


class DaysInPayment(QuantConnect.Data.Fundamental.MultiPeriodField):
    """365 / Payable turnover"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DaysInPayment class"""
        ...


class CashConversionCycle(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Days In Inventory + Days In Sales - Days In Payment"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashConversionCycle class"""
        ...


class ReceivableTurnover(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Revenue / Average Accounts Receivables"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ReceivableTurnover class"""
        ...


class InventoryTurnover(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cost Of Goods Sold / Average Inventory"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the InventoryTurnover class"""
        ...


class PaymentTurnover(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Cost of Goods Sold / Average Accounts Payables"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PaymentTurnover class"""
        ...


class FixAssetsTuronver(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Revenue / Average PP&E"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FixAssetsTuronver class"""
        ...


class AssetsTurnover(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Revenue / Average Total Assets"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AssetsTurnover class"""
        ...


class ROE(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net Income / Average Total Common Equity"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ROE class"""
        ...


class ROA(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net Income / Average Total Assets"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ROA class"""
        ...


class ROIC(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Net Income / (Total Equity + Long-term Debt and Capital Lease Obligation + Short-term Debt and Capital Lease Obligation)"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ROIC class"""
        ...


class FCFSalesRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Free Cash flow / Revenue"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FCFSalesRatio class"""
        ...


class FCFNetIncomeRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Free Cash Flow / Net Income"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FCFNetIncomeRatio class"""
        ...


class CapExSalesRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Capital Expenditure / Revenue"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CapExSalesRatio class"""
        ...


class DebttoAssets(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is a leverage ratio used to determine how much debt (a sum of long term and current portion of debt) a company has on its
    balance sheet relative to total assets. This ratio examines the percent of the company that is financed by debt.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DebttoAssets class"""
        ...


class CommonEquityToAssets(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is a financial ratio of common stock equity to total assets that indicates the relative proportion of equity used to finance a
    company's assets.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def OneMonth(self) -> float:
        """Gets/sets the OneMonth period value for the field"""
        ...

    @OneMonth.setter
    def OneMonth(self, value: float):
        """Gets/sets the OneMonth period value for the field"""
        ...

    @property
    def TwoMonths(self) -> float:
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @TwoMonths.setter
    def TwoMonths(self, value: float):
        """Gets/sets the TwoMonths period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    @property
    def NineMonths(self) -> float:
        """Gets/sets the NineMonths period value for the field"""
        ...

    @NineMonths.setter
    def NineMonths(self, value: float):
        """Gets/sets the NineMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CommonEquityToAssets class"""
        ...


class CapitalExpenditureAnnual5YrGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is the compound annual growth rate of the company's capital spending over the last 5 years. Capital Spending is the sum of
    the Capital Expenditure items found in the Statement of Cash Flows.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CapitalExpenditureAnnual5YrGrowth class"""
        ...


class GrossProfitAnnual5YrGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """This is the compound annual growth rate of the company's Gross Profit over the last 5 years."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossProfitAnnual5YrGrowth class"""
        ...


class GrossMargin5YrAvg(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is the simple average of the company's Annual Gross Margin over the last 5 years. Gross Margin is Total Revenue minus Cost
    of Goods Sold divided by Total Revenue and is expressed as a percentage.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the GrossMargin5YrAvg class"""
        ...


class PostTaxMargin5YrAvg(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is the simple average of the company's Annual Post Tax Margin over the last 5 years. Post tax margin is Post tax divided by
    total revenue for the same PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PostTaxMargin5YrAvg class"""
        ...


class PreTaxMargin5YrAvg(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is the simple average of the company's Annual Pre Tax Margin over the last 5 years. Pre tax margin is Pre tax divided by total
    revenue for the same PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the PreTaxMargin5YrAvg class"""
        ...


class ProfitMargin5YrAvg(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is the simple average of the company's Annual Net Profit Margin over the last 5 years. Net profit margin is post tax income
    divided by total revenue for the same PeriodAsByte.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ProfitMargin5YrAvg class"""
        ...


class ROE5YrAvg(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is the simple average of the company's ROE over the last 5 years. Return on equity reveals how much profit a company has
    earned in comparison to the total amount of shareholder equity found on the balance sheet.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ROE5YrAvg class"""
        ...


class ROA5YrAvg(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is the simple average of the company's ROA over the last 5 years. Return on asset is calculated by dividing a company's annual
    earnings by its average total assets.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ROA5YrAvg class"""
        ...


class AVG5YrsROIC(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    This is the simple average of the company's ROIC over the last 5 years. Return on invested capital is calculated by taking net
    operating profit after taxes and dividends and dividing by the total amount of capital invested and expressing the result as a
    percentage.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the AVG5YrsROIC class"""
        ...


class NormalizedROIC(QuantConnect.Data.Fundamental.MultiPeriodField):
    """[Normalized Income + (Interest Expense * (1-Tax Rate))]  / Invested Capital"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def SixMonths(self) -> float:
        """Gets/sets the SixMonths period value for the field"""
        ...

    @SixMonths.setter
    def SixMonths(self, value: float):
        """Gets/sets the SixMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedROIC class"""
        ...


class RegressionGrowthOperatingRevenue5Years(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The five-year growth rate of operating revenue, calculated using regression analysis."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RegressionGrowthOperatingRevenue5Years class"""
        ...


class CashRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Indicates a company's short-term liquidity, defined as short term liquid investments (cash, cash equivalents, short term
    investments) divided by current liabilities.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashRatio class"""
        ...


class CashtoTotalAssets(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Represents the percentage of a company's total assets is in cash."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashtoTotalAssets class"""
        ...


class CapitalExpendituretoEBITDA(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Measures the amount a company is investing in its business relative to EBITDA generated in a given PeriodAsByte."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CapitalExpendituretoEBITDA class"""
        ...


class FCFtoCFO(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Indicates the percentage of a company's operating cash flow is free to be invested in its business after capital expenditures."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FCFtoCFO class"""
        ...


class StockholdersEquityGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the stockholder's equity on a percentage basis. Morningstar calculates the growth percentage based on the residual
    interest in the assets of the enterprise that remains after deducting its liabilities reported in the Balance Sheet within the company
    filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the StockholdersEquityGrowth class"""
        ...


class TotalAssetsGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the total assets on a percentage basis. Morningstar calculates the growth percentage based on the total assets
    reported in the Balance Sheet within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalAssetsGrowth class"""
        ...


class TotalLiabilitiesGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the total liabilities on a percentage basis. Morningstar calculates the growth percentage based on the total liabilities
    reported in the Balance Sheet within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalLiabilitiesGrowth class"""
        ...


class TotalDebtEquityRatioGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's total debt to equity ratio on a percentage basis. Morningstar calculates the growth percentage based
    on the total debt divided by the shareholder's equity reported in the Balance Sheet within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the TotalDebtEquityRatioGrowth class"""
        ...


class CashRatioGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's cash ratio on a percentage basis. Morningstar calculates the growth percentage based on the short
    term liquid investments (cash, cash equivalents, short term investments) divided by current liabilities reported in the Balance Sheet
    within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashRatioGrowth class"""
        ...


class EBITDAGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's EBITDA on a percentage basis. Morningstar calculates the growth percentage based on the earnings
    minus expenses (excluding interest, tax, depreciation, and amortization expenses) reported in the Financial Statements within the
    company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EBITDAGrowth class"""
        ...


class CashFlowfromFinancingGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's cash flows from financing on a percentage basis. Morningstar calculates the growth percentage
    based on the financing cash flows reported in the Cash Flow Statement within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFlowfromFinancingGrowth class"""
        ...


class CashFlowfromInvestingGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's cash flows from investing on a percentage basis. Morningstar calculates the growth percentage
    based on the cash flows from investing reported in the Cash Flow Statement within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CashFlowfromInvestingGrowth class"""
        ...


class CapExGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's capital expenditures on a percentage basis. Morningstar calculates the growth percentage based on
    the capital expenditures reported in the Cash Flow Statement within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CapExGrowth class"""
        ...


class CurrentRatioGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's current ratio on a percentage basis. Morningstar calculates the growth percentage based on the
    current assets divided by current liabilities reported in the Balance Sheet within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the CurrentRatioGrowth class"""
        ...


class WorkingCapitalTurnoverRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """Total revenue / working capital (current assets minus current liabilities)"""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the WorkingCapitalTurnoverRatio class"""
        ...


class NetIncomePerEmployee(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Refers to the ratio of Net Income to Employees. Morningstar calculates the ratio by using the underlying data reported in the
    company filings or reports:     Net Income / Employee Number.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NetIncomePerEmployee class"""
        ...


class SolvencyRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    Measure of whether a company's cash flow is sufficient to meet its short-term and long-term debt requirements. The lower this
    ratio is, the greater the probability that the company will be in financial distress. Net Income + Depreciation, Depletion and
    Amortization/ average of annual Total Liabilities over the most recent two periods.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the SolvencyRatio class"""
        ...


class ExpenseRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and
    administrative expenses related to claims such as fees and commissions. A number of 1 or lower is preferred, as this means the
    premiums exceed the expenses. Calculated as: (Deferred Policy Acquisition Amortization Expense+Fees and Commission
    Expense+Other Underwriting Expenses+Selling, General and Administrative) / Net Premiums Earned
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the ExpenseRatio class"""
        ...


class LossRatio(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and the
    expenses related to claims. A number of 1 or lower is preferred, as this means the premiums exceed the expenses. Calculated as:
    Benefits, Claims and Loss Adjustment Expense, Net / Net Premiums Earned
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the LossRatio class"""
        ...


class OperationRatios(System.Object):
    """Definition of the OperationRatios class"""

    @property
    def RevenueGrowth(self) -> QuantConnect.Data.Fundamental.RevenueGrowth:
        """
        The growth in the company's revenue on a percentage basis. Morningstar calculates the growth percentage based on the
        underlying revenue data reported in the Income Statement within the company filings or reports.
        """
        ...

    @RevenueGrowth.setter
    def RevenueGrowth(self, value: QuantConnect.Data.Fundamental.RevenueGrowth):
        """
        The growth in the company's revenue on a percentage basis. Morningstar calculates the growth percentage based on the
        underlying revenue data reported in the Income Statement within the company filings or reports.
        """
        ...

    @property
    def OperationIncomeGrowth(self) -> QuantConnect.Data.Fundamental.OperationIncomeGrowth:
        """
        The growth in the company's operating income on a percentage basis. Morningstar calculates the growth percentage based on the
        underlying operating income data reported in the Income Statement within the company filings or reports.
        """
        ...

    @OperationIncomeGrowth.setter
    def OperationIncomeGrowth(self, value: QuantConnect.Data.Fundamental.OperationIncomeGrowth):
        """
        The growth in the company's operating income on a percentage basis. Morningstar calculates the growth percentage based on the
        underlying operating income data reported in the Income Statement within the company filings or reports.
        """
        ...

    @property
    def NetIncomeGrowth(self) -> QuantConnect.Data.Fundamental.NetIncomeGrowth:
        """
        The growth in the company's net income on a percentage basis. Morningstar calculates the growth percentage based on the
        underlying net income data reported in the Income Statement within the company filings or reports.
        """
        ...

    @NetIncomeGrowth.setter
    def NetIncomeGrowth(self, value: QuantConnect.Data.Fundamental.NetIncomeGrowth):
        """
        The growth in the company's net income on a percentage basis. Morningstar calculates the growth percentage based on the
        underlying net income data reported in the Income Statement within the company filings or reports.
        """
        ...

    @property
    def NetIncomeContOpsGrowth(self) -> QuantConnect.Data.Fundamental.NetIncomeContOpsGrowth:
        """
        The growth in the company's net income from continuing operations on a percentage basis. Morningstar calculates the growth
        percentage based on the underlying net income from continuing operations data reported in the Income Statement within the
        company filings or reports. This figure represents the rate of net income growth for parts of the business that will continue to
        generate revenue in the future.
        """
        ...

    @NetIncomeContOpsGrowth.setter
    def NetIncomeContOpsGrowth(self, value: QuantConnect.Data.Fundamental.NetIncomeContOpsGrowth):
        """
        The growth in the company's net income from continuing operations on a percentage basis. Morningstar calculates the growth
        percentage based on the underlying net income from continuing operations data reported in the Income Statement within the
        company filings or reports. This figure represents the rate of net income growth for parts of the business that will continue to
        generate revenue in the future.
        """
        ...

    @property
    def CFOGrowth(self) -> QuantConnect.Data.Fundamental.CFOGrowth:
        """
        The growth in the company's cash flow from operations on a percentage basis. Morningstar calculates the growth percentage
        based on the underlying cash flow from operations data reported in the Cash Flow Statement within the company filings or reports.
        """
        ...

    @CFOGrowth.setter
    def CFOGrowth(self, value: QuantConnect.Data.Fundamental.CFOGrowth):
        """
        The growth in the company's cash flow from operations on a percentage basis. Morningstar calculates the growth percentage
        based on the underlying cash flow from operations data reported in the Cash Flow Statement within the company filings or reports.
        """
        ...

    @property
    def FCFGrowth(self) -> QuantConnect.Data.Fundamental.FCFGrowth:
        """
        The growth in the company's free cash flow on a percentage basis. Morningstar calculates the growth percentage based on the
        underlying cash flow from operations and capital expenditures data reported in the Cash Flow Statement within the company filings
        or reports:   Free Cash Flow = Cash flow from operations - Capital Expenditures.
        """
        ...

    @FCFGrowth.setter
    def FCFGrowth(self, value: QuantConnect.Data.Fundamental.FCFGrowth):
        """
        The growth in the company's free cash flow on a percentage basis. Morningstar calculates the growth percentage based on the
        underlying cash flow from operations and capital expenditures data reported in the Cash Flow Statement within the company filings
        or reports:   Free Cash Flow = Cash flow from operations - Capital Expenditures.
        """
        ...

    @property
    def OperationRevenueGrowth3MonthAvg(self) -> QuantConnect.Data.Fundamental.OperationRevenueGrowth3MonthAvg:
        """
        The growth in the company's operating revenue on a percentage basis. Morningstar calculates the growth percentage based on
        the underlying operating revenue data reported in the Income Statement within the company filings or reports.
        """
        ...

    @OperationRevenueGrowth3MonthAvg.setter
    def OperationRevenueGrowth3MonthAvg(self, value: QuantConnect.Data.Fundamental.OperationRevenueGrowth3MonthAvg):
        """
        The growth in the company's operating revenue on a percentage basis. Morningstar calculates the growth percentage based on
        the underlying operating revenue data reported in the Income Statement within the company filings or reports.
        """
        ...

    @property
    def GrossMargin(self) -> QuantConnect.Data.Fundamental.GrossMargin:
        """
        Refers to the ratio of gross profit to revenue. Morningstar calculates the ratio by using the underlying data reported in the company
        filings or reports:   (Revenue - Cost of Goods Sold) / Revenue.
        """
        ...

    @GrossMargin.setter
    def GrossMargin(self, value: QuantConnect.Data.Fundamental.GrossMargin):
        """
        Refers to the ratio of gross profit to revenue. Morningstar calculates the ratio by using the underlying data reported in the company
        filings or reports:   (Revenue - Cost of Goods Sold) / Revenue.
        """
        ...

    @property
    def OperationMargin(self) -> QuantConnect.Data.Fundamental.OperationMargin:
        """
        Refers to the ratio of operating income to revenue. Morningstar calculates the ratio by using the underlying data reported in the
        company filings or reports:   Operating Income / Revenue.
        """
        ...

    @OperationMargin.setter
    def OperationMargin(self, value: QuantConnect.Data.Fundamental.OperationMargin):
        """
        Refers to the ratio of operating income to revenue. Morningstar calculates the ratio by using the underlying data reported in the
        company filings or reports:   Operating Income / Revenue.
        """
        ...

    @property
    def PretaxMargin(self) -> QuantConnect.Data.Fundamental.PretaxMargin:
        """
        Refers to the ratio of pretax income to revenue. Morningstar calculates the ratio by using the underlying data reported in the
        company filings or reports:   Pretax Income / Revenue.
        """
        ...

    @PretaxMargin.setter
    def PretaxMargin(self, value: QuantConnect.Data.Fundamental.PretaxMargin):
        """
        Refers to the ratio of pretax income to revenue. Morningstar calculates the ratio by using the underlying data reported in the
        company filings or reports:   Pretax Income / Revenue.
        """
        ...

    @property
    def NetMargin(self) -> QuantConnect.Data.Fundamental.NetMargin:
        """
        Refers to the ratio of net income to revenue. Morningstar calculates the ratio by using the underlying data reported in the company
        filings or reports:   Net Income / Revenue.
        """
        ...

    @NetMargin.setter
    def NetMargin(self, value: QuantConnect.Data.Fundamental.NetMargin):
        """
        Refers to the ratio of net income to revenue. Morningstar calculates the ratio by using the underlying data reported in the company
        filings or reports:   Net Income / Revenue.
        """
        ...

    @property
    def TaxRate(self) -> QuantConnect.Data.Fundamental.TaxRate:
        """
        Refers to the ratio of tax provision to pretax income. Morningstar calculates the ratio by using the underlying data reported in the
        company filings or reports:   Tax Provision / Pretax Income.
        [Note: Valid only when positive pretax income, and positive tax expense (not tax benefit)]
        """
        ...

    @TaxRate.setter
    def TaxRate(self, value: QuantConnect.Data.Fundamental.TaxRate):
        """
        Refers to the ratio of tax provision to pretax income. Morningstar calculates the ratio by using the underlying data reported in the
        company filings or reports:   Tax Provision / Pretax Income.
        [Note: Valid only when positive pretax income, and positive tax expense (not tax benefit)]
        """
        ...

    @property
    def EBITMargin(self) -> QuantConnect.Data.Fundamental.EBITMargin:
        """
        Refers to the ratio of earnings before interest and taxes to revenue. Morningstar calculates the ratio by using the underlying data
        reported in the company filings or reports:   EBIT / Revenue.
        """
        ...

    @EBITMargin.setter
    def EBITMargin(self, value: QuantConnect.Data.Fundamental.EBITMargin):
        """
        Refers to the ratio of earnings before interest and taxes to revenue. Morningstar calculates the ratio by using the underlying data
        reported in the company filings or reports:   EBIT / Revenue.
        """
        ...

    @property
    def EBITDAMargin(self) -> QuantConnect.Data.Fundamental.EBITDAMargin:
        """
        Refers to the ratio of earnings before interest, taxes and depreciation and amortization to revenue. Morningstar calculates the ratio
        by using the underlying data reported in the company filings or reports:   EBITDA / Revenue.
        """
        ...

    @EBITDAMargin.setter
    def EBITDAMargin(self, value: QuantConnect.Data.Fundamental.EBITDAMargin):
        """
        Refers to the ratio of earnings before interest, taxes and depreciation and amortization to revenue. Morningstar calculates the ratio
        by using the underlying data reported in the company filings or reports:   EBITDA / Revenue.
        """
        ...

    @property
    def SalesPerEmployee(self) -> QuantConnect.Data.Fundamental.SalesPerEmployee:
        """
        Refers to the ratio of Revenue to Employees. Morningstar calculates the ratio by using the underlying data reported in the company
        filings or reports:     Revenue / Employee Number.
        """
        ...

    @SalesPerEmployee.setter
    def SalesPerEmployee(self, value: QuantConnect.Data.Fundamental.SalesPerEmployee):
        """
        Refers to the ratio of Revenue to Employees. Morningstar calculates the ratio by using the underlying data reported in the company
        filings or reports:     Revenue / Employee Number.
        """
        ...

    @property
    def CurrentRatio(self) -> QuantConnect.Data.Fundamental.CurrentRatio:
        """
        Refers to the ratio of Current Assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in
        the Balance Sheet within the company filings or reports:     Current Assets / Current Liabilities.
        """
        ...

    @CurrentRatio.setter
    def CurrentRatio(self, value: QuantConnect.Data.Fundamental.CurrentRatio):
        """
        Refers to the ratio of Current Assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in
        the Balance Sheet within the company filings or reports:     Current Assets / Current Liabilities.
        """
        ...

    @property
    def QuickRatio(self) -> QuantConnect.Data.Fundamental.QuickRatio:
        """
        Refers to the ratio of liquid assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in the
        Balance Sheet within the company filings or reports:(Cash, Cash Equivalents, and Short Term Investments + Receivables ) /
        Current Liabilities.
        """
        ...

    @QuickRatio.setter
    def QuickRatio(self, value: QuantConnect.Data.Fundamental.QuickRatio):
        """
        Refers to the ratio of liquid assets to Current Liabilities. Morningstar calculates the ratio by using the underlying data reported in the
        Balance Sheet within the company filings or reports:(Cash, Cash Equivalents, and Short Term Investments + Receivables ) /
        Current Liabilities.
        """
        ...

    @property
    def LongTermDebtTotalCapitalRatio(self) -> QuantConnect.Data.Fundamental.LongTermDebtTotalCapitalRatio:
        """
        Refers to the ratio of Long Term Debt to Total Capital. Morningstar calculates the ratio by using the underlying data reported in the
        Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / (Long-Term Debt And Capital
        Lease Obligation + Total Shareholder's Equity)
        """
        ...

    @LongTermDebtTotalCapitalRatio.setter
    def LongTermDebtTotalCapitalRatio(self, value: QuantConnect.Data.Fundamental.LongTermDebtTotalCapitalRatio):
        """
        Refers to the ratio of Long Term Debt to Total Capital. Morningstar calculates the ratio by using the underlying data reported in the
        Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / (Long-Term Debt And Capital
        Lease Obligation + Total Shareholder's Equity)
        """
        ...

    @property
    def InterestCoverage(self) -> QuantConnect.Data.Fundamental.InterestCoverage:
        """
        Refers to the ratio of EBIT to Interest Expense. Morningstar calculates the ratio by using the underlying data reported in the Income
        Statement within the company filings or reports:    EBIT / Interest Expense.
        """
        ...

    @InterestCoverage.setter
    def InterestCoverage(self, value: QuantConnect.Data.Fundamental.InterestCoverage):
        """
        Refers to the ratio of EBIT to Interest Expense. Morningstar calculates the ratio by using the underlying data reported in the Income
        Statement within the company filings or reports:    EBIT / Interest Expense.
        """
        ...

    @property
    def LongTermDebtEquityRatio(self) -> QuantConnect.Data.Fundamental.LongTermDebtEquityRatio:
        """
        Refers to the ratio of Long Term Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in
        the Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / Common Equity.
        [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]
        """
        ...

    @LongTermDebtEquityRatio.setter
    def LongTermDebtEquityRatio(self, value: QuantConnect.Data.Fundamental.LongTermDebtEquityRatio):
        """
        Refers to the ratio of Long Term Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in
        the Balance Sheet within the company filings or reports:    Long-Term Debt And Capital Lease Obligation / Common Equity.
        [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]
        """
        ...

    @property
    def FinancialLeverage(self) -> QuantConnect.Data.Fundamental.FinancialLeverage:
        """
        Refers to the ratio of Total Assets to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the
        Balance Sheet within the company filings or reports:    Total Assets / Common Equity.   [Note: Common Equity = Total
        Shareholder's Equity - Preferred Stock]
        """
        ...

    @FinancialLeverage.setter
    def FinancialLeverage(self, value: QuantConnect.Data.Fundamental.FinancialLeverage):
        """
        Refers to the ratio of Total Assets to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the
        Balance Sheet within the company filings or reports:    Total Assets / Common Equity.   [Note: Common Equity = Total
        Shareholder's Equity - Preferred Stock]
        """
        ...

    @property
    def TotalDebtEquityRatio(self) -> QuantConnect.Data.Fundamental.TotalDebtEquityRatio:
        """
        Refers to the ratio of Total Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the
        Balance Sheet within the company filings or reports: (Current Debt And Current Capital Lease Obligation + Long-Term Debt And
        Long-Term Capital Lease Obligation / Common Equity.   [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]
        """
        ...

    @TotalDebtEquityRatio.setter
    def TotalDebtEquityRatio(self, value: QuantConnect.Data.Fundamental.TotalDebtEquityRatio):
        """
        Refers to the ratio of Total Debt to Common Equity. Morningstar calculates the ratio by using the underlying data reported in the
        Balance Sheet within the company filings or reports: (Current Debt And Current Capital Lease Obligation + Long-Term Debt And
        Long-Term Capital Lease Obligation / Common Equity.   [Note: Common Equity = Total Shareholder's Equity - Preferred Stock]
        """
        ...

    @property
    def NormalizedNetProfitMargin(self) -> QuantConnect.Data.Fundamental.NormalizedNetProfitMargin:
        """
        Normalized Income / Total Revenue. A measure of profitability of the company calculated by finding Normalized Net Profit as a
        percentage of Total Revenues.
        """
        ...

    @NormalizedNetProfitMargin.setter
    def NormalizedNetProfitMargin(self, value: QuantConnect.Data.Fundamental.NormalizedNetProfitMargin):
        """
        Normalized Income / Total Revenue. A measure of profitability of the company calculated by finding Normalized Net Profit as a
        percentage of Total Revenues.
        """
        ...

    @property
    def DaysInSales(self) -> QuantConnect.Data.Fundamental.DaysInSales:
        """365 / Receivable Turnover"""
        ...

    @DaysInSales.setter
    def DaysInSales(self, value: QuantConnect.Data.Fundamental.DaysInSales):
        """365 / Receivable Turnover"""
        ...

    @property
    def DaysInInventory(self) -> QuantConnect.Data.Fundamental.DaysInInventory:
        """365 / Inventory turnover"""
        ...

    @DaysInInventory.setter
    def DaysInInventory(self, value: QuantConnect.Data.Fundamental.DaysInInventory):
        """365 / Inventory turnover"""
        ...

    @property
    def DaysInPayment(self) -> QuantConnect.Data.Fundamental.DaysInPayment:
        """365 / Payable turnover"""
        ...

    @DaysInPayment.setter
    def DaysInPayment(self, value: QuantConnect.Data.Fundamental.DaysInPayment):
        """365 / Payable turnover"""
        ...

    @property
    def CashConversionCycle(self) -> QuantConnect.Data.Fundamental.CashConversionCycle:
        """Days In Inventory + Days In Sales - Days In Payment"""
        ...

    @CashConversionCycle.setter
    def CashConversionCycle(self, value: QuantConnect.Data.Fundamental.CashConversionCycle):
        """Days In Inventory + Days In Sales - Days In Payment"""
        ...

    @property
    def ReceivableTurnover(self) -> QuantConnect.Data.Fundamental.ReceivableTurnover:
        """Revenue / Average Accounts Receivables"""
        ...

    @ReceivableTurnover.setter
    def ReceivableTurnover(self, value: QuantConnect.Data.Fundamental.ReceivableTurnover):
        """Revenue / Average Accounts Receivables"""
        ...

    @property
    def InventoryTurnover(self) -> QuantConnect.Data.Fundamental.InventoryTurnover:
        """Cost Of Goods Sold / Average Inventory"""
        ...

    @InventoryTurnover.setter
    def InventoryTurnover(self, value: QuantConnect.Data.Fundamental.InventoryTurnover):
        """Cost Of Goods Sold / Average Inventory"""
        ...

    @property
    def PaymentTurnover(self) -> QuantConnect.Data.Fundamental.PaymentTurnover:
        """Cost of Goods Sold / Average Accounts Payables"""
        ...

    @PaymentTurnover.setter
    def PaymentTurnover(self, value: QuantConnect.Data.Fundamental.PaymentTurnover):
        """Cost of Goods Sold / Average Accounts Payables"""
        ...

    @property
    def FixAssetsTuronver(self) -> QuantConnect.Data.Fundamental.FixAssetsTuronver:
        """Revenue / Average PP&E"""
        ...

    @FixAssetsTuronver.setter
    def FixAssetsTuronver(self, value: QuantConnect.Data.Fundamental.FixAssetsTuronver):
        """Revenue / Average PP&E"""
        ...

    @property
    def AssetsTurnover(self) -> QuantConnect.Data.Fundamental.AssetsTurnover:
        """Revenue / Average Total Assets"""
        ...

    @AssetsTurnover.setter
    def AssetsTurnover(self, value: QuantConnect.Data.Fundamental.AssetsTurnover):
        """Revenue / Average Total Assets"""
        ...

    @property
    def ROE(self) -> QuantConnect.Data.Fundamental.ROE:
        """Net Income / Average Total Common Equity"""
        ...

    @ROE.setter
    def ROE(self, value: QuantConnect.Data.Fundamental.ROE):
        """Net Income / Average Total Common Equity"""
        ...

    @property
    def ROA(self) -> QuantConnect.Data.Fundamental.ROA:
        """Net Income / Average Total Assets"""
        ...

    @ROA.setter
    def ROA(self, value: QuantConnect.Data.Fundamental.ROA):
        """Net Income / Average Total Assets"""
        ...

    @property
    def ROIC(self) -> QuantConnect.Data.Fundamental.ROIC:
        """Net Income / (Total Equity + Long-term Debt and Capital Lease Obligation + Short-term Debt and Capital Lease Obligation)"""
        ...

    @ROIC.setter
    def ROIC(self, value: QuantConnect.Data.Fundamental.ROIC):
        """Net Income / (Total Equity + Long-term Debt and Capital Lease Obligation + Short-term Debt and Capital Lease Obligation)"""
        ...

    @property
    def FCFSalesRatio(self) -> QuantConnect.Data.Fundamental.FCFSalesRatio:
        """Free Cash flow / Revenue"""
        ...

    @FCFSalesRatio.setter
    def FCFSalesRatio(self, value: QuantConnect.Data.Fundamental.FCFSalesRatio):
        """Free Cash flow / Revenue"""
        ...

    @property
    def FCFNetIncomeRatio(self) -> QuantConnect.Data.Fundamental.FCFNetIncomeRatio:
        """Free Cash Flow / Net Income"""
        ...

    @FCFNetIncomeRatio.setter
    def FCFNetIncomeRatio(self, value: QuantConnect.Data.Fundamental.FCFNetIncomeRatio):
        """Free Cash Flow / Net Income"""
        ...

    @property
    def CapExSalesRatio(self) -> QuantConnect.Data.Fundamental.CapExSalesRatio:
        """Capital Expenditure / Revenue"""
        ...

    @CapExSalesRatio.setter
    def CapExSalesRatio(self, value: QuantConnect.Data.Fundamental.CapExSalesRatio):
        """Capital Expenditure / Revenue"""
        ...

    @property
    def DebttoAssets(self) -> QuantConnect.Data.Fundamental.DebttoAssets:
        """
        This is a leverage ratio used to determine how much debt (a sum of long term and current portion of debt) a company has on its
        balance sheet relative to total assets. This ratio examines the percent of the company that is financed by debt.
        """
        ...

    @DebttoAssets.setter
    def DebttoAssets(self, value: QuantConnect.Data.Fundamental.DebttoAssets):
        """
        This is a leverage ratio used to determine how much debt (a sum of long term and current portion of debt) a company has on its
        balance sheet relative to total assets. This ratio examines the percent of the company that is financed by debt.
        """
        ...

    @property
    def CommonEquityToAssets(self) -> QuantConnect.Data.Fundamental.CommonEquityToAssets:
        """
        This is a financial ratio of common stock equity to total assets that indicates the relative proportion of equity used to finance a
        company's assets.
        """
        ...

    @CommonEquityToAssets.setter
    def CommonEquityToAssets(self, value: QuantConnect.Data.Fundamental.CommonEquityToAssets):
        """
        This is a financial ratio of common stock equity to total assets that indicates the relative proportion of equity used to finance a
        company's assets.
        """
        ...

    @property
    def CapitalExpenditureAnnual5YrGrowth(self) -> QuantConnect.Data.Fundamental.CapitalExpenditureAnnual5YrGrowth:
        """
        This is the compound annual growth rate of the company's capital spending over the last 5 years. Capital Spending is the sum of
        the Capital Expenditure items found in the Statement of Cash Flows.
        """
        ...

    @CapitalExpenditureAnnual5YrGrowth.setter
    def CapitalExpenditureAnnual5YrGrowth(self, value: QuantConnect.Data.Fundamental.CapitalExpenditureAnnual5YrGrowth):
        """
        This is the compound annual growth rate of the company's capital spending over the last 5 years. Capital Spending is the sum of
        the Capital Expenditure items found in the Statement of Cash Flows.
        """
        ...

    @property
    def GrossProfitAnnual5YrGrowth(self) -> QuantConnect.Data.Fundamental.GrossProfitAnnual5YrGrowth:
        """This is the compound annual growth rate of the company's Gross Profit over the last 5 years."""
        ...

    @GrossProfitAnnual5YrGrowth.setter
    def GrossProfitAnnual5YrGrowth(self, value: QuantConnect.Data.Fundamental.GrossProfitAnnual5YrGrowth):
        """This is the compound annual growth rate of the company's Gross Profit over the last 5 years."""
        ...

    @property
    def GrossMargin5YrAvg(self) -> QuantConnect.Data.Fundamental.GrossMargin5YrAvg:
        """
        This is the simple average of the company's Annual Gross Margin over the last 5 years. Gross Margin is Total Revenue minus Cost
        of Goods Sold divided by Total Revenue and is expressed as a percentage.
        """
        ...

    @GrossMargin5YrAvg.setter
    def GrossMargin5YrAvg(self, value: QuantConnect.Data.Fundamental.GrossMargin5YrAvg):
        """
        This is the simple average of the company's Annual Gross Margin over the last 5 years. Gross Margin is Total Revenue minus Cost
        of Goods Sold divided by Total Revenue and is expressed as a percentage.
        """
        ...

    @property
    def PostTaxMargin5YrAvg(self) -> QuantConnect.Data.Fundamental.PostTaxMargin5YrAvg:
        """
        This is the simple average of the company's Annual Post Tax Margin over the last 5 years. Post tax margin is Post tax divided by
        total revenue for the same period.
        """
        ...

    @PostTaxMargin5YrAvg.setter
    def PostTaxMargin5YrAvg(self, value: QuantConnect.Data.Fundamental.PostTaxMargin5YrAvg):
        """
        This is the simple average of the company's Annual Post Tax Margin over the last 5 years. Post tax margin is Post tax divided by
        total revenue for the same period.
        """
        ...

    @property
    def PreTaxMargin5YrAvg(self) -> QuantConnect.Data.Fundamental.PreTaxMargin5YrAvg:
        """
        This is the simple average of the company's Annual Pre Tax Margin over the last 5 years. Pre tax margin is Pre tax divided by total
        revenue for the same period.
        """
        ...

    @PreTaxMargin5YrAvg.setter
    def PreTaxMargin5YrAvg(self, value: QuantConnect.Data.Fundamental.PreTaxMargin5YrAvg):
        """
        This is the simple average of the company's Annual Pre Tax Margin over the last 5 years. Pre tax margin is Pre tax divided by total
        revenue for the same period.
        """
        ...

    @property
    def ProfitMargin5YrAvg(self) -> QuantConnect.Data.Fundamental.ProfitMargin5YrAvg:
        """
        This is the simple average of the company's Annual Net Profit Margin over the last 5 years. Net profit margin is post tax income
        divided by total revenue for the same period.
        """
        ...

    @ProfitMargin5YrAvg.setter
    def ProfitMargin5YrAvg(self, value: QuantConnect.Data.Fundamental.ProfitMargin5YrAvg):
        """
        This is the simple average of the company's Annual Net Profit Margin over the last 5 years. Net profit margin is post tax income
        divided by total revenue for the same period.
        """
        ...

    @property
    def ROE5YrAvg(self) -> QuantConnect.Data.Fundamental.ROE5YrAvg:
        """
        This is the simple average of the company's ROE over the last 5 years. Return on equity reveals how much profit a company has
        earned in comparison to the total amount of shareholder equity found on the balance sheet.
        """
        ...

    @ROE5YrAvg.setter
    def ROE5YrAvg(self, value: QuantConnect.Data.Fundamental.ROE5YrAvg):
        """
        This is the simple average of the company's ROE over the last 5 years. Return on equity reveals how much profit a company has
        earned in comparison to the total amount of shareholder equity found on the balance sheet.
        """
        ...

    @property
    def ROA5YrAvg(self) -> QuantConnect.Data.Fundamental.ROA5YrAvg:
        """
        This is the simple average of the company's ROA over the last 5 years. Return on asset is calculated by dividing a company's annual
        earnings by its average total assets.
        """
        ...

    @ROA5YrAvg.setter
    def ROA5YrAvg(self, value: QuantConnect.Data.Fundamental.ROA5YrAvg):
        """
        This is the simple average of the company's ROA over the last 5 years. Return on asset is calculated by dividing a company's annual
        earnings by its average total assets.
        """
        ...

    @property
    def AVG5YrsROIC(self) -> QuantConnect.Data.Fundamental.AVG5YrsROIC:
        """
        This is the simple average of the company's ROIC over the last 5 years. Return on invested capital is calculated by taking net
        operating profit after taxes and dividends and dividing by the total amount of capital invested and expressing the result as a
        percentage.
        """
        ...

    @AVG5YrsROIC.setter
    def AVG5YrsROIC(self, value: QuantConnect.Data.Fundamental.AVG5YrsROIC):
        """
        This is the simple average of the company's ROIC over the last 5 years. Return on invested capital is calculated by taking net
        operating profit after taxes and dividends and dividing by the total amount of capital invested and expressing the result as a
        percentage.
        """
        ...

    @property
    def NormalizedROIC(self) -> QuantConnect.Data.Fundamental.NormalizedROIC:
        """[Normalized Income + (Interest Expense * (1-Tax Rate))]  / Invested Capital"""
        ...

    @NormalizedROIC.setter
    def NormalizedROIC(self, value: QuantConnect.Data.Fundamental.NormalizedROIC):
        """[Normalized Income + (Interest Expense * (1-Tax Rate))]  / Invested Capital"""
        ...

    @property
    def RegressionGrowthOperatingRevenue5Years(self) -> QuantConnect.Data.Fundamental.RegressionGrowthOperatingRevenue5Years:
        """The five-year growth rate of operating revenue, calculated using regression analysis."""
        ...

    @RegressionGrowthOperatingRevenue5Years.setter
    def RegressionGrowthOperatingRevenue5Years(self, value: QuantConnect.Data.Fundamental.RegressionGrowthOperatingRevenue5Years):
        """The five-year growth rate of operating revenue, calculated using regression analysis."""
        ...

    @property
    def CashRatio(self) -> QuantConnect.Data.Fundamental.CashRatio:
        """
        Indicates a company's short-term liquidity, defined as short term liquid investments (cash, cash equivalents, short term
        investments) divided by current liabilities.
        """
        ...

    @CashRatio.setter
    def CashRatio(self, value: QuantConnect.Data.Fundamental.CashRatio):
        """
        Indicates a company's short-term liquidity, defined as short term liquid investments (cash, cash equivalents, short term
        investments) divided by current liabilities.
        """
        ...

    @property
    def CashtoTotalAssets(self) -> QuantConnect.Data.Fundamental.CashtoTotalAssets:
        """Represents the percentage of a company's total assets is in cash."""
        ...

    @CashtoTotalAssets.setter
    def CashtoTotalAssets(self, value: QuantConnect.Data.Fundamental.CashtoTotalAssets):
        """Represents the percentage of a company's total assets is in cash."""
        ...

    @property
    def CapitalExpendituretoEBITDA(self) -> QuantConnect.Data.Fundamental.CapitalExpendituretoEBITDA:
        """Measures the amount a company is investing in its business relative to EBITDA generated in a given period."""
        ...

    @CapitalExpendituretoEBITDA.setter
    def CapitalExpendituretoEBITDA(self, value: QuantConnect.Data.Fundamental.CapitalExpendituretoEBITDA):
        """Measures the amount a company is investing in its business relative to EBITDA generated in a given period."""
        ...

    @property
    def FCFtoCFO(self) -> QuantConnect.Data.Fundamental.FCFtoCFO:
        """Indicates the percentage of a company's operating cash flow is free to be invested in its business after capital expenditures."""
        ...

    @FCFtoCFO.setter
    def FCFtoCFO(self, value: QuantConnect.Data.Fundamental.FCFtoCFO):
        """Indicates the percentage of a company's operating cash flow is free to be invested in its business after capital expenditures."""
        ...

    @property
    def StockholdersEquityGrowth(self) -> QuantConnect.Data.Fundamental.StockholdersEquityGrowth:
        """
        The growth in the stockholder's equity on a percentage basis. Morningstar calculates the growth percentage based on the residual
        interest in the assets of the enterprise that remains after deducting its liabilities reported in the Balance Sheet within the company
        filings or reports.
        """
        ...

    @StockholdersEquityGrowth.setter
    def StockholdersEquityGrowth(self, value: QuantConnect.Data.Fundamental.StockholdersEquityGrowth):
        """
        The growth in the stockholder's equity on a percentage basis. Morningstar calculates the growth percentage based on the residual
        interest in the assets of the enterprise that remains after deducting its liabilities reported in the Balance Sheet within the company
        filings or reports.
        """
        ...

    @property
    def TotalAssetsGrowth(self) -> QuantConnect.Data.Fundamental.TotalAssetsGrowth:
        """
        The growth in the total assets on a percentage basis. Morningstar calculates the growth percentage based on the total assets
        reported in the Balance Sheet within the company filings or reports.
        """
        ...

    @TotalAssetsGrowth.setter
    def TotalAssetsGrowth(self, value: QuantConnect.Data.Fundamental.TotalAssetsGrowth):
        """
        The growth in the total assets on a percentage basis. Morningstar calculates the growth percentage based on the total assets
        reported in the Balance Sheet within the company filings or reports.
        """
        ...

    @property
    def TotalLiabilitiesGrowth(self) -> QuantConnect.Data.Fundamental.TotalLiabilitiesGrowth:
        """
        The growth in the total liabilities on a percentage basis. Morningstar calculates the growth percentage based on the total liabilities
        reported in the Balance Sheet within the company filings or reports.
        """
        ...

    @TotalLiabilitiesGrowth.setter
    def TotalLiabilitiesGrowth(self, value: QuantConnect.Data.Fundamental.TotalLiabilitiesGrowth):
        """
        The growth in the total liabilities on a percentage basis. Morningstar calculates the growth percentage based on the total liabilities
        reported in the Balance Sheet within the company filings or reports.
        """
        ...

    @property
    def TotalDebtEquityRatioGrowth(self) -> QuantConnect.Data.Fundamental.TotalDebtEquityRatioGrowth:
        """
        The growth in the company's total debt to equity ratio on a percentage basis. Morningstar calculates the growth percentage based
        on the total debt divided by the shareholder's equity reported in the Balance Sheet within the company filings or reports.
        """
        ...

    @TotalDebtEquityRatioGrowth.setter
    def TotalDebtEquityRatioGrowth(self, value: QuantConnect.Data.Fundamental.TotalDebtEquityRatioGrowth):
        """
        The growth in the company's total debt to equity ratio on a percentage basis. Morningstar calculates the growth percentage based
        on the total debt divided by the shareholder's equity reported in the Balance Sheet within the company filings or reports.
        """
        ...

    @property
    def CashRatioGrowth(self) -> QuantConnect.Data.Fundamental.CashRatioGrowth:
        """
        The growth in the company's cash ratio on a percentage basis. Morningstar calculates the growth percentage based on the short
        term liquid investments (cash, cash equivalents, short term investments) divided by current liabilities reported in the Balance Sheet
        within the company filings or reports.
        """
        ...

    @CashRatioGrowth.setter
    def CashRatioGrowth(self, value: QuantConnect.Data.Fundamental.CashRatioGrowth):
        """
        The growth in the company's cash ratio on a percentage basis. Morningstar calculates the growth percentage based on the short
        term liquid investments (cash, cash equivalents, short term investments) divided by current liabilities reported in the Balance Sheet
        within the company filings or reports.
        """
        ...

    @property
    def EBITDAGrowth(self) -> QuantConnect.Data.Fundamental.EBITDAGrowth:
        """
        The growth in the company's EBITDA on a percentage basis. Morningstar calculates the growth percentage based on the earnings
        minus expenses (excluding interest, tax, depreciation, and amortization expenses) reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @EBITDAGrowth.setter
    def EBITDAGrowth(self, value: QuantConnect.Data.Fundamental.EBITDAGrowth):
        """
        The growth in the company's EBITDA on a percentage basis. Morningstar calculates the growth percentage based on the earnings
        minus expenses (excluding interest, tax, depreciation, and amortization expenses) reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @property
    def CashFlowfromFinancingGrowth(self) -> QuantConnect.Data.Fundamental.CashFlowfromFinancingGrowth:
        """
        The growth in the company's cash flows from financing on a percentage basis. Morningstar calculates the growth percentage
        based on the financing cash flows reported in the Cash Flow Statement within the company filings or reports.
        """
        ...

    @CashFlowfromFinancingGrowth.setter
    def CashFlowfromFinancingGrowth(self, value: QuantConnect.Data.Fundamental.CashFlowfromFinancingGrowth):
        """
        The growth in the company's cash flows from financing on a percentage basis. Morningstar calculates the growth percentage
        based on the financing cash flows reported in the Cash Flow Statement within the company filings or reports.
        """
        ...

    @property
    def CashFlowfromInvestingGrowth(self) -> QuantConnect.Data.Fundamental.CashFlowfromInvestingGrowth:
        """
        The growth in the company's cash flows from investing on a percentage basis. Morningstar calculates the growth percentage
        based on the cash flows from investing reported in the Cash Flow Statement within the company filings or reports.
        """
        ...

    @CashFlowfromInvestingGrowth.setter
    def CashFlowfromInvestingGrowth(self, value: QuantConnect.Data.Fundamental.CashFlowfromInvestingGrowth):
        """
        The growth in the company's cash flows from investing on a percentage basis. Morningstar calculates the growth percentage
        based on the cash flows from investing reported in the Cash Flow Statement within the company filings or reports.
        """
        ...

    @property
    def CapExGrowth(self) -> QuantConnect.Data.Fundamental.CapExGrowth:
        """
        The growth in the company's capital expenditures on a percentage basis. Morningstar calculates the growth percentage based on
        the capital expenditures reported in the Cash Flow Statement within the company filings or reports.
        """
        ...

    @CapExGrowth.setter
    def CapExGrowth(self, value: QuantConnect.Data.Fundamental.CapExGrowth):
        """
        The growth in the company's capital expenditures on a percentage basis. Morningstar calculates the growth percentage based on
        the capital expenditures reported in the Cash Flow Statement within the company filings or reports.
        """
        ...

    @property
    def CurrentRatioGrowth(self) -> QuantConnect.Data.Fundamental.CurrentRatioGrowth:
        """
        The growth in the company's current ratio on a percentage basis. Morningstar calculates the growth percentage based on the
        current assets divided by current liabilities reported in the Balance Sheet within the company filings or reports.
        """
        ...

    @CurrentRatioGrowth.setter
    def CurrentRatioGrowth(self, value: QuantConnect.Data.Fundamental.CurrentRatioGrowth):
        """
        The growth in the company's current ratio on a percentage basis. Morningstar calculates the growth percentage based on the
        current assets divided by current liabilities reported in the Balance Sheet within the company filings or reports.
        """
        ...

    @property
    def WorkingCapitalTurnoverRatio(self) -> QuantConnect.Data.Fundamental.WorkingCapitalTurnoverRatio:
        """Total revenue / working capital (current assets minus current liabilities)"""
        ...

    @WorkingCapitalTurnoverRatio.setter
    def WorkingCapitalTurnoverRatio(self, value: QuantConnect.Data.Fundamental.WorkingCapitalTurnoverRatio):
        """Total revenue / working capital (current assets minus current liabilities)"""
        ...

    @property
    def NetIncomePerEmployee(self) -> QuantConnect.Data.Fundamental.NetIncomePerEmployee:
        """
        Refers to the ratio of Net Income to Employees. Morningstar calculates the ratio by using the underlying data reported in the
        company filings or reports:     Net Income / Employee Number.
        """
        ...

    @NetIncomePerEmployee.setter
    def NetIncomePerEmployee(self, value: QuantConnect.Data.Fundamental.NetIncomePerEmployee):
        """
        Refers to the ratio of Net Income to Employees. Morningstar calculates the ratio by using the underlying data reported in the
        company filings or reports:     Net Income / Employee Number.
        """
        ...

    @property
    def SolvencyRatio(self) -> QuantConnect.Data.Fundamental.SolvencyRatio:
        """
        Measure of whether a company's cash flow is sufficient to meet its short-term and long-term debt requirements. The lower this
        ratio is, the greater the probability that the company will be in financial distress. Net Income + Depreciation, Depletion and
        Amortization/ average of annual Total Liabilities over the most recent two periods.
        """
        ...

    @SolvencyRatio.setter
    def SolvencyRatio(self, value: QuantConnect.Data.Fundamental.SolvencyRatio):
        """
        Measure of whether a company's cash flow is sufficient to meet its short-term and long-term debt requirements. The lower this
        ratio is, the greater the probability that the company will be in financial distress. Net Income + Depreciation, Depletion and
        Amortization/ average of annual Total Liabilities over the most recent two periods.
        """
        ...

    @property
    def ExpenseRatio(self) -> QuantConnect.Data.Fundamental.ExpenseRatio:
        """
        A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and
        administrative expenses related to claims such as fees and commissions. A number of 1 or lower is preferred, as this means the
        premiums exceed the expenses. Calculated as: (Deferred Policy Acquisition Amortization Expense+Fees and Commission
        Expense+Other Underwriting Expenses+Selling, General and Administrative) / Net Premiums Earned
        """
        ...

    @ExpenseRatio.setter
    def ExpenseRatio(self, value: QuantConnect.Data.Fundamental.ExpenseRatio):
        """
        A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and
        administrative expenses related to claims such as fees and commissions. A number of 1 or lower is preferred, as this means the
        premiums exceed the expenses. Calculated as: (Deferred Policy Acquisition Amortization Expense+Fees and Commission
        Expense+Other Underwriting Expenses+Selling, General and Administrative) / Net Premiums Earned
        """
        ...

    @property
    def LossRatio(self) -> QuantConnect.Data.Fundamental.LossRatio:
        """
        A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and the
        expenses related to claims. A number of 1 or lower is preferred, as this means the premiums exceed the expenses. Calculated as:
        Benefits, Claims and Loss Adjustment Expense, Net / Net Premiums Earned
        """
        ...

    @LossRatio.setter
    def LossRatio(self, value: QuantConnect.Data.Fundamental.LossRatio):
        """
        A measure of operating performance for Insurance companies, as it shows the relationship between the premiums earned and the
        expenses related to claims. A number of 1 or lower is preferred, as this means the premiums exceed the expenses. Calculated as:
        Benefits, Claims and Loss Adjustment Expense, Net / Net Premiums Earned
        """
        ...

    def __init__(self) -> None:
        """Creates an instance of the OperationRatios class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.OperationRatios) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class DilutedEPSGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's diluted earnings per share (EPS) on a percentage basis. Morningstar calculates the annualized growth
    percentage based on the underlying diluted EPS reported in the Income Statement within the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedEPSGrowth class"""
        ...


class DilutedContEPSGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's diluted EPS from continuing operations on a percentage basis. Morningstar calculates the annualized
    growth percentage based on the underlying diluted EPS from continuing operations reported in the Income Statement within the
    company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DilutedContEPSGrowth class"""
        ...


class DPSGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's dividends per share (DPS) on a percentage basis. Morningstar calculates the annualized growth
    percentage based on the underlying DPS from its dividend database.  Morningstar collects its DPS from company filings and
    reports, as well as from third party sources.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the DPSGrowth class"""
        ...


class EquityPerShareGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's book value per share on a percentage basis. Morningstar calculates the annualized growth
    percentage based on the underlying equity and end of period shares outstanding reported in the company filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the EquityPerShareGrowth class"""
        ...


class RegressionGrowthofDividends5Years(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The five-year growth rate of dividends per share, calculated using regression analysis."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the RegressionGrowthofDividends5Years class"""
        ...


class FCFPerShareGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's free cash flow per share on a percentage basis. Morningstar calculates the growth percentage based
    on the free cash flow divided by average diluted shares outstanding reported in the Financial Statements within the company filings
    or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the FCFPerShareGrowth class"""
        ...


class BookValuePerShareGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """
    The growth in the company's book value per share on a percentage basis. Morningstar calculates the growth percentage based on
    the common shareholder's equity reported in the Balance Sheet divided by the diluted shares outstanding within the company
    filings or reports.
    """

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the BookValuePerShareGrowth class"""
        ...


class NormalizedDilutedEPSGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The growth in the company's Normalized Diluted EPS on a percentage basis."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedDilutedEPSGrowth class"""
        ...


class NormalizedBasicEPSGrowth(QuantConnect.Data.Fundamental.MultiPeriodField):
    """The growth in the company's Normalized Basic EPS on a percentage basis."""

    @property
    def DefaultPeriod(self) -> int:
        """
        Gets the default period for the field
        
        This property is protected.
        """
        ...

    @property
    def OneYear(self) -> float:
        """Gets/sets the OneYear period value for the field"""
        ...

    @OneYear.setter
    def OneYear(self, value: float):
        """Gets/sets the OneYear period value for the field"""
        ...

    @property
    def ThreeMonths(self) -> float:
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @ThreeMonths.setter
    def ThreeMonths(self, value: float):
        """Gets/sets the ThreeMonths period value for the field"""
        ...

    @property
    def ThreeYears(self) -> float:
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @ThreeYears.setter
    def ThreeYears(self, value: float):
        """Gets/sets the ThreeYears period value for the field"""
        ...

    @property
    def FiveYears(self) -> float:
        """Gets/sets the FiveYears period value for the field"""
        ...

    @FiveYears.setter
    def FiveYears(self, value: float):
        """Gets/sets the FiveYears period value for the field"""
        ...

    def __init__(self, store: System.Collections.Generic.IDictionary[str, float] = None) -> None:
        """Creates an instance of the NormalizedBasicEPSGrowth class"""
        ...


class EarningRatios(System.Object):
    """Definition of the EarningRatios class"""

    @property
    def DilutedEPSGrowth(self) -> QuantConnect.Data.Fundamental.DilutedEPSGrowth:
        """
        The growth in the company's diluted earnings per share (EPS) on a percentage basis. Morningstar calculates the annualized growth
        percentage based on the underlying diluted EPS reported in the Income Statement within the company filings or reports.
        """
        ...

    @DilutedEPSGrowth.setter
    def DilutedEPSGrowth(self, value: QuantConnect.Data.Fundamental.DilutedEPSGrowth):
        """
        The growth in the company's diluted earnings per share (EPS) on a percentage basis. Morningstar calculates the annualized growth
        percentage based on the underlying diluted EPS reported in the Income Statement within the company filings or reports.
        """
        ...

    @property
    def DilutedContEPSGrowth(self) -> QuantConnect.Data.Fundamental.DilutedContEPSGrowth:
        """
        The growth in the company's diluted EPS from continuing operations on a percentage basis. Morningstar calculates the annualized
        growth percentage based on the underlying diluted EPS from continuing operations reported in the Income Statement within the
        company filings or reports.
        """
        ...

    @DilutedContEPSGrowth.setter
    def DilutedContEPSGrowth(self, value: QuantConnect.Data.Fundamental.DilutedContEPSGrowth):
        """
        The growth in the company's diluted EPS from continuing operations on a percentage basis. Morningstar calculates the annualized
        growth percentage based on the underlying diluted EPS from continuing operations reported in the Income Statement within the
        company filings or reports.
        """
        ...

    @property
    def DPSGrowth(self) -> QuantConnect.Data.Fundamental.DPSGrowth:
        """
        The growth in the company's dividends per share (DPS) on a percentage basis. Morningstar calculates the annualized growth
        percentage based on the underlying DPS from its dividend database.  Morningstar collects its DPS from company filings and
        reports, as well as from third party sources.
        """
        ...

    @DPSGrowth.setter
    def DPSGrowth(self, value: QuantConnect.Data.Fundamental.DPSGrowth):
        """
        The growth in the company's dividends per share (DPS) on a percentage basis. Morningstar calculates the annualized growth
        percentage based on the underlying DPS from its dividend database.  Morningstar collects its DPS from company filings and
        reports, as well as from third party sources.
        """
        ...

    @property
    def EquityPerShareGrowth(self) -> QuantConnect.Data.Fundamental.EquityPerShareGrowth:
        """
        The growth in the company's book value per share on a percentage basis. Morningstar calculates the annualized growth
        percentage based on the underlying equity and end of period shares outstanding reported in the company filings or reports.
        """
        ...

    @EquityPerShareGrowth.setter
    def EquityPerShareGrowth(self, value: QuantConnect.Data.Fundamental.EquityPerShareGrowth):
        """
        The growth in the company's book value per share on a percentage basis. Morningstar calculates the annualized growth
        percentage based on the underlying equity and end of period shares outstanding reported in the company filings or reports.
        """
        ...

    @property
    def RegressionGrowthofDividends5Years(self) -> QuantConnect.Data.Fundamental.RegressionGrowthofDividends5Years:
        """The five-year growth rate of dividends per share, calculated using regression analysis."""
        ...

    @RegressionGrowthofDividends5Years.setter
    def RegressionGrowthofDividends5Years(self, value: QuantConnect.Data.Fundamental.RegressionGrowthofDividends5Years):
        """The five-year growth rate of dividends per share, calculated using regression analysis."""
        ...

    @property
    def FCFPerShareGrowth(self) -> QuantConnect.Data.Fundamental.FCFPerShareGrowth:
        """
        The growth in the company's free cash flow per share on a percentage basis. Morningstar calculates the growth percentage based
        on the free cash flow divided by average diluted shares outstanding reported in the Financial Statements within the company filings
        or reports.
        """
        ...

    @FCFPerShareGrowth.setter
    def FCFPerShareGrowth(self, value: QuantConnect.Data.Fundamental.FCFPerShareGrowth):
        """
        The growth in the company's free cash flow per share on a percentage basis. Morningstar calculates the growth percentage based
        on the free cash flow divided by average diluted shares outstanding reported in the Financial Statements within the company filings
        or reports.
        """
        ...

    @property
    def BookValuePerShareGrowth(self) -> QuantConnect.Data.Fundamental.BookValuePerShareGrowth:
        """
        The growth in the company's book value per share on a percentage basis. Morningstar calculates the growth percentage based on
        the common shareholder's equity reported in the Balance Sheet divided by the diluted shares outstanding within the company
        filings or reports.
        """
        ...

    @BookValuePerShareGrowth.setter
    def BookValuePerShareGrowth(self, value: QuantConnect.Data.Fundamental.BookValuePerShareGrowth):
        """
        The growth in the company's book value per share on a percentage basis. Morningstar calculates the growth percentage based on
        the common shareholder's equity reported in the Balance Sheet divided by the diluted shares outstanding within the company
        filings or reports.
        """
        ...

    @property
    def NormalizedDilutedEPSGrowth(self) -> QuantConnect.Data.Fundamental.NormalizedDilutedEPSGrowth:
        """The growth in the company's Normalized Diluted EPS on a percentage basis."""
        ...

    @NormalizedDilutedEPSGrowth.setter
    def NormalizedDilutedEPSGrowth(self, value: QuantConnect.Data.Fundamental.NormalizedDilutedEPSGrowth):
        """The growth in the company's Normalized Diluted EPS on a percentage basis."""
        ...

    @property
    def NormalizedBasicEPSGrowth(self) -> QuantConnect.Data.Fundamental.NormalizedBasicEPSGrowth:
        """The growth in the company's Normalized Basic EPS on a percentage basis."""
        ...

    @NormalizedBasicEPSGrowth.setter
    def NormalizedBasicEPSGrowth(self, value: QuantConnect.Data.Fundamental.NormalizedBasicEPSGrowth):
        """The growth in the company's Normalized Basic EPS on a percentage basis."""
        ...

    def __init__(self) -> None:
        """Creates an instance of the EarningRatios class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.EarningRatios) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class ValuationRatios(System.Object):
    """Definition of the ValuationRatios class"""

    @property
    def PayoutRatio(self) -> float:
        """Dividend per share / Diluted earnings per share"""
        ...

    @PayoutRatio.setter
    def PayoutRatio(self, value: float):
        """Dividend per share / Diluted earnings per share"""
        ...

    @property
    def SustainableGrowthRate(self) -> float:
        """ROE * (1 - Payout Ratio)"""
        ...

    @SustainableGrowthRate.setter
    def SustainableGrowthRate(self, value: float):
        """ROE * (1 - Payout Ratio)"""
        ...

    @property
    def CashReturn(self) -> float:
        """
        Refers to the ratio of free cash flow to enterprise value. Morningstar calculates the ratio by using the underlying data reported in
        the company filings or reports:   FCF /Enterprise Value.
        """
        ...

    @CashReturn.setter
    def CashReturn(self, value: float):
        """
        Refers to the ratio of free cash flow to enterprise value. Morningstar calculates the ratio by using the underlying data reported in
        the company filings or reports:   FCF /Enterprise Value.
        """
        ...

    @property
    def SalesPerShare(self) -> float:
        """Sales / Average Diluted Shares Outstanding"""
        ...

    @SalesPerShare.setter
    def SalesPerShare(self, value: float):
        """Sales / Average Diluted Shares Outstanding"""
        ...

    @property
    def BookValuePerShare(self) -> float:
        """Common Shareholder's Equity / Diluted Shares Outstanding"""
        ...

    @BookValuePerShare.setter
    def BookValuePerShare(self, value: float):
        """Common Shareholder's Equity / Diluted Shares Outstanding"""
        ...

    @property
    def CFOPerShare(self) -> float:
        """Cash Flow from Operations / Average Diluted Shares Outstanding"""
        ...

    @CFOPerShare.setter
    def CFOPerShare(self, value: float):
        """Cash Flow from Operations / Average Diluted Shares Outstanding"""
        ...

    @property
    def FCFPerShare(self) -> float:
        """Free Cash Flow / Average Diluted Shares Outstanding"""
        ...

    @FCFPerShare.setter
    def FCFPerShare(self, value: float):
        """Free Cash Flow / Average Diluted Shares Outstanding"""
        ...

    @property
    def EarningYield(self) -> float:
        """Diluted EPS / Price"""
        ...

    @EarningYield.setter
    def EarningYield(self, value: float):
        """Diluted EPS / Price"""
        ...

    @property
    def PERatio(self) -> float:
        """Adjusted Close Price/ EPS. If the result is negative, zero, >10,000 or <0.001, then null."""
        ...

    @PERatio.setter
    def PERatio(self, value: float):
        """Adjusted Close Price/ EPS. If the result is negative, zero, >10,000 or <0.001, then null."""
        ...

    @property
    def SalesYield(self) -> float:
        """SalesPerShare / Price"""
        ...

    @SalesYield.setter
    def SalesYield(self, value: float):
        """SalesPerShare / Price"""
        ...

    @property
    def PSRatio(self) -> float:
        """Adjusted close price / Sales Per Share. If the result is negative or zero, then null."""
        ...

    @PSRatio.setter
    def PSRatio(self, value: float):
        """Adjusted close price / Sales Per Share. If the result is negative or zero, then null."""
        ...

    @property
    def BookValueYield(self) -> float:
        """BookValuePerShare / Price"""
        ...

    @BookValueYield.setter
    def BookValueYield(self, value: float):
        """BookValuePerShare / Price"""
        ...

    @property
    def PBRatio(self) -> float:
        """Adjusted close price / Book Value Per Share. If the result is negative or zero, then null."""
        ...

    @PBRatio.setter
    def PBRatio(self, value: float):
        """Adjusted close price / Book Value Per Share. If the result is negative or zero, then null."""
        ...

    @property
    def CFYield(self) -> float:
        """CFOPerShare / Price"""
        ...

    @CFYield.setter
    def CFYield(self, value: float):
        """CFOPerShare / Price"""
        ...

    @property
    def PCFRatio(self) -> float:
        """Adjusted close price /Cash Flow Per Share. If the result is negative or zero, then null."""
        ...

    @PCFRatio.setter
    def PCFRatio(self, value: float):
        """Adjusted close price /Cash Flow Per Share. If the result is negative or zero, then null."""
        ...

    @property
    def FCFYield(self) -> float:
        """FCFPerShare / Price"""
        ...

    @FCFYield.setter
    def FCFYield(self, value: float):
        """FCFPerShare / Price"""
        ...

    @property
    def FCFRatio(self) -> float:
        """Adjusted close price/ Free Cash Flow Per Share. If the result is negative or zero, then null."""
        ...

    @FCFRatio.setter
    def FCFRatio(self, value: float):
        """Adjusted close price/ Free Cash Flow Per Share. If the result is negative or zero, then null."""
        ...

    @property
    def TrailingDividendYield(self) -> float:
        """Dividends Per Share over the trailing 12 months / Price"""
        ...

    @TrailingDividendYield.setter
    def TrailingDividendYield(self, value: float):
        """Dividends Per Share over the trailing 12 months / Price"""
        ...

    @property
    def ForwardDividendYield(self) -> float:
        """(Current Dividend Per Share * Payout Frequency) / Price"""
        ...

    @ForwardDividendYield.setter
    def ForwardDividendYield(self, value: float):
        """(Current Dividend Per Share * Payout Frequency) / Price"""
        ...

    @property
    def ForwardEarningYield(self) -> float:
        """
        Estimated Earnings Per Share / Price
        Note: a) The "Next" Year's EPS Estimate is used; For instance, if today's actual date is March 1, 2009, the "Current" EPS Estimate
        for MSFT is June 2009, and the "Next" EPS Estimate for MSFT is June 2010; the latter is used.
        b) The eps estimated data is sourced from a third party.
        """
        ...

    @ForwardEarningYield.setter
    def ForwardEarningYield(self, value: float):
        """
        Estimated Earnings Per Share / Price
        Note: a) The "Next" Year's EPS Estimate is used; For instance, if today's actual date is March 1, 2009, the "Current" EPS Estimate
        for MSFT is June 2009, and the "Next" EPS Estimate for MSFT is June 2010; the latter is used.
        b) The eps estimated data is sourced from a third party.
        """
        ...

    @property
    def ForwardPERatio(self) -> float:
        """
        1 / ForwardEarningYield
        If result is negative, then null
        """
        ...

    @ForwardPERatio.setter
    def ForwardPERatio(self, value: float):
        """
        1 / ForwardEarningYield
        If result is negative, then null
        """
        ...

    @property
    def PEGRatio(self) -> float:
        """ForwardPERatio / Long-term Average Earning Growth Rate"""
        ...

    @PEGRatio.setter
    def PEGRatio(self, value: float):
        """ForwardPERatio / Long-term Average Earning Growth Rate"""
        ...

    @property
    def PEGPayback(self) -> float:
        """
        The number of years it would take for a company's cumulative earnings to equal the stock's current trading price, assuming that the
        company continues to increase its annual earnings at the growth rate used to calculate the PEG ratio.
        [ Log (PG/E + 1)  / Log (1 + G) ] - 1
        Where
        P=Price
        E=Next Fiscal Year's Estimated EPS
        G=Long-term Average Earning Growth
        """
        ...

    @PEGPayback.setter
    def PEGPayback(self, value: float):
        """
        The number of years it would take for a company's cumulative earnings to equal the stock's current trading price, assuming that the
        company continues to increase its annual earnings at the growth rate used to calculate the PEG ratio.
        [ Log (PG/E + 1)  / Log (1 + G) ] - 1
        Where
        P=Price
        E=Next Fiscal Year's Estimated EPS
        G=Long-term Average Earning Growth
        """
        ...

    @property
    def TangibleBookValuePerShare(self) -> float:
        """The company's total book value less the value of any intangible assets dividend by number of shares."""
        ...

    @TangibleBookValuePerShare.setter
    def TangibleBookValuePerShare(self, value: float):
        """The company's total book value less the value of any intangible assets dividend by number of shares."""
        ...

    @property
    def TangibleBVPerShare3YrAvg(self) -> float:
        """The three year average for tangible book value per share."""
        ...

    @TangibleBVPerShare3YrAvg.setter
    def TangibleBVPerShare3YrAvg(self, value: float):
        """The three year average for tangible book value per share."""
        ...

    @property
    def TangibleBVPerShare5YrAvg(self) -> float:
        """The five year average for tangible book value per share."""
        ...

    @TangibleBVPerShare5YrAvg.setter
    def TangibleBVPerShare5YrAvg(self, value: float):
        """The five year average for tangible book value per share."""
        ...

    @property
    def ForwardDividend(self) -> float:
        """Latest Dividend * Frequency"""
        ...

    @ForwardDividend.setter
    def ForwardDividend(self, value: float):
        """Latest Dividend * Frequency"""
        ...

    @property
    def WorkingCapitalPerShare(self) -> float:
        """(Current Assets - Current Liabilities)/number of shares"""
        ...

    @WorkingCapitalPerShare.setter
    def WorkingCapitalPerShare(self, value: float):
        """(Current Assets - Current Liabilities)/number of shares"""
        ...

    @property
    def WorkingCapitalPerShare3YrAvg(self) -> float:
        """The three year average for working capital per share."""
        ...

    @WorkingCapitalPerShare3YrAvg.setter
    def WorkingCapitalPerShare3YrAvg(self, value: float):
        """The three year average for working capital per share."""
        ...

    @property
    def WorkingCapitalPerShare5YrAvg(self) -> float:
        """The five year average for working capital per share."""
        ...

    @WorkingCapitalPerShare5YrAvg.setter
    def WorkingCapitalPerShare5YrAvg(self, value: float):
        """The five year average for working capital per share."""
        ...

    @property
    def EVToEBITDA(self) -> float:
        """Indicates what is a company being valued per each dollar of EBITDA generated."""
        ...

    @EVToEBITDA.setter
    def EVToEBITDA(self, value: float):
        """Indicates what is a company being valued per each dollar of EBITDA generated."""
        ...

    @property
    def BuyBackYield(self) -> float:
        """The net repurchase of shares outstanding over the market capital of the company. It is a measure of shareholder return."""
        ...

    @BuyBackYield.setter
    def BuyBackYield(self, value: float):
        """The net repurchase of shares outstanding over the market capital of the company. It is a measure of shareholder return."""
        ...

    @property
    def TotalYield(self) -> float:
        """The total yield that shareholders can expect, by summing Dividend Yield and Buyback Yield."""
        ...

    @TotalYield.setter
    def TotalYield(self, value: float):
        """The total yield that shareholders can expect, by summing Dividend Yield and Buyback Yield."""
        ...

    @property
    def RatioPE5YearAverage(self) -> float:
        """The five-year average of the company's price-to-earnings ratio."""
        ...

    @RatioPE5YearAverage.setter
    def RatioPE5YearAverage(self, value: float):
        """The five-year average of the company's price-to-earnings ratio."""
        ...

    @property
    def PriceChange1M(self) -> float:
        """Price change this month, expressed as latest price/last month end price."""
        ...

    @PriceChange1M.setter
    def PriceChange1M(self, value: float):
        """Price change this month, expressed as latest price/last month end price."""
        ...

    @property
    def NormalizedPERatio(self) -> float:
        """
        Adjusted Close Price/ Normalized EPS. Normalized EPS removes onetime and unusual items from net EPS, to provide investors with
        a more accurate measure of the company's true earnings. If the result is negative, zero, >10,000 or <0.001, then null.
        """
        ...

    @NormalizedPERatio.setter
    def NormalizedPERatio(self, value: float):
        """
        Adjusted Close Price/ Normalized EPS. Normalized EPS removes onetime and unusual items from net EPS, to provide investors with
        a more accurate measure of the company's true earnings. If the result is negative, zero, >10,000 or <0.001, then null.
        """
        ...

    @property
    def PricetoEBITDA(self) -> float:
        """Adjusted close price/EBITDA Per Share. If the result is negative or zero, then null."""
        ...

    @PricetoEBITDA.setter
    def PricetoEBITDA(self, value: float):
        """Adjusted close price/EBITDA Per Share. If the result is negative or zero, then null."""
        ...

    @property
    def DivYield5Year(self) -> float:
        """Average of the last 60 monthly observations of trailing dividend yield in the last 5 years."""
        ...

    @DivYield5Year.setter
    def DivYield5Year(self, value: float):
        """Average of the last 60 monthly observations of trailing dividend yield in the last 5 years."""
        ...

    @property
    def ForwardROE(self) -> float:
        """Estimated EPS/Book Value Per Share"""
        ...

    @ForwardROE.setter
    def ForwardROE(self, value: float):
        """Estimated EPS/Book Value Per Share"""
        ...

    @property
    def ForwardROA(self) -> float:
        """Estimated EPS/Total Assets Per Share"""
        ...

    @ForwardROA.setter
    def ForwardROA(self, value: float):
        """Estimated EPS/Total Assets Per Share"""
        ...

    @property
    def TwoYearsForwardEarningYield(self) -> float:
        """2 Years Forward Estimated EPS / Adjusted Close Price"""
        ...

    @TwoYearsForwardEarningYield.setter
    def TwoYearsForwardEarningYield(self, value: float):
        """2 Years Forward Estimated EPS / Adjusted Close Price"""
        ...

    @property
    def TwoYearsForwardPERatio(self) -> float:
        """Adjusted Close Price/2 Years Forward Estimated EPS"""
        ...

    @TwoYearsForwardPERatio.setter
    def TwoYearsForwardPERatio(self, value: float):
        """Adjusted Close Price/2 Years Forward Estimated EPS"""
        ...

    @property
    def ForwardCalculationStyle(self) -> str:
        """Indicates the method used to calculate Forward Dividend. There are three options: Annual, Look-back and Manual."""
        ...

    @ForwardCalculationStyle.setter
    def ForwardCalculationStyle(self, value: str):
        """Indicates the method used to calculate Forward Dividend. There are three options: Annual, Look-back and Manual."""
        ...

    @property
    def ActualForwardDividend(self) -> float:
        """Used to collect the forward dividend for companies where our formula will not produce the correct value."""
        ...

    @ActualForwardDividend.setter
    def ActualForwardDividend(self, value: float):
        """Used to collect the forward dividend for companies where our formula will not produce the correct value."""
        ...

    @property
    def TrailingCalculationStyle(self) -> str:
        """Indicates the method used to calculate Trailing Dividend. There are two options: Look-back and Manual."""
        ...

    @TrailingCalculationStyle.setter
    def TrailingCalculationStyle(self, value: str):
        """Indicates the method used to calculate Trailing Dividend. There are two options: Look-back and Manual."""
        ...

    @property
    def ActualTrailingDividend(self) -> float:
        """Used to collect the trailing dividend for companies where our formula will not produce the correct value."""
        ...

    @ActualTrailingDividend.setter
    def ActualTrailingDividend(self, value: float):
        """Used to collect the trailing dividend for companies where our formula will not produce the correct value."""
        ...

    @property
    def TotalAssetPerShare(self) -> float:
        """Total Assets / Diluted Shares Outstanding"""
        ...

    @TotalAssetPerShare.setter
    def TotalAssetPerShare(self, value: float):
        """Total Assets / Diluted Shares Outstanding"""
        ...

    @property
    def ExpectedDividendGrowthRate(self) -> float:
        """The growth rate from the TrailingDividend to the Forward Dividend: {(Forward Dividend/Trailing Dividend) - 1}*100."""
        ...

    @ExpectedDividendGrowthRate.setter
    def ExpectedDividendGrowthRate(self, value: float):
        """The growth rate from the TrailingDividend to the Forward Dividend: {(Forward Dividend/Trailing Dividend) - 1}*100."""
        ...

    @property
    def EVtoRevenue(self) -> float:
        """Indicates what is a company being valued per each dollar of revenue generated."""
        ...

    @EVtoRevenue.setter
    def EVtoRevenue(self, value: float):
        """Indicates what is a company being valued per each dollar of revenue generated."""
        ...

    @property
    def EVtoPreTaxIncome(self) -> float:
        """Indicates what is a company being valued per each dollar of Pretax Income generated."""
        ...

    @EVtoPreTaxIncome.setter
    def EVtoPreTaxIncome(self, value: float):
        """Indicates what is a company being valued per each dollar of Pretax Income generated."""
        ...

    @property
    def EVtoTotalAssets(self) -> float:
        """
        Indicates what is a company being valued per each dollar of asset value; should be the default EV multiple used in an asset driven
        business.
        """
        ...

    @EVtoTotalAssets.setter
    def EVtoTotalAssets(self, value: float):
        """
        Indicates what is a company being valued per each dollar of asset value; should be the default EV multiple used in an asset driven
        business.
        """
        ...

    @property
    def EVtoFCF(self) -> float:
        """Indicates what is a company being valued per each dollar of free cash flow generated."""
        ...

    @EVtoFCF.setter
    def EVtoFCF(self, value: float):
        """Indicates what is a company being valued per each dollar of free cash flow generated."""
        ...

    @property
    def EVtoEBIT(self) -> float:
        """Indicates what is a company being valued per each dollar of EBIT generated."""
        ...

    @EVtoEBIT.setter
    def EVtoEBIT(self, value: float):
        """Indicates what is a company being valued per each dollar of EBIT generated."""
        ...

    @property
    def FFOPerShare(self) -> float:
        """
        Funds from operations per share; populated only for real estate investment trusts (REITs), defined as the sum of net income,
        gain/loss (realized and unrealized) on investment securities, asset impairment charge, depreciation and amortization and gain/ loss
        on the sale of business and property plant and equipment, divided by shares outstanding.
        """
        ...

    @FFOPerShare.setter
    def FFOPerShare(self, value: float):
        """
        Funds from operations per share; populated only for real estate investment trusts (REITs), defined as the sum of net income,
        gain/loss (realized and unrealized) on investment securities, asset impairment charge, depreciation and amortization and gain/ loss
        on the sale of business and property plant and equipment, divided by shares outstanding.
        """
        ...

    @property
    def PricetoCashRatio(self) -> float:
        """The ratio of a stock's price to its cash flow per share."""
        ...

    @PricetoCashRatio.setter
    def PricetoCashRatio(self, value: float):
        """The ratio of a stock's price to its cash flow per share."""
        ...

    @property
    def EVToForwardEBITDA(self) -> float:
        """Indicates what is a company being valued per each dollar of estimated EBITDA."""
        ...

    @EVToForwardEBITDA.setter
    def EVToForwardEBITDA(self, value: float):
        """Indicates what is a company being valued per each dollar of estimated EBITDA."""
        ...

    @property
    def EVToForwardRevenue(self) -> float:
        """Indicates what is a company being valued per each dollar of estimated revenue."""
        ...

    @EVToForwardRevenue.setter
    def EVToForwardRevenue(self, value: float):
        """Indicates what is a company being valued per each dollar of estimated revenue."""
        ...

    @property
    def EVToForwardEBIT(self) -> float:
        """Indicates what is a company being valued per each dollar of estimated EBIT."""
        ...

    @EVToForwardEBIT.setter
    def EVToForwardEBIT(self, value: float):
        """Indicates what is a company being valued per each dollar of estimated EBIT."""
        ...

    @property
    def EVToEBITDA1YearGrowth(self) -> float:
        """
        The one-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and
        amortization expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToEBITDA1YearGrowth.setter
    def EVToEBITDA1YearGrowth(self, value: float):
        """
        The one-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and
        amortization expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToFCF1YearGrowth(self) -> float:
        """
        The one-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)
        reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToFCF1YearGrowth.setter
    def EVToFCF1YearGrowth(self, value: float):
        """
        The one-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)
        reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToRevenue1YearGrowth(self) -> float:
        """
        The one-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @EVToRevenue1YearGrowth.setter
    def EVToRevenue1YearGrowth(self, value: float):
        """
        The one-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def EVToTotalAssets1YearGrowth(self) -> float:
        """
        The one-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @EVToTotalAssets1YearGrowth.setter
    def EVToTotalAssets1YearGrowth(self, value: float):
        """
        The one-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def PFCFRatio1YearGrowth(self) -> float:
        """
        The one-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth
        percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @PFCFRatio1YearGrowth.setter
    def PFCFRatio1YearGrowth(self, value: float):
        """
        The one-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth
        percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @property
    def PBRatio1YearGrowth(self) -> float:
        """
        The one-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @PBRatio1YearGrowth.setter
    def PBRatio1YearGrowth(self, value: float):
        """
        The one-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def PERatio1YearGrowth(self) -> float:
        """
        The one-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on the
        adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.
        """
        ...

    @PERatio1YearGrowth.setter
    def PERatio1YearGrowth(self, value: float):
        """
        The one-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on the
        adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def PSRatio1YearGrowth(self) -> float:
        """
        The one-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @PSRatio1YearGrowth.setter
    def PSRatio1YearGrowth(self, value: float):
        """
        The one-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @property
    def EVToEBIT3YrAvg(self) -> float:
        """
        The three-year average for a company's EV to EBIT ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital Lease
        + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities
        - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by EBIT (earnings minus expenses excluding
        interest and tax expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToEBIT3YrAvg.setter
    def EVToEBIT3YrAvg(self, value: float):
        """
        The three-year average for a company's EV to EBIT ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital Lease
        + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities
        - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by EBIT (earnings minus expenses excluding
        interest and tax expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToEBITDA3YrAvg(self) -> float:
        """
        The three-year average for a company's EV to EBITDA ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital
        Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market
        Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses
        excluding interest, tax, depreciation, and amortization expenses) reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @EVToEBITDA3YrAvg.setter
    def EVToEBITDA3YrAvg(self, value: float):
        """
        The three-year average for a company's EV to EBITDA ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital
        Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market
        Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses
        excluding interest, tax, depreciation, and amortization expenses) reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @property
    def EVToFCF3YrAvg(self) -> float:
        """
        The three-year average for a company's EV to free cash flow ratio: EV (Market Cap + Preferred stock + Long-Term Debt And
        Capital Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And
        Market Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash Flow
        from Operations - Capital Expenditures) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToFCF3YrAvg.setter
    def EVToFCF3YrAvg(self, value: float):
        """
        The three-year average for a company's EV to free cash flow ratio: EV (Market Cap + Preferred stock + Long-Term Debt And
        Capital Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And
        Market Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash Flow
        from Operations - Capital Expenditures) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToRevenue3YrAvg(self) -> float:
        """
        The three-year average for a company's EV to revenue ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital
        Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market
        Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the
        Financial Statements within the company filings or reports).
        """
        ...

    @EVToRevenue3YrAvg.setter
    def EVToRevenue3YrAvg(self, value: float):
        """
        The three-year average for a company's EV to revenue ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital
        Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market
        Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the
        Financial Statements within the company filings or reports).
        """
        ...

    @property
    def EVToTotalAssets3YrAvg(self) -> float:
        """
        The three-year average for a company's EV to total assets ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital
        Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market
        Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by Total Assets reported in the Financial
        Statements within the company filings or reports.
        """
        ...

    @EVToTotalAssets3YrAvg.setter
    def EVToTotalAssets3YrAvg(self, value: float):
        """
        The three-year average for a company's EV to total assets ratio: EV (Market Cap + Preferred stock + Long-Term Debt And Capital
        Lease + Short Term Debt And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market
        Securities - Securities Purchased with Agreement to Resell - Securities Borrowed) divided by Total Assets reported in the Financial
        Statements within the company filings or reports.
        """
        ...

    @property
    def EVToEBIT3YrAvgChange(self) -> float:
        """
        The growth in the three-year average for a company's EV to EBIT ratio. Morningstar calculates the growth percentage based on the
        EV to EBIT ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital Lease +
        Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with Agreement to
        Resell - Securities Borrowed) divided by EBIT (earnings minus expenses excluding interest and tax expenses) reported in the
        Financial Statements within the company filings or reports).
        """
        ...

    @EVToEBIT3YrAvgChange.setter
    def EVToEBIT3YrAvgChange(self, value: float):
        """
        The growth in the three-year average for a company's EV to EBIT ratio. Morningstar calculates the growth percentage based on the
        EV to EBIT ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital Lease +
        Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with Agreement to
        Resell - Securities Borrowed) divided by EBIT (earnings minus expenses excluding interest and tax expenses) reported in the
        Financial Statements within the company filings or reports).
        """
        ...

    @property
    def EVToEBITDA3YrAvgChange(self) -> float:
        """
        The growth in the three-year average for a company's EV to EBITDA ratio. Morningstar calculates the growth percentage based on
        the EV to EBITDA ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax depreciation and
        amortization expenses) reported in the Financial Statements within the company filings or reports).
        """
        ...

    @EVToEBITDA3YrAvgChange.setter
    def EVToEBITDA3YrAvgChange(self, value: float):
        """
        The growth in the three-year average for a company's EV to EBITDA ratio. Morningstar calculates the growth percentage based on
        the EV to EBITDA ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax depreciation and
        amortization expenses) reported in the Financial Statements within the company filings or reports).
        """
        ...

    @property
    def EVToFCF3YrAvgChange(self) -> float:
        """
        The growth in the three-year average for a company's EV to free cash flow ratio. Morningstar calculates the growth percentage
        based on the EV to free cash flow ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt
        And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities
        Purchased with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash Flow from Operations - Capital
        Expenditures) reported in the Financial Statements within the company filings or reports).
        """
        ...

    @EVToFCF3YrAvgChange.setter
    def EVToFCF3YrAvgChange(self, value: float):
        """
        The growth in the three-year average for a company's EV to free cash flow ratio. Morningstar calculates the growth percentage
        based on the EV to free cash flow ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt
        And Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities
        Purchased with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash Flow from Operations - Capital
        Expenditures) reported in the Financial Statements within the company filings or reports).
        """
        ...

    @property
    def EVToRevenue3YrAvgChange(self) -> float:
        """
        The growth in the three-year average for a company's EV to revenue ratio. Morningstar calculates the growth percentage based on
        the EV to revenue ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports).
        """
        ...

    @EVToRevenue3YrAvgChange.setter
    def EVToRevenue3YrAvgChange(self, value: float):
        """
        The growth in the three-year average for a company's EV to revenue ratio. Morningstar calculates the growth percentage based on
        the EV to revenue ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports).
        """
        ...

    @property
    def EVToTotalAssets3YrAvgChange(self) -> float:
        """
        The growth in the three-year average for a company's EV to total assets ratio. Morningstar calculates the growth percentage based
        on the EV to total assets ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports).
        """
        ...

    @EVToTotalAssets3YrAvgChange.setter
    def EVToTotalAssets3YrAvgChange(self, value: float):
        """
        The growth in the three-year average for a company's EV to total assets ratio. Morningstar calculates the growth percentage based
        on the EV to total assets ratio ((Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports).
        """
        ...

    @property
    def PFCFRatio3YrAvg(self) -> float:
        """
        The three-year average for a company's price to free cash flow ratio (the adjusted close price divided by the free cash flow per
        share reported in the Financial Statements within the company filings or reports).
        """
        ...

    @PFCFRatio3YrAvg.setter
    def PFCFRatio3YrAvg(self, value: float):
        """
        The three-year average for a company's price to free cash flow ratio (the adjusted close price divided by the free cash flow per
        share reported in the Financial Statements within the company filings or reports).
        """
        ...

    @property
    def PBRatio3YrAvg(self) -> float:
        """
        The three-year average for a company's price to book ratio (the adjusted close price divided by the book value per share reported in
        the Financial Statements within the company filings or reports).
        """
        ...

    @PBRatio3YrAvg.setter
    def PBRatio3YrAvg(self, value: float):
        """
        The three-year average for a company's price to book ratio (the adjusted close price divided by the book value per share reported in
        the Financial Statements within the company filings or reports).
        """
        ...

    @property
    def PSRatio3YrAvg(self) -> float:
        """
        The three-year average for a company's price to sales ratio (the adjusted close price divided by the total sales per share reported in
        the Financial Statements within the company filings or reports).
        """
        ...

    @PSRatio3YrAvg.setter
    def PSRatio3YrAvg(self, value: float):
        """
        The three-year average for a company's price to sales ratio (the adjusted close price divided by the total sales per share reported in
        the Financial Statements within the company filings or reports).
        """
        ...

    @property
    def PCashRatio3YrAvg(self) -> float:
        """
        The three-year average for a company's price to cash ratio (the adjusted close price divided by the cash flow per share reported in
        the Financial Statements within the company filings or reports).
        """
        ...

    @PCashRatio3YrAvg.setter
    def PCashRatio3YrAvg(self, value: float):
        """
        The three-year average for a company's price to cash ratio (the adjusted close price divided by the cash flow per share reported in
        the Financial Statements within the company filings or reports).
        """
        ...

    @property
    def PERatio3YrAvg(self) -> float:
        """
        The three-year average for a company's PE ratio (the adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio3YrAvg.setter
    def PERatio3YrAvg(self, value: float):
        """
        The three-year average for a company's PE ratio (the adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def PFCFRatio3YrAvgChange(self) -> float:
        """
        The growth in the three-year average for a company's price to free cash flow ratio. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the free cash flow per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @PFCFRatio3YrAvgChange.setter
    def PFCFRatio3YrAvgChange(self, value: float):
        """
        The growth in the three-year average for a company's price to free cash flow ratio. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the free cash flow per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def PBRatio3YrAvgChange(self) -> float:
        """
        The growth in the three-year average for a company's price to book ratio. Morningstar calculates the growth percentage based on
        the adjusted close price divided by the book value per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @PBRatio3YrAvgChange.setter
    def PBRatio3YrAvgChange(self, value: float):
        """
        The growth in the three-year average for a company's price to book ratio. Morningstar calculates the growth percentage based on
        the adjusted close price divided by the book value per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @property
    def PSRatio3YrAvgChange(self) -> float:
        """
        The growth in the three-year average for a company's price to sales ratio. Morningstar calculates the growth percentage based on
        the adjusted close price divided by the total sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @PSRatio3YrAvgChange.setter
    def PSRatio3YrAvgChange(self, value: float):
        """
        The growth in the three-year average for a company's price to sales ratio. Morningstar calculates the growth percentage based on
        the adjusted close price divided by the total sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @property
    def PERatio3YrAvgChange(self) -> float:
        """
        The growth in the three-year average for a company's PE ratio. Morningstar calculates the growth percentage based on the
        adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.
        """
        ...

    @PERatio3YrAvgChange.setter
    def PERatio3YrAvgChange(self, value: float):
        """
        The growth in the three-year average for a company's PE ratio. Morningstar calculates the growth percentage based on the
        adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def PERatio1YearHigh(self) -> float:
        """
        The one-year high for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio1YearHigh.setter
    def PERatio1YearHigh(self, value: float):
        """
        The one-year high for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def PERatio1YearLow(self) -> float:
        """
        The one-year low for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio1YearLow.setter
    def PERatio1YearLow(self, value: float):
        """
        The one-year low for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def PERatio1YearAverage(self) -> float:
        """
        The one-year average for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio1YearAverage.setter
    def PERatio1YearAverage(self, value: float):
        """
        The one-year average for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def PERatio5YearHigh(self) -> float:
        """
        The five-year high for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio5YearHigh.setter
    def PERatio5YearHigh(self, value: float):
        """
        The five-year high for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def PERatio5YearLow(self) -> float:
        """
        The five-year low for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio5YearLow.setter
    def PERatio5YearLow(self, value: float):
        """
        The five-year low for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def PERatio5YearAverage(self) -> float:
        """
        The five-year average for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio5YearAverage.setter
    def PERatio5YearAverage(self, value: float):
        """
        The five-year average for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def PERatio10YearHigh(self) -> float:
        """
        The ten-year high for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio10YearHigh.setter
    def PERatio10YearHigh(self, value: float):
        """
        The ten-year high for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def PERatio10YearLow(self) -> float:
        """
        The ten-year low for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio10YearLow.setter
    def PERatio10YearLow(self, value: float):
        """
        The ten-year low for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def PERatio10YearAverage(self) -> float:
        """
        The ten-year average for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @PERatio10YearAverage.setter
    def PERatio10YearAverage(self, value: float):
        """
        The ten-year average for a company's PE ratio (adjusted close price divided by the earnings per share reported in the Financial
        Statements within the company filings or reports).
        """
        ...

    @property
    def CAPERatio(self) -> float:
        """
        The cyclically adjusted PE ratio for a company; adjusted close price divided by earnings per share. If the result is negative, zero,
        >10,000 or <0.001, then null. Morningstar uses the CPI index for US companies and Indexes from the World Bank for the rest of
        the global markets.
        """
        ...

    @CAPERatio.setter
    def CAPERatio(self, value: float):
        """
        The cyclically adjusted PE ratio for a company; adjusted close price divided by earnings per share. If the result is negative, zero,
        >10,000 or <0.001, then null. Morningstar uses the CPI index for US companies and Indexes from the World Bank for the rest of
        the global markets.
        """
        ...

    @property
    def EVToEBITDA3YearGrowth(self) -> float:
        """
        The three-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and
        amortization expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToEBITDA3YearGrowth.setter
    def EVToEBITDA3YearGrowth(self, value: float):
        """
        The three-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and
        amortization expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToFCF3YearGrowth(self) -> float:
        """
        The three-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)
        reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToFCF3YearGrowth.setter
    def EVToFCF3YearGrowth(self, value: float):
        """
        The three-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)
        reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToRevenue3YearGrowth(self) -> float:
        """
        The three-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @EVToRevenue3YearGrowth.setter
    def EVToRevenue3YearGrowth(self, value: float):
        """
        The three-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def EVToTotalAssets3YearGrowth(self) -> float:
        """
        The three-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @EVToTotalAssets3YearGrowth.setter
    def EVToTotalAssets3YearGrowth(self, value: float):
        """
        The three-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def PFCFRatio3YearGrowth(self) -> float:
        """
        The three-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth
        percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @PFCFRatio3YearGrowth.setter
    def PFCFRatio3YearGrowth(self, value: float):
        """
        The three-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth
        percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @property
    def PBRatio3YearGrowth(self) -> float:
        """
        The three-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @PBRatio3YearGrowth.setter
    def PBRatio3YearGrowth(self, value: float):
        """
        The three-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def PERatio3YearGrowth(self) -> float:
        """
        The three-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on
        the adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @PERatio3YearGrowth.setter
    def PERatio3YearGrowth(self, value: float):
        """
        The three-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on
        the adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @property
    def PSRatio3YearGrowth(self) -> float:
        """
        The three-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @PSRatio3YearGrowth.setter
    def PSRatio3YearGrowth(self, value: float):
        """
        The three-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @property
    def EVToEBITDA5YearGrowth(self) -> float:
        """
        The five-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and
        amortization expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToEBITDA5YearGrowth.setter
    def EVToEBITDA5YearGrowth(self, value: float):
        """
        The five-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and
        amortization expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToFCF5YearGrowth(self) -> float:
        """
        The five-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)
        reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToFCF5YearGrowth.setter
    def EVToFCF5YearGrowth(self, value: float):
        """
        The five-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)
        reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToRevenue5YearGrowth(self) -> float:
        """
        The five-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @EVToRevenue5YearGrowth.setter
    def EVToRevenue5YearGrowth(self, value: float):
        """
        The five-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def EVToTotalAssets5YearGrowth(self) -> float:
        """
        The five-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @EVToTotalAssets5YearGrowth.setter
    def EVToTotalAssets5YearGrowth(self, value: float):
        """
        The five-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def PFCFRatio5YearGrowth(self) -> float:
        """
        The five-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth
        percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @PFCFRatio5YearGrowth.setter
    def PFCFRatio5YearGrowth(self, value: float):
        """
        The five-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth
        percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @property
    def PBRatio5YearGrowth(self) -> float:
        """
        The five-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @PBRatio5YearGrowth.setter
    def PBRatio5YearGrowth(self, value: float):
        """
        The five-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def PERatio5YearGrowth(self) -> float:
        """
        The five-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on the
        adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.
        """
        ...

    @PERatio5YearGrowth.setter
    def PERatio5YearGrowth(self, value: float):
        """
        The five-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on the
        adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def PSRatio5YearGrowth(self) -> float:
        """
        The five-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @PSRatio5YearGrowth.setter
    def PSRatio5YearGrowth(self, value: float):
        """
        The five-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @property
    def EVToEBITDA10YearGrowth(self) -> float:
        """
        The ten-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and
        amortization expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToEBITDA10YearGrowth.setter
    def EVToEBITDA10YearGrowth(self, value: float):
        """
        The ten-year growth in the company's EV to EBITDA on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by EBITDA (earnings minus expenses excluding interest, tax, depreciation, and
        amortization expenses) reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToFCF10YearGrowth(self) -> float:
        """
        The ten-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)
        reported in the Financial Statements within the company filings or reports.
        """
        ...

    @EVToFCF10YearGrowth.setter
    def EVToFCF10YearGrowth(self, value: float):
        """
        The ten-year growth in the company's EV to free cash flow on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by free cash flow (Cash flow from operations - Capital Expenditures)
        reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def EVToRevenue10YearGrowth(self) -> float:
        """
        The ten-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @EVToRevenue10YearGrowth.setter
    def EVToRevenue10YearGrowth(self, value: float):
        """
        The ten-year growth in the company's EV to revenue on a percentage basis. Morningstar calculates the growth percentage based
        on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital
        Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with
        Agreement to Resell - Securities Borrowed) divided by Total Revenue reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def EVToTotalAssets10YearGrowth(self) -> float:
        """
        The ten-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @EVToTotalAssets10YearGrowth.setter
    def EVToTotalAssets10YearGrowth(self, value: float):
        """
        The ten-year growth in the company's EV to total assets on a percentage basis. Morningstar calculates the growth percentage
        based on the enterprise value (Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And
        Capital Lease + Securities Sold But Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased
        with Agreement to Resell - Securities Borrowed) divided by total assets reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def PFCFRatio10YearGrowth(self) -> float:
        """
        The ten-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth
        percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @PFCFRatio10YearGrowth.setter
    def PFCFRatio10YearGrowth(self, value: float):
        """
        The ten-year growth in the company's price to free cash flow ratio on a percentage basis. Morningstar calculates the growth
        percentage based on the adjusted close price divided by the free cash flow reported in the Financial Statements within the
        company filings or reports.
        """
        ...

    @property
    def PBRatio10YearGrowth(self) -> float:
        """
        The ten-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @PBRatio10YearGrowth.setter
    def PBRatio10YearGrowth(self, value: float):
        """
        The ten-year growth in the company's price to book ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the book value per share reported in the Financial Statements within the company
        filings or reports.
        """
        ...

    @property
    def PERatio10YearGrowth(self) -> float:
        """
        The ten-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on the
        adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.
        """
        ...

    @PERatio10YearGrowth.setter
    def PERatio10YearGrowth(self, value: float):
        """
        The ten-year growth in the company's PE ratio on a percentage basis. Morningstar calculates the growth percentage based on the
        adjusted close price divided by the earnings per share reported in the Financial Statements within the company filings or reports.
        """
        ...

    @property
    def PSRatio10YearGrowth(self) -> float:
        """
        The ten-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @PSRatio10YearGrowth.setter
    def PSRatio10YearGrowth(self, value: float):
        """
        The ten-year growth in the company's price to sales ratio on a percentage basis. Morningstar calculates the growth percentage
        based on the adjusted close price divided by the sales per share reported in the Financial Statements within the company filings or
        reports.
        """
        ...

    @property
    def TwoYrsEVToForwardEBIT(self) -> float:
        """Indicates what is a company being valued per each dollar of estimated EBIT in year 2."""
        ...

    @TwoYrsEVToForwardEBIT.setter
    def TwoYrsEVToForwardEBIT(self, value: float):
        """Indicates what is a company being valued per each dollar of estimated EBIT in year 2."""
        ...

    @property
    def TwoYrsEVToForwardEBITDA(self) -> float:
        """Indicates what is a company being valued per each dollar of estimated EBITDA in year 2."""
        ...

    @TwoYrsEVToForwardEBITDA.setter
    def TwoYrsEVToForwardEBITDA(self, value: float):
        """Indicates what is a company being valued per each dollar of estimated EBITDA in year 2."""
        ...

    @property
    def FirstYearEstimatedEPSGrowth(self) -> float:
        """EPS Growth Ratio: (Estimated EPS Year 1) / (TTM Normalized diluted EPS"""
        ...

    @FirstYearEstimatedEPSGrowth.setter
    def FirstYearEstimatedEPSGrowth(self, value: float):
        """EPS Growth Ratio: (Estimated EPS Year 1) / (TTM Normalized diluted EPS"""
        ...

    @property
    def SecondYearEstimatedEPSGrowth(self) -> float:
        """EPS Growth Ratio: (Estimated EPS Year 2) / (Estimated EPS Year 1)"""
        ...

    @SecondYearEstimatedEPSGrowth.setter
    def SecondYearEstimatedEPSGrowth(self, value: float):
        """EPS Growth Ratio: (Estimated EPS Year 2) / (Estimated EPS Year 1)"""
        ...

    @property
    def NormalizedPEGatio(self) -> float:
        """Normalized ForwardPERatio / Long-term Average Normalized Earnings Growth Rate"""
        ...

    @NormalizedPEGatio.setter
    def NormalizedPEGatio(self, value: float):
        """Normalized ForwardPERatio / Long-term Average Normalized Earnings Growth Rate"""
        ...

    def __init__(self) -> None:
        """Creates an instance of the ValuationRatios class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.ValuationRatios) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class CompanyProfile(System.Object):
    """Definition of the CompanyProfile class"""

    @property
    def HeadquarterAddressLine1(self) -> str:
        """The headquarter address as given in the latest report"""
        ...

    @HeadquarterAddressLine1.setter
    def HeadquarterAddressLine1(self, value: str):
        """The headquarter address as given in the latest report"""
        ...

    @property
    def HeadquarterAddressLine2(self) -> str:
        """The headquarter address as given in the latest report"""
        ...

    @HeadquarterAddressLine2.setter
    def HeadquarterAddressLine2(self, value: str):
        """The headquarter address as given in the latest report"""
        ...

    @property
    def HeadquarterAddressLine3(self) -> str:
        """The headquarter address as given in the latest report"""
        ...

    @HeadquarterAddressLine3.setter
    def HeadquarterAddressLine3(self, value: str):
        """The headquarter address as given in the latest report"""
        ...

    @property
    def HeadquarterAddressLine4(self) -> str:
        """The headquarter address as given in the latest report"""
        ...

    @HeadquarterAddressLine4.setter
    def HeadquarterAddressLine4(self, value: str):
        """The headquarter address as given in the latest report"""
        ...

    @property
    def HeadquarterAddressLine5(self) -> str:
        """The headquarter address as given in the latest report"""
        ...

    @HeadquarterAddressLine5.setter
    def HeadquarterAddressLine5(self, value: str):
        """The headquarter address as given in the latest report"""
        ...

    @property
    def HeadquarterCity(self) -> str:
        """The headquarter city as given in the latest report"""
        ...

    @HeadquarterCity.setter
    def HeadquarterCity(self, value: str):
        """The headquarter city as given in the latest report"""
        ...

    @property
    def HeadquarterProvince(self) -> str:
        """The headquarter state or province as given in the latest report"""
        ...

    @HeadquarterProvince.setter
    def HeadquarterProvince(self, value: str):
        """The headquarter state or province as given in the latest report"""
        ...

    @property
    def HeadquarterCountry(self) -> str:
        """The headquarter country as given in the latest report"""
        ...

    @HeadquarterCountry.setter
    def HeadquarterCountry(self, value: str):
        """The headquarter country as given in the latest report"""
        ...

    @property
    def HeadquarterPostalCode(self) -> str:
        """The headquarter postal code as given in the latest report"""
        ...

    @HeadquarterPostalCode.setter
    def HeadquarterPostalCode(self, value: str):
        """The headquarter postal code as given in the latest report"""
        ...

    @property
    def HeadquarterPhone(self) -> str:
        """The headquarter phone number as given in the latest report"""
        ...

    @HeadquarterPhone.setter
    def HeadquarterPhone(self, value: str):
        """The headquarter phone number as given in the latest report"""
        ...

    @property
    def HeadquarterFax(self) -> str:
        """The headquarter fax number as given in the latest report"""
        ...

    @HeadquarterFax.setter
    def HeadquarterFax(self, value: str):
        """The headquarter fax number as given in the latest report"""
        ...

    @property
    def HeadquarterHomepage(self) -> str:
        """The headquarters' website address as given in the latest report"""
        ...

    @HeadquarterHomepage.setter
    def HeadquarterHomepage(self, value: str):
        """The headquarters' website address as given in the latest report"""
        ...

    @property
    def TotalEmployeeNumber(self) -> int:
        """
        The number of employees as indicated on the latest Annual Report, 10-K filing, Form 20-F or equivalent report indicating the
        employee count at the end of latest fiscal year.
        """
        ...

    @TotalEmployeeNumber.setter
    def TotalEmployeeNumber(self, value: int):
        """
        The number of employees as indicated on the latest Annual Report, 10-K filing, Form 20-F or equivalent report indicating the
        employee count at the end of latest fiscal year.
        """
        ...

    @property
    def ContactEmail(self) -> str:
        """Company's contact email address"""
        ...

    @ContactEmail.setter
    def ContactEmail(self, value: str):
        """Company's contact email address"""
        ...

    @property
    def AverageEmployeeNumber(self) -> int:
        """Average number of employees from Annual Report"""
        ...

    @AverageEmployeeNumber.setter
    def AverageEmployeeNumber(self, value: int):
        """Average number of employees from Annual Report"""
        ...

    @property
    def RegisteredAddressLine1(self) -> str:
        """Details for registered office contact information including address full details, phone and"""
        ...

    @RegisteredAddressLine1.setter
    def RegisteredAddressLine1(self, value: str):
        """Details for registered office contact information including address full details, phone and"""
        ...

    @property
    def RegisteredAddressLine2(self) -> str:
        """Address for registered office"""
        ...

    @RegisteredAddressLine2.setter
    def RegisteredAddressLine2(self, value: str):
        """Address for registered office"""
        ...

    @property
    def RegisteredAddressLine3(self) -> str:
        """Address for registered office"""
        ...

    @RegisteredAddressLine3.setter
    def RegisteredAddressLine3(self, value: str):
        """Address for registered office"""
        ...

    @property
    def RegisteredAddressLine4(self) -> str:
        """Address for registered office"""
        ...

    @RegisteredAddressLine4.setter
    def RegisteredAddressLine4(self, value: str):
        """Address for registered office"""
        ...

    @property
    def RegisteredCity(self) -> str:
        """City for registered office"""
        ...

    @RegisteredCity.setter
    def RegisteredCity(self, value: str):
        """City for registered office"""
        ...

    @property
    def RegisteredProvince(self) -> str:
        """Province for registered office"""
        ...

    @RegisteredProvince.setter
    def RegisteredProvince(self, value: str):
        """Province for registered office"""
        ...

    @property
    def RegisteredCountry(self) -> str:
        """Country for registered office"""
        ...

    @RegisteredCountry.setter
    def RegisteredCountry(self, value: str):
        """Country for registered office"""
        ...

    @property
    def RegisteredPostalCode(self) -> str:
        """Postal Code for registered office"""
        ...

    @RegisteredPostalCode.setter
    def RegisteredPostalCode(self, value: str):
        """Postal Code for registered office"""
        ...

    @property
    def RegisteredPhone(self) -> str:
        """Phone number for registered office"""
        ...

    @RegisteredPhone.setter
    def RegisteredPhone(self, value: str):
        """Phone number for registered office"""
        ...

    @property
    def RegisteredFax(self) -> str:
        """Fax number for registered office"""
        ...

    @RegisteredFax.setter
    def RegisteredFax(self, value: str):
        """Fax number for registered office"""
        ...

    @property
    def IsHeadOfficeSameWithRegisteredOfficeFlag(self) -> bool:
        """Flag to denote whether head and registered offices are the same"""
        ...

    @IsHeadOfficeSameWithRegisteredOfficeFlag.setter
    def IsHeadOfficeSameWithRegisteredOfficeFlag(self, value: bool):
        """Flag to denote whether head and registered offices are the same"""
        ...

    @property
    def SharesOutstanding(self) -> int:
        """
        The latest total shares outstanding reported by the company; most common source of this information is from the cover of the 10K,
        10Q, or 20F filing. This figure is an aggregated shares outstanding number for a company. It can be used to calculate the most
        accurate market cap, based on each individual share's trading price and the total aggregated shares outstanding figure.
        """
        ...

    @SharesOutstanding.setter
    def SharesOutstanding(self, value: int):
        """
        The latest total shares outstanding reported by the company; most common source of this information is from the cover of the 10K,
        10Q, or 20F filing. This figure is an aggregated shares outstanding number for a company. It can be used to calculate the most
        accurate market cap, based on each individual share's trading price and the total aggregated shares outstanding figure.
        """
        ...

    @property
    def MarketCap(self) -> int:
        """
        Price * Total SharesOutstanding.
        The most current market cap for example, would be the most recent closing price x the most recent reported shares outstanding.
        For ADR share classes, market cap is price * (ordinary shares outstanding / adr ratio).
        """
        ...

    @MarketCap.setter
    def MarketCap(self, value: int):
        """
        Price * Total SharesOutstanding.
        The most current market cap for example, would be the most recent closing price x the most recent reported shares outstanding.
        For ADR share classes, market cap is price * (ordinary shares outstanding / adr ratio).
        """
        ...

    @property
    def EnterpriseValue(self) -> int:
        """
        This number tells you what cash return you would get if you bought the entire company, including its debt.        Enterprise Value =
        Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital Lease + Securities Sold But
        Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with Agreement to Resell - Securities
        Borrowed.
        """
        ...

    @EnterpriseValue.setter
    def EnterpriseValue(self, value: int):
        """
        This number tells you what cash return you would get if you bought the entire company, including its debt.        Enterprise Value =
        Market Cap + Preferred stock + Long-Term Debt And Capital Lease + Short Term Debt And Capital Lease + Securities Sold But
        Not Yet Repurchased  - Cash, Cash Equivalent And Market Securities - Securities Purchased with Agreement to Resell - Securities
        Borrowed.
        """
        ...

    @property
    def ShareClassLevelSharesOutstanding(self) -> int:
        """
        The latest shares outstanding reported by the company of a particular share class; most common source of this information is from
        the cover of the 10K, 10Q, or 20F filing. This figure is an aggregated shares outstanding number for a particular share class of the
        company.
        """
        ...

    @ShareClassLevelSharesOutstanding.setter
    def ShareClassLevelSharesOutstanding(self, value: int):
        """
        The latest shares outstanding reported by the company of a particular share class; most common source of this information is from
        the cover of the 10K, 10Q, or 20F filing. This figure is an aggregated shares outstanding number for a particular share class of the
        company.
        """
        ...

    @property
    def SharesOutstandingWithBalanceSheetEndingDate(self) -> int:
        """
        Total shares outstanding reported by the company as of the balance sheet period ended date. The most common source of this
        information is from the 10K, 10Q, or 20F filing. This figure is an aggregated shares outstanding number for a company.
        """
        ...

    @SharesOutstandingWithBalanceSheetEndingDate.setter
    def SharesOutstandingWithBalanceSheetEndingDate(self, value: int):
        """
        Total shares outstanding reported by the company as of the balance sheet period ended date. The most common source of this
        information is from the 10K, 10Q, or 20F filing. This figure is an aggregated shares outstanding number for a company.
        """
        ...

    @property
    def ReasonofSharesChange(self) -> str:
        """
        The reason for the change in a company's total shares outstanding from the previous record. Examples could be share issuances or
        share buy-back. This field will only be populated when total shares outstanding is collected from a press release.
        """
        ...

    @ReasonofSharesChange.setter
    def ReasonofSharesChange(self, value: str):
        """
        The reason for the change in a company's total shares outstanding from the previous record. Examples could be share issuances or
        share buy-back. This field will only be populated when total shares outstanding is collected from a press release.
        """
        ...

    def __init__(self) -> None:
        """Creates an instance of the CompanyProfile class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.CompanyProfile) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class AssetClassification(System.Object):
    """Definition of the AssetClassification class"""

    @property
    def StockType(self) -> int:
        """
        The purpose of the Stock Types is to group companies according to the underlying fundamentals of their business. They answer the
        question: If I buy this stock, what kind of company am I buying? Unlike the style box, the emphasis with the Stock Types is on
        income statement, balance sheet, and cash-flow data-not price data or valuation multiples. We focus on the company, not the
        stock. Morningstar calculates this figure in-house on a monthly basis.
        """
        ...

    @StockType.setter
    def StockType(self, value: int):
        """
        The purpose of the Stock Types is to group companies according to the underlying fundamentals of their business. They answer the
        question: If I buy this stock, what kind of company am I buying? Unlike the style box, the emphasis with the Stock Types is on
        income statement, balance sheet, and cash-flow data-not price data or valuation multiples. We focus on the company, not the
        stock. Morningstar calculates this figure in-house on a monthly basis.
        """
        ...

    @property
    def StyleBox(self) -> int:
        """
        The Morningstar Equity Style Box is a grid that provides a graphical representation of the investment style of stocks and portfolios.
        It classifies securities according to market capitalization (the vertical axis) and value-growth scores (the horizontal axis) and allows
        us to provide analysis on a 5-by-5 Style Box as well as providing the traditional style box assignment, which is the basis for the
        Morningstar Category. Two of the style categories, value and growth, are common to both stocks and portfolios. However, for
        stocks, the central column of the style box represents the core style (those stocks for which neither value nor growth
        characteristics dominate); for portfolios, it represents the blend style.
        """
        ...

    @StyleBox.setter
    def StyleBox(self, value: int):
        """
        The Morningstar Equity Style Box is a grid that provides a graphical representation of the investment style of stocks and portfolios.
        It classifies securities according to market capitalization (the vertical axis) and value-growth scores (the horizontal axis) and allows
        us to provide analysis on a 5-by-5 Style Box as well as providing the traditional style box assignment, which is the basis for the
        Morningstar Category. Two of the style categories, value and growth, are common to both stocks and portfolios. However, for
        stocks, the central column of the style box represents the core style (those stocks for which neither value nor growth
        characteristics dominate); for portfolios, it represents the blend style.
        """
        ...

    @property
    def GrowthGrade(self) -> str:
        """
        The growth grade is based on the trend in revenue per share using data from the past five years. For the purpose of calculating
        revenue per share we use the past five years' revenue figures and corresponding year-end fully diluted shares outstanding; if year-
        end fully diluted shares outstanding is not available, we calculate this figure by dividing the company's reported net income
        applicable to common shareholders by the reported fully diluted earnings per share. A company must have a minimum of four
        consecutive years of positive and non-zero revenue, including the latest fiscal year, to qualify for a grade.
        In calculating the revenue per share growth rate, we calculate the slope of the regression line of historical revenue per share. We
        then divide the slope of the regression line by the arithmetic average of historical revenue per share figures. The result of the
        regression is a normalized historical increase or decrease in the rate of growth for sales per share. We then calculate a z-score by
        subtracting the universe mean revenue growth from the company's revenue growth, and dividing by the standard deviation of the
        universe's growth rates.
        Stocks are sorted based on the z-score of their revenue per share growth rate calculated above, from the most negative z-score to
        the most positive z-score. Stocks are then ranked based on their z-score from 1 to the total number of qualified stocks. We assign
        grades based on this ranking. Stocks are assigned A, B, C, D, or F. Morningstar calculates this figure in-house on a monthly basis.
        """
        ...

    @GrowthGrade.setter
    def GrowthGrade(self, value: str):
        """
        The growth grade is based on the trend in revenue per share using data from the past five years. For the purpose of calculating
        revenue per share we use the past five years' revenue figures and corresponding year-end fully diluted shares outstanding; if year-
        end fully diluted shares outstanding is not available, we calculate this figure by dividing the company's reported net income
        applicable to common shareholders by the reported fully diluted earnings per share. A company must have a minimum of four
        consecutive years of positive and non-zero revenue, including the latest fiscal year, to qualify for a grade.
        In calculating the revenue per share growth rate, we calculate the slope of the regression line of historical revenue per share. We
        then divide the slope of the regression line by the arithmetic average of historical revenue per share figures. The result of the
        regression is a normalized historical increase or decrease in the rate of growth for sales per share. We then calculate a z-score by
        subtracting the universe mean revenue growth from the company's revenue growth, and dividing by the standard deviation of the
        universe's growth rates.
        Stocks are sorted based on the z-score of their revenue per share growth rate calculated above, from the most negative z-score to
        the most positive z-score. Stocks are then ranked based on their z-score from 1 to the total number of qualified stocks. We assign
        grades based on this ranking. Stocks are assigned A, B, C, D, or F. Morningstar calculates this figure in-house on a monthly basis.
        """
        ...

    @property
    def FinancialHealthGrade(self) -> str:
        """
        Instead of using accounting-based ratios to formulate a measure to reflect the financial health of a firm, we use structural or
        contingent claim models. Structural models take advantage of both market information and accounting financial information. The
        firm's equity in such models is viewed as a call option on the value of the firm's assets. If the value of the assets is not sufficient to
        cover the firm's liabilities (the strike price), default is expected to occur, and the call option expires worthless and the firm is turned
        over to its creditors. To estimate a distance to default, the value of the firm's liabilities is obtained from the firm's latest balance
        sheet and incorporated into the model. We then rank the calculated distance to default and award 10% of the universe A's, 20%
        B's, 40% C's, 20% D's, and 10% F's. Morningstar calculates this figure in-house on a daily basis.
        """
        ...

    @FinancialHealthGrade.setter
    def FinancialHealthGrade(self, value: str):
        """
        Instead of using accounting-based ratios to formulate a measure to reflect the financial health of a firm, we use structural or
        contingent claim models. Structural models take advantage of both market information and accounting financial information. The
        firm's equity in such models is viewed as a call option on the value of the firm's assets. If the value of the assets is not sufficient to
        cover the firm's liabilities (the strike price), default is expected to occur, and the call option expires worthless and the firm is turned
        over to its creditors. To estimate a distance to default, the value of the firm's liabilities is obtained from the firm's latest balance
        sheet and incorporated into the model. We then rank the calculated distance to default and award 10% of the universe A's, 20%
        B's, 40% C's, 20% D's, and 10% F's. Morningstar calculates this figure in-house on a daily basis.
        """
        ...

    @property
    def ProfitabilityGrade(self) -> str:
        """
        The profitability grade for all qualified companies in Morningstar's stock universe is based on valuation of return on shareholders'
        equity (ROE) using data from the past five years. Morningstar's universe of stocks is first filtered for adequacy of historical ROE
        figures. Companies with less than four years of consecutive ROE figures including the ROE figure for the latest fiscal year are tossed
        from calculations and are assigned "--" for the profitability grade. For the remaining qualified universe of stocks the profitability
        grade is based on the valuation of the following three components, which are assigned different weights; the historical growth rate
        of ROE, the average level of historical ROE, the level of ROE in the latest fiscal year of the company.
        Stocks are assigned A, B, C, D, or F. Morningstar calculates this figure in-house on a monthly basis.
        """
        ...

    @ProfitabilityGrade.setter
    def ProfitabilityGrade(self, value: str):
        """
        The profitability grade for all qualified companies in Morningstar's stock universe is based on valuation of return on shareholders'
        equity (ROE) using data from the past five years. Morningstar's universe of stocks is first filtered for adequacy of historical ROE
        figures. Companies with less than four years of consecutive ROE figures including the ROE figure for the latest fiscal year are tossed
        from calculations and are assigned "--" for the profitability grade. For the remaining qualified universe of stocks the profitability
        grade is based on the valuation of the following three components, which are assigned different weights; the historical growth rate
        of ROE, the average level of historical ROE, the level of ROE in the latest fiscal year of the company.
        Stocks are assigned A, B, C, D, or F. Morningstar calculates this figure in-house on a monthly basis.
        """
        ...

    @property
    def MorningstarIndustryCode(self) -> int:
        """
        Equities are mapped into one of 148 industries, the one which most accurately reflects the underlying business of that company.
        This mapping is based on publicly available information about each company and uses annual reports, Form
        10-Ks and Morningstar Equity Analyst input as its primary source. Other secondary sources of information may include company
        web sites, sell-side research (if available) and trade publications. By and large, equities are mapped into the industries that best
        reflect each company's largest source of revenue and income. If the company has more than three sources of revenue and income
        and there is no clear dominant revenue and income stream, the company is assigned to the Conglomerates industry. Based on
        Morningstar analyst research or other third party information, Morningstar may change industry assignments to more accurately
        reflect the changing businesses of companies.
        """
        ...

    @MorningstarIndustryCode.setter
    def MorningstarIndustryCode(self, value: int):
        """
        Equities are mapped into one of 148 industries, the one which most accurately reflects the underlying business of that company.
        This mapping is based on publicly available information about each company and uses annual reports, Form
        10-Ks and Morningstar Equity Analyst input as its primary source. Other secondary sources of information may include company
        web sites, sell-side research (if available) and trade publications. By and large, equities are mapped into the industries that best
        reflect each company's largest source of revenue and income. If the company has more than three sources of revenue and income
        and there is no clear dominant revenue and income stream, the company is assigned to the Conglomerates industry. Based on
        Morningstar analyst research or other third party information, Morningstar may change industry assignments to more accurately
        reflect the changing businesses of companies.
        """
        ...

    @property
    def MorningstarIndustryGroupCode(self) -> int:
        """
        Industries are mapped into 69 industry groups based on their common operational characteristics. If a particular industry has unique
        operating characteristics-or simply lacks commonality with other industries-it would map into its own group. However, any
        industry group containing just one single industry does not necessarily imply that that industry is dominant or otherwise important.
        The assignment simply reflects the lack of a sufficient amount of shared traits among industries. See appendix for mappings.
        """
        ...

    @MorningstarIndustryGroupCode.setter
    def MorningstarIndustryGroupCode(self, value: int):
        """
        Industries are mapped into 69 industry groups based on their common operational characteristics. If a particular industry has unique
        operating characteristics-or simply lacks commonality with other industries-it would map into its own group. However, any
        industry group containing just one single industry does not necessarily imply that that industry is dominant or otherwise important.
        The assignment simply reflects the lack of a sufficient amount of shared traits among industries. See appendix for mappings.
        """
        ...

    @property
    def MorningstarSectorCode(self) -> int:
        """Industry groups are consolidated into 11 sectors. See appendix for mappings."""
        ...

    @MorningstarSectorCode.setter
    def MorningstarSectorCode(self, value: int):
        """Industry groups are consolidated into 11 sectors. See appendix for mappings."""
        ...

    @property
    def MorningstarEconomySphereCode(self) -> int:
        """
        Sectors are consolidated into three major economic spheres or Super Sectors: Cyclical, Defensive and Sensitive.  See appendix for
        mappings.
        """
        ...

    @MorningstarEconomySphereCode.setter
    def MorningstarEconomySphereCode(self, value: int):
        """
        Sectors are consolidated into three major economic spheres or Super Sectors: Cyclical, Defensive and Sensitive.  See appendix for
        mappings.
        """
        ...

    @property
    def SIC(self) -> int:
        """
        Standard Industrial Classification System (SIC) is a system for classifying a business according to economic activity. See separate
        reference document for a list of Sic Codes/Mappings.
        """
        ...

    @SIC.setter
    def SIC(self, value: int):
        """
        Standard Industrial Classification System (SIC) is a system for classifying a business according to economic activity. See separate
        reference document for a list of Sic Codes/Mappings.
        """
        ...

    @property
    def NAICS(self) -> int:
        """
        An acronym for North American Industry Classification System, it is a 6 digit numerical classification assigned to individual
        companies.  Developed jointly by the U.S., Canada, and Mexico to provide new comparability in statistics about business activity
        across North America.  It is intended to replace the U.S. Standard Industrial Classification (SIC) system. See separate reference
        document for a list of NAICS Codes/Mappings.
        """
        ...

    @NAICS.setter
    def NAICS(self, value: int):
        """
        An acronym for North American Industry Classification System, it is a 6 digit numerical classification assigned to individual
        companies.  Developed jointly by the U.S., Canada, and Mexico to provide new comparability in statistics about business activity
        across North America.  It is intended to replace the U.S. Standard Industrial Classification (SIC) system. See separate reference
        document for a list of NAICS Codes/Mappings.
        """
        ...

    @property
    def StyleScore(self) -> float:
        """
        The scores for a stock's value and growth characteristics determine its horizontal placement. The Value-Growth Score is a
        reflection of the aggregate expectations of market participants for the future growth and required rate of return for a stock. We
        infer these expectations from the relation between current market prices and future growth and cost of capital expectations under
        the assumption of rational market participants and a simple model of stock value.
        """
        ...

    @StyleScore.setter
    def StyleScore(self, value: float):
        """
        The scores for a stock's value and growth characteristics determine its horizontal placement. The Value-Growth Score is a
        reflection of the aggregate expectations of market participants for the future growth and required rate of return for a stock. We
        infer these expectations from the relation between current market prices and future growth and cost of capital expectations under
        the assumption of rational market participants and a simple model of stock value.
        """
        ...

    @property
    def SizeScore(self) -> float:
        """
        Rather than a fixed number of large cap or small cap stocks, Morningstar uses a flexible system that isn't adversely affected by
        overall movements in the market. The Morningstar stock universe represents approximately 99% of the U.S. market for actively
        traded stocks. Giant-cap stocks are defined as the group that accounts for the top 40% of the capitalization of the Morningstar
        domestic stock universe; large-cap stocks represent the next 30%; mid-cap stocks represent the next 20%; small-cap stocks
        represent the next 7%; and micro-cap stocks represent the remaining 3%. Each stock is given a Size Score that ranges from -100
        (very micro) to 400 (very giant). When classifying stocks to a Style Box, giant is included in large and micro is included in small.
        """
        ...

    @SizeScore.setter
    def SizeScore(self, value: float):
        """
        Rather than a fixed number of large cap or small cap stocks, Morningstar uses a flexible system that isn't adversely affected by
        overall movements in the market. The Morningstar stock universe represents approximately 99% of the U.S. market for actively
        traded stocks. Giant-cap stocks are defined as the group that accounts for the top 40% of the capitalization of the Morningstar
        domestic stock universe; large-cap stocks represent the next 30%; mid-cap stocks represent the next 20%; small-cap stocks
        represent the next 7%; and micro-cap stocks represent the remaining 3%. Each stock is given a Size Score that ranges from -100
        (very micro) to 400 (very giant). When classifying stocks to a Style Box, giant is included in large and micro is included in small.
        """
        ...

    @property
    def GrowthScore(self) -> float:
        """
        A high overall growth score indicates that a stock's per-share earnings, book value, revenues, and cash flow are expected to grow
        quickly relative to other stocks in the same scoring group. A weak growth orientation does not necessarily mean that a stock has a
        strong value orientation.
        """
        ...

    @GrowthScore.setter
    def GrowthScore(self, value: float):
        """
        A high overall growth score indicates that a stock's per-share earnings, book value, revenues, and cash flow are expected to grow
        quickly relative to other stocks in the same scoring group. A weak growth orientation does not necessarily mean that a stock has a
        strong value orientation.
        """
        ...

    @property
    def ValueScore(self) -> float:
        """
        A high value score indicates that a stock's price is relatively low, given the anticipated per-sharing earnings, book value, revenues,
        cash flow, and dividends that the stock provides to investors. A high price relative to these measures indicates that a stock's value
        orientation is weak, but it does not necessarily mean that the stock is growth-oriented.
        """
        ...

    @ValueScore.setter
    def ValueScore(self, value: float):
        """
        A high value score indicates that a stock's price is relatively low, given the anticipated per-sharing earnings, book value, revenues,
        cash flow, and dividends that the stock provides to investors. A high price relative to these measures indicates that a stock's value
        orientation is weak, but it does not necessarily mean that the stock is growth-oriented.
        """
        ...

    @property
    def NACE(self) -> float:
        """NACE is a European standard classification of economic activities maintained by Eurostat."""
        ...

    @NACE.setter
    def NACE(self, value: float):
        """NACE is a European standard classification of economic activities maintained by Eurostat."""
        ...

    @property
    def CANNAICS(self) -> int:
        """
        Similar to NAICS (data point 3010, above), this is specifically for Canadian classifications.
        An acronym for North American Industry Classification System, it is a 6 digit numerical classification assigned to individual
        companies.  Developed jointly by the U.S., Canada, and Mexico to provide new comparability in statistics about business activity
        across North America.  It is intended to replace the U.S. Standard Industrial Classification (SIC) system. See separate reference
        document for a list of NAICS Codes/Mappings.
        The initial SIC and NAICS listed is the Primary based on revenue generation; followed by Secondary SIC and NAICS when
        applicable. Both SIC and NAICS are manually collected and assigned.
        """
        ...

    @CANNAICS.setter
    def CANNAICS(self, value: int):
        """
        Similar to NAICS (data point 3010, above), this is specifically for Canadian classifications.
        An acronym for North American Industry Classification System, it is a 6 digit numerical classification assigned to individual
        companies.  Developed jointly by the U.S., Canada, and Mexico to provide new comparability in statistics about business activity
        across North America.  It is intended to replace the U.S. Standard Industrial Classification (SIC) system. See separate reference
        document for a list of NAICS Codes/Mappings.
        The initial SIC and NAICS listed is the Primary based on revenue generation; followed by Secondary SIC and NAICS when
        applicable. Both SIC and NAICS are manually collected and assigned.
        """
        ...

    def __init__(self) -> None:
        """Creates an instance of the AssetClassification class"""
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.AssetClassification) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class FineFundamental(QuantConnect.Data.BaseData):
    """Definition of the FineFundamental class"""

    @property
    def EndTime(self) -> datetime.datetime:
        """The end time of this data."""
        ...

    @EndTime.setter
    def EndTime(self, value: datetime.datetime):
        """The end time of this data."""
        ...

    @property
    def MarketCap(self) -> int:
        """
        Price * Total SharesOutstanding.
        The most current market cap for example, would be the most recent closing price x the most recent reported shares outstanding.
        For ADR share classes, market cap is price * (ordinary shares outstanding / adr ratio).
        """
        ...

    @property
    def CompanyReference(self) -> QuantConnect.Data.Fundamental.CompanyReference:
        """The instance of the CompanyReference class"""
        ...

    @CompanyReference.setter
    def CompanyReference(self, value: QuantConnect.Data.Fundamental.CompanyReference):
        """The instance of the CompanyReference class"""
        ...

    @property
    def SecurityReference(self) -> QuantConnect.Data.Fundamental.SecurityReference:
        """The instance of the SecurityReference class"""
        ...

    @SecurityReference.setter
    def SecurityReference(self, value: QuantConnect.Data.Fundamental.SecurityReference):
        """The instance of the SecurityReference class"""
        ...

    @property
    def FinancialStatements(self) -> QuantConnect.Data.Fundamental.FinancialStatements:
        """The instance of the FinancialStatements class"""
        ...

    @FinancialStatements.setter
    def FinancialStatements(self, value: QuantConnect.Data.Fundamental.FinancialStatements):
        """The instance of the FinancialStatements class"""
        ...

    @property
    def EarningReports(self) -> QuantConnect.Data.Fundamental.EarningReports:
        """The instance of the EarningReports class"""
        ...

    @EarningReports.setter
    def EarningReports(self, value: QuantConnect.Data.Fundamental.EarningReports):
        """The instance of the EarningReports class"""
        ...

    @property
    def OperationRatios(self) -> QuantConnect.Data.Fundamental.OperationRatios:
        """The instance of the OperationRatios class"""
        ...

    @OperationRatios.setter
    def OperationRatios(self, value: QuantConnect.Data.Fundamental.OperationRatios):
        """The instance of the OperationRatios class"""
        ...

    @property
    def EarningRatios(self) -> QuantConnect.Data.Fundamental.EarningRatios:
        """The instance of the EarningRatios class"""
        ...

    @EarningRatios.setter
    def EarningRatios(self, value: QuantConnect.Data.Fundamental.EarningRatios):
        """The instance of the EarningRatios class"""
        ...

    @property
    def ValuationRatios(self) -> QuantConnect.Data.Fundamental.ValuationRatios:
        """The instance of the ValuationRatios class"""
        ...

    @ValuationRatios.setter
    def ValuationRatios(self, value: QuantConnect.Data.Fundamental.ValuationRatios):
        """The instance of the ValuationRatios class"""
        ...

    @property
    def CompanyProfile(self) -> QuantConnect.Data.Fundamental.CompanyProfile:
        """The instance of the CompanyProfile class"""
        ...

    @CompanyProfile.setter
    def CompanyProfile(self, value: QuantConnect.Data.Fundamental.CompanyProfile):
        """The instance of the CompanyProfile class"""
        ...

    @property
    def AssetClassification(self) -> QuantConnect.Data.Fundamental.AssetClassification:
        """The instance of the AssetClassification class"""
        ...

    @AssetClassification.setter
    def AssetClassification(self, value: QuantConnect.Data.Fundamental.AssetClassification):
        """The instance of the AssetClassification class"""
        ...

    def __init__(self) -> None:
        """Creates an instance of the FineFundamental class"""
        ...

    @staticmethod
    def CreateUniverseSymbol(market: str, addGuid: bool = True) -> QuantConnect.Symbol:
        """
        Creates the universe symbol used for fine fundamental data
        
        :param market: The market
        :param addGuid: True, will add a random GUID to allow uniqueness
        :returns: A fine universe symbol for the specified market.
        """
        ...

    def GetSource(self, config: QuantConnect.Data.SubscriptionDataConfig, date: typing.Union[datetime.datetime, datetime.date], isLiveMode: bool) -> QuantConnect.Data.SubscriptionDataSource:
        """Return the URL string source of the file. This will be converted to a stream"""
        ...

    def Reader(self, config: QuantConnect.Data.SubscriptionDataConfig, line: str, date: typing.Union[datetime.datetime, datetime.date], isLiveMode: bool) -> QuantConnect.Data.BaseData:
        """
        Reader converts each line of the data source into BaseData objects. Each data type creates its own factory method, and returns a new instance of the object
        each time it is called. The returned object is assumed to be time stamped in the config.ExchangeTimeZone.
        """
        ...

    def UpdateValues(self, update: QuantConnect.Data.Fundamental.FineFundamental) -> None:
        """
        Applies updated values from  to this instance
        
        :param update: The next data update for this instance
        """
        ...


class Period(System.Object):
    """Period constants for multi-period fields"""

    OneMonth: str = "1M"
    """Period constant for one month"""

    TwoMonths: str = "2M"
    """Period constant for two months"""

    ThreeMonths: str = "3M"
    """Period constant for three months"""

    SixMonths: str = "6M"
    """Period constant for six months"""

    NineMonths: str = "9M"
    """Period constant for nine months"""

    TwelveMonths: str = "12M"
    """Period constant for twelve months"""

    OneYear: str = "1Y"
    """Period constant for one year"""

    TwoYears: str = "2Y"
    """Period constant for two years"""

    ThreeYears: str = "3Y"
    """Period constant for three years"""

    FiveYears: str = "5Y"
    """Period constant for five years"""

    TenYears: str = "10Y"
    """Period constant for ten years"""


class Fundamentals(QuantConnect.Data.Fundamental.FineFundamental):
    """Defines a merged viw of FineFundamental and CoarseFundamental"""

    @property
    def Market(self) -> str:
        """Gets the market for this symbol"""
        ...

    @Market.setter
    def Market(self, value: str):
        """Gets the market for this symbol"""
        ...

    @property
    def DollarVolume(self) -> float:
        """Gets the day's dollar volume for this symbol"""
        ...

    @DollarVolume.setter
    def DollarVolume(self, value: float):
        """Gets the day's dollar volume for this symbol"""
        ...

    @property
    def Volume(self) -> int:
        """Gets the day's total volume"""
        ...

    @Volume.setter
    def Volume(self, value: int):
        """Gets the day's total volume"""
        ...

    @property
    def HasFundamentalData(self) -> bool:
        """Returns whether the symbol has fundamental data for the given date"""
        ...

    @HasFundamentalData.setter
    def HasFundamentalData(self, value: bool):
        """Returns whether the symbol has fundamental data for the given date"""
        ...

    def __init__(self) -> None:
        """Default constructor"""
        ...

    def GetSource(self, config: QuantConnect.Data.SubscriptionDataConfig, date: typing.Union[datetime.datetime, datetime.date], isLiveMode: bool) -> QuantConnect.Data.SubscriptionDataSource:
        """Return the URL string source of the file. This will be converted to a stream"""
        ...

    def Reader(self, config: QuantConnect.Data.SubscriptionDataConfig, line: str, date: typing.Union[datetime.datetime, datetime.date], isLiveMode: bool) -> QuantConnect.Data.BaseData:
        """
        Reader converts each line of the data source into BaseData objects. Each data type creates its own factory method, and returns a new instance of the object
        each time it is called. The returned object is assumed to be time stamped in the config.ExchangeTimeZone.
        """
        ...


