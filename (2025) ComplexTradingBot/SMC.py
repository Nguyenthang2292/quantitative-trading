import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from dataclasses import dataclass
from enum import Enum
import plotly.graph_objects as go


# ---------------------------------------------
# 1) ƒê·ªãnh nghƒ©a c√°c H·∫∞NG S·ªê, ENUM
# ---------------------------------------------

class Leg(Enum):
    BEARISH_LEG = 0
    BULLISH_LEG = 1

class Bias(Enum):
    BEARISH = -1
    BULLISH = 1

# (M√†u s·∫Øc - tu·ª≥ v√†o matplotlib, ta c√≥ th·ªÉ d√πng 'r', 'g', v.v. ho·∫∑c m√£ hex)
COLOR_BULLISH = "green"
COLOR_BEARISH = "red"

# Ch·∫ø ƒë·ªô hi·ªÉn th·ªã (v√≠ d·ª•, Historical/PRESENT), ta demo 1 bi·∫øn c·ª©ng
MODE = "Historical"  # Ho·∫∑c "Present"

# ---------------------------------------------
# 2) C·∫•u tr√∫c d·ªØ li·ªáu chuy·ªÉn t·ª´ 'type' Pine Script
# ---------------------------------------------

@dataclass
class Alerts:
    """C√°c c·ªù (flag) cho alert, ta c√≥ th·ªÉ th√™m d·∫ßn."""
    swingBullishBOS: bool = False
    swingBearishBOS: bool = False
    swingBullishCHoCH: bool = False
    swingBearishCHoCH: bool = False
    # ... c√≥ th·ªÉ b·ªï sung Internal BOS/CHoCH, OB breakout, FVG, etc.

@dataclass
class Pivot:
    """ƒê·∫°i di·ªán cho 1 pivot (swing)"""
    currentLevel: float = np.nan
    lastLevel: float = np.nan
    crossed: bool = False  # Gi√° ƒë√£ v∆∞·ª£t pivot ch∆∞a
    barIndex: int = 0      # index c·ªßa thanh pivot
    time: pd.Timestamp = None

@dataclass
class Trend:
    """ƒê·∫°i di·ªán cho xu h∆∞·ªõng (bias)"""
    bias: Bias = Bias.BULLISH  # ho·∫∑c Bias.BEARISH

# ---------------------------------------------
# 3) H√†m ti·ªán √≠ch
# ---------------------------------------------

def identify_leg(highs, lows, idx, lookback=5):
    """
    X√°c ƒë·ªãnh leg ·ªü v·ªã tr√≠ idx, d·ª±a v√†o lookback n·∫øn tr∆∞·ªõc.
    """
    if idx - lookback < 0 or idx >= len(highs):
        print(f"‚ùå L·ªói: idx ({idx}) v∆∞·ª£t qu√° ph·∫°m vi c·ªßa highs (size={len(highs)})")
        return None

    segment_highs = highs.iloc[idx-lookback : idx+1]
    segment_lows  = lows.iloc[idx-lookback : idx+1]

    if segment_highs.empty or segment_lows.empty:
        print(f"‚ö†Ô∏è C·∫£nh b√°o: segment_highs ho·∫∑c segment_lows r·ªóng t·∫°i idx={idx}")
        return None

    local_max = segment_highs.max() if not segment_highs.empty else np.nan
    local_min = segment_lows.min() if not segment_lows.empty else np.nan

    print(f"üîé DEBUG - Index {idx}: highs[idx]={highs.iloc[idx]}, local_max={local_max}")

    # S·ª≠a ƒë·ªïi ƒëi·ªÅu ki·ªán ƒë·ªÉ nh·∫≠n di·ªán leg t·ªët h∆°n
    is_bearish_leg = (highs.iloc[idx] >= local_max) and (highs.iloc[idx-1] < local_max)
    is_bullish_leg = (lows.iloc[idx] <= local_min) and (lows.iloc[idx-1] > local_min)

    print(f"  üîπ is_bearish_leg: {is_bearish_leg}, is_bullish_leg: {is_bullish_leg}")

    if is_bearish_leg:
        print("  ‚úÖ Bearish Leg detected!")
        return Leg.BEARISH_LEG
    elif is_bullish_leg:
        print("  ‚úÖ Bullish Leg detected!")
        return Leg.BULLISH_LEG

    print("  ‚ùå No leg detected.")
    return None


def detect_swing_structure(data, lookback=5):
    """
    H√†m ch√≠nh ƒë·ªÉ duy·ªát qua DataFrame, x√°c ƒë·ªãnh pivot & BOS/CHoCH ·ªü c·∫•p swing
    (r·∫•t gi·∫£n l∆∞·ª£c).
    """
    # C√°c pivot "cao" / "th·∫•p" (ch√∫ng ta gi·∫£ l·∫≠p)
    swingHigh = Pivot()
    swingLow  = Pivot()
    # Xu h∆∞·ªõng swing
    swingTrend = Trend(bias=Bias.BULLISH)  # gi·∫£ ƒë·ªãnh ban ƒë·∫ßu

    # List ƒë·ªÉ ghi l·∫°i ƒë√°nh d·∫•u BOS/CHoCH
    bos_choch_marks = []  # (index, price, text, color)

    # Alerts
    currentAlerts = Alerts()

    # DataFrame: data.index => m·ªëc th·ªùi gian, c·ªôt: [Open, High, Low, Close, ...]
    highs = data["High"]
    lows  = data["Low"]
    close = data["Close"]

    # Leg c≈©
    prev_leg = None

    for i in range(len(data)):
        # 1) X√°c ƒë·ªãnh leg
        curr_leg = identify_leg(highs, lows, i, lookback=lookback)

        # 2) Ki·ªÉm tra xem c√≥ "start of new leg" kh√¥ng (gi·∫£ l·∫≠p logic "startOfNewLeg")
        if curr_leg is not None and prev_leg != curr_leg:
            # => pivot thay ƒë·ªïi
            if curr_leg == Leg.BULLISH_LEG:
                # pivot Low m·ªõi
                swingLow.lastLevel = swingLow.currentLevel
                swingLow.currentLevel = lows[i]
                swingLow.crossed = False
                swingLow.barIndex = i
                swingLow.time = data.index[i]
            elif curr_leg == Leg.BEARISH_LEG:
                # pivot High m·ªõi
                swingHigh.lastLevel = swingHigh.currentLevel
                swingHigh.currentLevel = highs[i]
                swingHigh.crossed = False
                swingHigh.barIndex = i
                swingHigh.time = data.index[i]

            prev_leg = curr_leg

        # 3) Ki·ªÉm tra breakout pivot => BOS / CHoCH
        #    Gi·∫£ s·ª≠ khi close > pivotHigh => bullish BOS/CHoCH
        #    Ho·∫∑c close < pivotLow => bearish BOS/CHoCH
        #    T·ª´ Pine Script: if ta.crossover(close, pivotHigh.currentLevel) ...
        #    M√¨nh m√¥ ph·ªèng:
        
        # Ki·ªÉm tra pivot High
        if not swingHigh.crossed and not np.isnan(swingHigh.currentLevel):
            if close[i] > swingHigh.currentLevel:
                # => breakout pivot high
                # Xem ƒë√¢y l√† BOS hay CHoCH
                if swingTrend.bias == Bias.BEARISH:
                    # => CHoCH
                    currentAlerts.swingBullishCHoCH = True
                    mark_text = "CHoCH ‚Üë"
                else:
                    # => BOS
                    currentAlerts.swingBullishBOS = True
                    mark_text = "BOS ‚Üë"
                # C·∫≠p nh·∫≠t trend
                swingTrend.bias = Bias.BULLISH
                swingHigh.crossed = True

                bos_choch_marks.append((i, swingHigh.currentLevel, mark_text, COLOR_BULLISH))

        # Ki·ªÉm tra pivot Low
        if not swingLow.crossed and not np.isnan(swingLow.currentLevel):
            if close[i] < swingLow.currentLevel:
                # => breakout pivot low
                if swingTrend.bias == Bias.BULLISH:
                    currentAlerts.swingBearishCHoCH = True
                    mark_text = "CHoCH ‚Üì"
                else:
                    currentAlerts.swingBearishBOS = True
                    mark_text = "BOS ‚Üì"

                swingTrend.bias = Bias.BEARISH
                swingLow.crossed = True

                bos_choch_marks.append((i, swingLow.currentLevel, mark_text, COLOR_BEARISH))

    # Tr·∫£ v·ªÅ list ƒë√°nh d·∫•u, v√† Alert ‚Äúc√≥ g√¨ x·∫£y ra kh√¥ng‚Äù
    return bos_choch_marks, currentAlerts

# ---------------------------------------------
# 4) H√†m main: L·∫•y d·ªØ li·ªáu t·ª´ yfinance, x·ª≠ l√Ω, v·∫Ω
# ---------------------------------------------

def main():
    #T·∫£i d·ªØ li·ªáu AAPL t·ª´ 2014-01-01 ƒë·∫øn hi·ªán t·∫°i
    df = yf.download("AAPL", start="2014-01-01", end=None, interval="1d")
    if df.empty:
        print("Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu AAPL t·ª´ yfinance.")
        return

    df_filtered = pd.DataFrame({
    "Date": df.index,  # L·∫•y index l√†m c·ªôt Date
    "Open": df["Open"].squeeze(),
    "High": df["High"].squeeze(),
    "Low": df["Low"].squeeze(),
    "Close": df["Close"].squeeze()
    })

    # ƒê·∫∑t l·∫°i index v·ªÅ c·ªôt Date
    df_filtered.set_index("Date", inplace=True)
    #===========================================================================
    # Ph√°t hi·ªán structure SMC (BOS, CHoCH) tr√™n data
    bos_choch_marks, alerts = detect_swing_structure(df_filtered, lookback=5)


    # ------------------------------------------------
    # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn + ƒë√°nh d·∫•u BOS/CHoCH
    # ------------------------------------------------
    # T·∫°o Figure
    fig = go.Figure()
    fig.add_trace(go.Candlestick(
        x=df_filtered.index,
        open=df_filtered["Open"],
        high=df_filtered["High"],
        low=df_filtered["Low"],
        close=df_filtered["Close"],
        name="AAPL Candlestick"
    ))
    
    fig.update_layout(
    title="AAPL Candlestick Chart (Simulated Data)",
    xaxis_title="Date",
    yaxis_title="Price (USD)",
    xaxis_rangeslider_visible=False,
    template="plotly_dark"
    )

    # V·∫Ω c√°c ƒëi·ªÉm BOS/CHoCH
    for (i, price, text, color) in bos_choch_marks:
        fig.add_trace(go.Scatter(
            x=[df_filtered.index[i]],
            y=[price],
            mode="markers+text",
            marker=dict(color=color, size=10),
            text=[text],
            textposition="top center"
        ))

    # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ v√† nh√£n
    fig.update_layout(
        title="SMC (BOS/CHoCH) demo tr√™n AAPL - khung Daily",
        xaxis_title="Th·ªùi gian",
        yaxis_title="Gi√° (USD)",
        showlegend=True
    )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    fig.show()

    # In ra alert cu·ªëi c√πng
    print("Alerts cu·ªëi c√πng:", alerts)

# ---------------------------------------------
# 5) Ch·∫°y h√†m main
# ---------------------------------------------
if __name__ == "__main__":
    main()
